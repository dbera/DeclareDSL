/*
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.expressions.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import nl.esi.comma.expressions.ide.contentassist.antlr.internal.InternalExpressionsParser;
import nl.esi.comma.expressions.services.ExpressionsGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ExpressionsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ExpressionsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ExpressionsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1(), "rule__ExpressionLevel1__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1_0_1(), "rule__ExpressionLevel1__Alternatives_1_0_1");
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1_1_1(), "rule__ExpressionLevel1__Alternatives_1_1_1");
			builder.put(grammarAccess.getExpressionLevel2Access().getAlternatives_1(), "rule__ExpressionLevel2__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel3Access().getAlternatives_1(), "rule__ExpressionLevel3__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel4Access().getAlternatives_1(), "rule__ExpressionLevel4__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel5Access().getAlternatives_1(), "rule__ExpressionLevel5__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel7Access().getAlternatives(), "rule__ExpressionLevel7__Alternatives");
			builder.put(grammarAccess.getExpressionNotAccess().getAlternatives_0(), "rule__ExpressionNot__Alternatives_0");
			builder.put(grammarAccess.getExpressionLevel8Access().getAlternatives(), "rule__ExpressionLevel8__Alternatives");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getAlternatives_1(), "rule__ExpressionTypeAnnotated__Alternatives_1");
			builder.put(grammarAccess.getConcreteExpressionBinaryAccess().getAlternatives(), "rule__ConcreteExpressionBinary__Alternatives");
			builder.put(grammarAccess.getConcreteExpressionUnaryAccess().getAlternatives(), "rule__ConcreteExpressionUnary__Alternatives");
			builder.put(grammarAccess.getQUANTIFIERAccess().getAlternatives(), "rule__QUANTIFIER__Alternatives");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup(), "rule__ExpressionLevel1__Group__0");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup_1_0(), "rule__ExpressionLevel1__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup_1_1(), "rule__ExpressionLevel1__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup(), "rule__ExpressionLevel2__Group__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup_1_0(), "rule__ExpressionLevel2__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup_1_1(), "rule__ExpressionLevel2__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup(), "rule__ExpressionLevel3__Group__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_0(), "rule__ExpressionLevel3__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_1(), "rule__ExpressionLevel3__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_2(), "rule__ExpressionLevel3__Group_1_2__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_3(), "rule__ExpressionLevel3__Group_1_3__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup(), "rule__ExpressionLevel4__Group__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup_1_0(), "rule__ExpressionLevel4__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup_1_1(), "rule__ExpressionLevel4__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup(), "rule__ExpressionLevel5__Group__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_0(), "rule__ExpressionLevel5__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_1(), "rule__ExpressionLevel5__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_2(), "rule__ExpressionLevel5__Group_1_2__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_3(), "rule__ExpressionLevel5__Group_1_3__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_4(), "rule__ExpressionLevel5__Group_1_4__0");
			builder.put(grammarAccess.getExpressionLevel6Access().getGroup(), "rule__ExpressionLevel6__Group__0");
			builder.put(grammarAccess.getExpressionLevel6Access().getGroup_1(), "rule__ExpressionLevel6__Group_1__0");
			builder.put(grammarAccess.getExpressionNotAccess().getGroup(), "rule__ExpressionNot__Group__0");
			builder.put(grammarAccess.getExpressionMinusAccess().getGroup(), "rule__ExpressionMinus__Group__0");
			builder.put(grammarAccess.getExpressionPlusAccess().getGroup(), "rule__ExpressionPlus__Group__0");
			builder.put(grammarAccess.getExpressionBracketAccess().getGroup(), "rule__ExpressionBracket__Group__0");
			builder.put(grammarAccess.getExpressionEnumLiteralAccess().getGroup(), "rule__ExpressionEnumLiteral__Group__0");
			builder.put(grammarAccess.getExpressionAnyAccess().getGroup(), "rule__ExpressionAny__Group__0");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getGroup(), "rule__ExpressionFunctionCall__Group__0");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getGroup_2(), "rule__ExpressionFunctionCall__Group_2__0");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getGroup_2_1(), "rule__ExpressionFunctionCall__Group_2_1__0");
			builder.put(grammarAccess.getExpressionQuantifierAccess().getGroup(), "rule__ExpressionQuantifier__Group__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup(), "rule__ExpressionTypeAnnotated__Group__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_0(), "rule__ExpressionTypeAnnotated__Group_1_0__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_0_2(), "rule__ExpressionTypeAnnotated__Group_1_0_2__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_0_2_1(), "rule__ExpressionTypeAnnotated__Group_1_0_2_1__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_1(), "rule__ExpressionTypeAnnotated__Group_1_1__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_1_2(), "rule__ExpressionTypeAnnotated__Group_1_1_2__0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getGroup_1_1_2_1(), "rule__ExpressionTypeAnnotated__Group_1_1_2_1__0");
			builder.put(grammarAccess.getTypeAnnotationAccess().getGroup(), "rule__TypeAnnotation__Group__0");
			builder.put(grammarAccess.getPairAccess().getGroup(), "rule__Pair__Group__0");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
			builder.put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel1__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel1__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel2__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel2__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel3__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel3__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel3__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel3__RightAssignment_1_3_2");
			builder.put(grammarAccess.getExpressionLevel4Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel4__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel4Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel4__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel5__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel5__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel5__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel5__RightAssignment_1_3_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_4_2(), "rule__ExpressionLevel5__RightAssignment_1_4_2");
			builder.put(grammarAccess.getExpressionLevel6Access().getRightAssignment_1_2(), "rule__ExpressionLevel6__RightAssignment_1_2");
			builder.put(grammarAccess.getExpressionNotAccess().getSubAssignment_1(), "rule__ExpressionNot__SubAssignment_1");
			builder.put(grammarAccess.getExpressionMinusAccess().getSubAssignment_1(), "rule__ExpressionMinus__SubAssignment_1");
			builder.put(grammarAccess.getExpressionPlusAccess().getSubAssignment_1(), "rule__ExpressionPlus__SubAssignment_1");
			builder.put(grammarAccess.getExpressionBracketAccess().getSubAssignment_1(), "rule__ExpressionBracket__SubAssignment_1");
			builder.put(grammarAccess.getExpressionConstantBoolAccess().getValueAssignment(), "rule__ExpressionConstantBool__ValueAssignment");
			builder.put(grammarAccess.getExpressionConstantIntAccess().getValueAssignment(), "rule__ExpressionConstantInt__ValueAssignment");
			builder.put(grammarAccess.getExpressionConstantStringAccess().getValueAssignment(), "rule__ExpressionConstantString__ValueAssignment");
			builder.put(grammarAccess.getExpressionEnumLiteralAccess().getTypeAssignment_0(), "rule__ExpressionEnumLiteral__TypeAssignment_0");
			builder.put(grammarAccess.getExpressionEnumLiteralAccess().getLiteralAssignment_2(), "rule__ExpressionEnumLiteral__LiteralAssignment_2");
			builder.put(grammarAccess.getExpressionVariableAccess().getNameAssignment(), "rule__ExpressionVariable__NameAssignment");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getFunctionNameAssignment_0(), "rule__ExpressionFunctionCall__FunctionNameAssignment_0");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getArgsAssignment_2_0(), "rule__ExpressionFunctionCall__ArgsAssignment_2_0");
			builder.put(grammarAccess.getExpressionFunctionCallAccess().getArgsAssignment_2_1_1(), "rule__ExpressionFunctionCall__ArgsAssignment_2_1_1");
			builder.put(grammarAccess.getExpressionQuantifierAccess().getQuantifierAssignment_0(), "rule__ExpressionQuantifier__QuantifierAssignment_0");
			builder.put(grammarAccess.getExpressionQuantifierAccess().getIteratorAssignment_2(), "rule__ExpressionQuantifier__IteratorAssignment_2");
			builder.put(grammarAccess.getExpressionQuantifierAccess().getCollectionAssignment_4(), "rule__ExpressionQuantifier__CollectionAssignment_4");
			builder.put(grammarAccess.getExpressionQuantifierAccess().getConditionAssignment_6(), "rule__ExpressionQuantifier__ConditionAssignment_6");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsAssignment_1_0_2_0(), "rule__ExpressionTypeAnnotated__ElementsAssignment_1_0_2_0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsAssignment_1_0_2_1_1(), "rule__ExpressionTypeAnnotated__ElementsAssignment_1_0_2_1_1");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsAssignment_1_1_2_0(), "rule__ExpressionTypeAnnotated__PairsAssignment_1_1_2_0");
			builder.put(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsAssignment_1_1_2_1_1(), "rule__ExpressionTypeAnnotated__PairsAssignment_1_1_2_1_1");
			builder.put(grammarAccess.getTypeAnnotationAccess().getTypeAssignment_1(), "rule__TypeAnnotation__TypeAssignment_1");
			builder.put(grammarAccess.getPairAccess().getKeyAssignment_0(), "rule__Pair__KeyAssignment_0");
			builder.put(grammarAccess.getPairAccess().getValueAssignment_2(), "rule__Pair__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ExpressionsGrammarAccess grammarAccess;

	@Override
	protected InternalExpressionsParser createParser() {
		InternalExpressionsParser result = new InternalExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
