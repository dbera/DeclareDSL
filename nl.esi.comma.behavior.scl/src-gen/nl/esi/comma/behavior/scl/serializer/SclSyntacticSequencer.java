/*
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.serializer;

import com.google.inject.Inject;
import java.util.List;
import nl.esi.comma.behavior.scl.services.SclGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SclSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SclGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AlternatePrecedence_OccursKeyword_4_q;
	protected AbstractElementAlias match_AlternateResponse_OccursKeyword_4_q;
	protected AbstractElementAlias match_AlternateSuccession_OccursKeyword_3_q;
	protected AbstractElementAlias match_ChainPrecedence_OccursKeyword_4_q;
	protected AbstractElementAlias match_ChainResponse_OccursKeyword_4_q;
	protected AbstractElementAlias match_Composition___RequirementTagsKeyword_8_0_SemicolonKeyword_8_2__q;
	protected AbstractElementAlias match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1;
	protected AbstractElementAlias match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1;
	protected AbstractElementAlias match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1;
	protected AbstractElementAlias match_NotChainSuccession_OccursKeyword_3_q;
	protected AbstractElementAlias match_NotSuccession_OccursKeyword_3_q;
	protected AbstractElementAlias match_Precedence_OccursKeyword_4_q;
	protected AbstractElementAlias match_RespondedExistence_OccursKeyword_4_q;
	protected AbstractElementAlias match_Response_OccursKeyword_4_q;
	protected AbstractElementAlias match_Succession_OccursKeyword_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SclGrammarAccess) access;
		match_AlternatePrecedence_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getAlternatePrecedenceAccess().getOccursKeyword_4());
		match_AlternateResponse_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getAlternateResponseAccess().getOccursKeyword_4());
		match_AlternateSuccession_OccursKeyword_3_q = new TokenAlias(false, true, grammarAccess.getAlternateSuccessionAccess().getOccursKeyword_3());
		match_ChainPrecedence_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getChainPrecedenceAccess().getOccursKeyword_4());
		match_ChainResponse_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getChainResponseAccess().getOccursKeyword_4());
		match_Composition___RequirementTagsKeyword_8_0_SemicolonKeyword_8_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositionAccess().getRequirementTagsKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getCompositionAccess().getSemicolonKeyword_8_2()));
		match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getANDKeyword_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getAndKeyword_1_0_1_1()));
		match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getORKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getOrKeyword_1_1_1_1()));
		match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionNotAccess().getNOTKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getExpressionNotAccess().getNotKeyword_0_1()));
		match_NotChainSuccession_OccursKeyword_3_q = new TokenAlias(false, true, grammarAccess.getNotChainSuccessionAccess().getOccursKeyword_3());
		match_NotSuccession_OccursKeyword_3_q = new TokenAlias(false, true, grammarAccess.getNotSuccessionAccess().getOccursKeyword_3());
		match_Precedence_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getPrecedenceAccess().getOccursKeyword_4());
		match_RespondedExistence_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRespondedExistenceAccess().getOccursKeyword_4());
		match_Response_OccursKeyword_4_q = new TokenAlias(false, true, grammarAccess.getResponseAccess().getOccursKeyword_4());
		match_Succession_OccursKeyword_3_q = new TokenAlias(false, true, grammarAccess.getSuccessionAccess().getOccursKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AlternatePrecedence_OccursKeyword_4_q.equals(syntax))
				emit_AlternatePrecedence_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AlternateResponse_OccursKeyword_4_q.equals(syntax))
				emit_AlternateResponse_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AlternateSuccession_OccursKeyword_3_q.equals(syntax))
				emit_AlternateSuccession_OccursKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChainPrecedence_OccursKeyword_4_q.equals(syntax))
				emit_ChainPrecedence_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChainResponse_OccursKeyword_4_q.equals(syntax))
				emit_ChainResponse_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Composition___RequirementTagsKeyword_8_0_SemicolonKeyword_8_2__q.equals(syntax))
				emit_Composition___RequirementTagsKeyword_8_0_SemicolonKeyword_8_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1.equals(syntax))
				emit_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1.equals(syntax))
				emit_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1.equals(syntax))
				emit_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NotChainSuccession_OccursKeyword_3_q.equals(syntax))
				emit_NotChainSuccession_OccursKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NotSuccession_OccursKeyword_3_q.equals(syntax))
				emit_NotSuccession_OccursKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Precedence_OccursKeyword_4_q.equals(syntax))
				emit_Precedence_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RespondedExistence_OccursKeyword_4_q.equals(syntax))
				emit_RespondedExistence_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Response_OccursKeyword_4_q.equals(syntax))
				emit_Response_OccursKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Succession_OccursKeyword_3_q.equals(syntax))
				emit_Succession_OccursKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refB+=Ref (ambiguity) 'then' eitherA?='either'
	 *     refB+=Ref (ambiguity) 'then' refA+=Ref
	 */
	protected void emit_AlternatePrecedence_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'then' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'then' refB+=Ref
	 */
	protected void emit_AlternateResponse_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'if-and-only-if-followed-by' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'if-and-only-if-followed-by' refB+=Ref
	 */
	protected void emit_AlternateSuccession_OccursKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refB+=Ref (ambiguity) 'then' eitherA?='either'
	 *     refB+=Ref (ambiguity) 'then' refA+=Ref
	 */
	protected void emit_ChainPrecedence_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'then' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'then' refB+=Ref
	 */
	protected void emit_ChainResponse_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('requirement-tags' ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     commonFeatures+=[Feature|ID] ';' (ambiguity) (rule end)
	 *     descTxt=STRING (ambiguity) (rule end)
	 *     templates+=[Templates|ID] '}' (ambiguity) (rule end)
	 */
	protected void emit_Composition___RequirementTagsKeyword_8_0_SemicolonKeyword_8_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'AND' | 'and'
	 *
	 * This ambiguous syntax occurs at:
	 *     {ExpressionAnd.left=} (ambiguity) right=ExpressionLevel2
	 */
	protected void emit_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'OR' | 'or'
	 *
	 * This ambiguous syntax occurs at:
	 *     {ExpressionOr.left=} (ambiguity) right=ExpressionLevel2
	 */
	protected void emit_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'NOT' | 'not'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) sub=ExpressionLevel8
	 */
	protected void emit_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'if-and-only-if-not-followed-immediately-by' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'if-and-only-if-not-followed-immediately-by' refB+=Ref
	 */
	protected void emit_NotChainSuccession_OccursKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'if-and-only-if-not-followed-by' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'if-and-only-if-not-followed-by' refB+=Ref
	 */
	protected void emit_NotSuccession_OccursKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refB+=Ref (ambiguity) 'then' eitherA?='either'
	 *     refB+=Ref (ambiguity) 'then' refA+=Ref
	 */
	protected void emit_Precedence_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'then' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'then' refB+=Ref
	 */
	protected void emit_RespondedExistence_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'then' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'then' refB+=Ref
	 */
	protected void emit_Response_OccursKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'occurs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     refA+=Ref (ambiguity) 'if-and-only-if-followed-by' eitherB?='either'
	 *     refA+=Ref (ambiguity) 'if-and-only-if-followed-by' refB+=Ref
	 */
	protected void emit_Succession_OccursKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
