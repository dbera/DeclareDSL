/*
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.esi.comma.behavior.scl.scl.ActionParam;
import nl.esi.comma.behavior.scl.scl.Actions;
import nl.esi.comma.behavior.scl.scl.AlternatePrecedence;
import nl.esi.comma.behavior.scl.scl.AlternateResponse;
import nl.esi.comma.behavior.scl.scl.AlternateSuccession;
import nl.esi.comma.behavior.scl.scl.AtLeast;
import nl.esi.comma.behavior.scl.scl.AtMost;
import nl.esi.comma.behavior.scl.scl.ChainPrecedence;
import nl.esi.comma.behavior.scl.scl.ChainResponse;
import nl.esi.comma.behavior.scl.scl.ChainSuccession;
import nl.esi.comma.behavior.scl.scl.Choice;
import nl.esi.comma.behavior.scl.scl.CoExistance;
import nl.esi.comma.behavior.scl.scl.Composition;
import nl.esi.comma.behavior.scl.scl.Dependencies;
import nl.esi.comma.behavior.scl.scl.End;
import nl.esi.comma.behavior.scl.scl.Exact;
import nl.esi.comma.behavior.scl.scl.ExclusiveChoice;
import nl.esi.comma.behavior.scl.scl.Existential;
import nl.esi.comma.behavior.scl.scl.Feature;
import nl.esi.comma.behavior.scl.scl.Features;
import nl.esi.comma.behavior.scl.scl.Future;
import nl.esi.comma.behavior.scl.scl.Init;
import nl.esi.comma.behavior.scl.scl.Model;
import nl.esi.comma.behavior.scl.scl.NotChainSuccession;
import nl.esi.comma.behavior.scl.scl.NotCoExistance;
import nl.esi.comma.behavior.scl.scl.NotSuccession;
import nl.esi.comma.behavior.scl.scl.ParamAct;
import nl.esi.comma.behavior.scl.scl.Past;
import nl.esi.comma.behavior.scl.scl.Precedence;
import nl.esi.comma.behavior.scl.scl.RefSequence;
import nl.esi.comma.behavior.scl.scl.RefStep;
import nl.esi.comma.behavior.scl.scl.RespondedExistence;
import nl.esi.comma.behavior.scl.scl.Response;
import nl.esi.comma.behavior.scl.scl.SclPackage;
import nl.esi.comma.behavior.scl.scl.SequenceDef;
import nl.esi.comma.behavior.scl.scl.SimpleChoice;
import nl.esi.comma.behavior.scl.scl.Succession;
import nl.esi.comma.behavior.scl.scl.Templates;
import nl.esi.comma.behavior.scl.services.SclGrammarAccess;
import nl.esi.comma.expressions.expressions.ExpressionAddition;
import nl.esi.comma.expressions.expressions.ExpressionAnd;
import nl.esi.comma.expressions.expressions.ExpressionAny;
import nl.esi.comma.expressions.expressions.ExpressionBinary;
import nl.esi.comma.expressions.expressions.ExpressionBracket;
import nl.esi.comma.expressions.expressions.ExpressionConstantBool;
import nl.esi.comma.expressions.expressions.ExpressionConstantInt;
import nl.esi.comma.expressions.expressions.ExpressionConstantString;
import nl.esi.comma.expressions.expressions.ExpressionDivision;
import nl.esi.comma.expressions.expressions.ExpressionEnumLiteral;
import nl.esi.comma.expressions.expressions.ExpressionEqual;
import nl.esi.comma.expressions.expressions.ExpressionFunctionCall;
import nl.esi.comma.expressions.expressions.ExpressionGeq;
import nl.esi.comma.expressions.expressions.ExpressionGreater;
import nl.esi.comma.expressions.expressions.ExpressionLeq;
import nl.esi.comma.expressions.expressions.ExpressionLess;
import nl.esi.comma.expressions.expressions.ExpressionMap;
import nl.esi.comma.expressions.expressions.ExpressionMaximum;
import nl.esi.comma.expressions.expressions.ExpressionMinimum;
import nl.esi.comma.expressions.expressions.ExpressionMinus;
import nl.esi.comma.expressions.expressions.ExpressionModulo;
import nl.esi.comma.expressions.expressions.ExpressionMultiply;
import nl.esi.comma.expressions.expressions.ExpressionNEqual;
import nl.esi.comma.expressions.expressions.ExpressionNot;
import nl.esi.comma.expressions.expressions.ExpressionOr;
import nl.esi.comma.expressions.expressions.ExpressionPlus;
import nl.esi.comma.expressions.expressions.ExpressionPower;
import nl.esi.comma.expressions.expressions.ExpressionQuantifier;
import nl.esi.comma.expressions.expressions.ExpressionSubtraction;
import nl.esi.comma.expressions.expressions.ExpressionUnary;
import nl.esi.comma.expressions.expressions.ExpressionVariable;
import nl.esi.comma.expressions.expressions.ExpressionVector;
import nl.esi.comma.expressions.expressions.ExpressionsPackage;
import nl.esi.comma.expressions.expressions.Pair;
import nl.esi.comma.expressions.expressions.TypeAnnotation;
import nl.esi.comma.expressions.expressions.Variable;
import nl.esi.comma.expressions.serializer.ExpressionsSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SclSemanticSequencer extends ExpressionsSemanticSequencer {

	@Inject
	private SclGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ExpressionsPackage.EXPRESSION_ADDITION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionAddition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()) {
					sequence_ExpressionLevel4(context, (ExpressionAddition) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_AND:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionAnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()) {
					sequence_ExpressionLevel1(context, (ExpressionAnd) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_ANY:
				sequence_ExpressionAny(context, (ExpressionAny) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_BINARY:
				sequence_ExpressionBinary(context, (ExpressionBinary) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_BRACKET:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionBracket) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionLevel8Rule()
						|| rule == grammarAccess.getExpressionBracketRule()) {
					sequence_ExpressionBracket(context, (ExpressionBracket) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_CONSTANT_BOOL:
				sequence_ExpressionConstantBool(context, (ExpressionConstantBool) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_CONSTANT_INT:
				sequence_ExpressionConstantInt(context, (ExpressionConstantInt) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_CONSTANT_STRING:
				sequence_ExpressionConstantString(context, (ExpressionConstantString) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_DIVISION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionDivision) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionDivision) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_ENUM_LITERAL:
				sequence_ExpressionEnumLiteral(context, (ExpressionEnumLiteral) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_EQUAL:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()) {
					sequence_ExpressionLevel2(context, (ExpressionEqual) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_FUNCTION_CALL:
				sequence_ExpressionFunctionCall(context, (ExpressionFunctionCall) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_GEQ:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionGeq) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionGeq) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_GREATER:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionGreater) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionGreater) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_LEQ:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionLeq) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionLeq) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_LESS:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionLess) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionLess) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MAP:
				sequence_ExpressionTypeAnnotated(context, (ExpressionMap) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_MAXIMUM:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMaximum) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMaximum) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MINIMUM:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMinimum) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMinimum) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MINUS:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionMinus) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionMinusRule()) {
					sequence_ExpressionMinus(context, (ExpressionMinus) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MODULO:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionModulo) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionModulo) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MULTIPLY:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMultiply) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMultiply) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_NEQUAL:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionNEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()) {
					sequence_ExpressionLevel2(context, (ExpressionNEqual) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_NOT:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionNot) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionNotRule()) {
					sequence_ExpressionNot(context, (ExpressionNot) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_OR:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionOr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()) {
					sequence_ExpressionLevel1(context, (ExpressionOr) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_PLUS:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionPlus) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionPlusRule()) {
					sequence_ExpressionPlus(context, (ExpressionPlus) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_POWER:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionPower) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()) {
					sequence_ExpressionLevel6(context, (ExpressionPower) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_QUANTIFIER:
				sequence_ExpressionQuantifier(context, (ExpressionQuantifier) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_SUBTRACTION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionSubtraction) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()) {
					sequence_ExpressionLevel4(context, (ExpressionSubtraction) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_UNARY:
				sequence_ExpressionUnary(context, (ExpressionUnary) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_VARIABLE:
				sequence_ExpressionVariable(context, (ExpressionVariable) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_VECTOR:
				sequence_ExpressionTypeAnnotated(context, (ExpressionVector) semanticObject); 
				return; 
			case ExpressionsPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case ExpressionsPackage.TYPE_ANNOTATION:
				sequence_TypeAnnotation(context, (TypeAnnotation) semanticObject); 
				return; 
			case ExpressionsPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		else if (epackage == SclPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SclPackage.ACTION:
				sequence_Action(context, (nl.esi.comma.behavior.scl.scl.Action) semanticObject); 
				return; 
			case SclPackage.ACTION_PARAM:
				sequence_ActionParam(context, (ActionParam) semanticObject); 
				return; 
			case SclPackage.ACTIONS:
				sequence_Actions(context, (Actions) semanticObject); 
				return; 
			case SclPackage.ALTERNATE_PRECEDENCE:
				sequence_AlternatePrecedence(context, (AlternatePrecedence) semanticObject); 
				return; 
			case SclPackage.ALTERNATE_RESPONSE:
				sequence_AlternateResponse(context, (AlternateResponse) semanticObject); 
				return; 
			case SclPackage.ALTERNATE_SUCCESSION:
				sequence_AlternateSuccession(context, (AlternateSuccession) semanticObject); 
				return; 
			case SclPackage.AT_LEAST:
				sequence_AtLeast(context, (AtLeast) semanticObject); 
				return; 
			case SclPackage.AT_MOST:
				sequence_AtMost(context, (AtMost) semanticObject); 
				return; 
			case SclPackage.CHAIN_PRECEDENCE:
				sequence_ChainPrecedence(context, (ChainPrecedence) semanticObject); 
				return; 
			case SclPackage.CHAIN_RESPONSE:
				sequence_ChainResponse(context, (ChainResponse) semanticObject); 
				return; 
			case SclPackage.CHAIN_SUCCESSION:
				sequence_ChainSuccession(context, (ChainSuccession) semanticObject); 
				return; 
			case SclPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case SclPackage.CO_EXISTANCE:
				sequence_CoExistance(context, (CoExistance) semanticObject); 
				return; 
			case SclPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case SclPackage.DEPENDENCIES:
				sequence_Dependencies(context, (Dependencies) semanticObject); 
				return; 
			case SclPackage.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case SclPackage.EXACT:
				sequence_Exact(context, (Exact) semanticObject); 
				return; 
			case SclPackage.EXCLUSIVE_CHOICE:
				sequence_ExclusiveChoice(context, (ExclusiveChoice) semanticObject); 
				return; 
			case SclPackage.EXISTENTIAL:
				sequence_Existential(context, (Existential) semanticObject); 
				return; 
			case SclPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case SclPackage.FEATURES:
				sequence_Features(context, (Features) semanticObject); 
				return; 
			case SclPackage.FUTURE:
				sequence_Future(context, (Future) semanticObject); 
				return; 
			case SclPackage.INIT:
				sequence_Init(context, (Init) semanticObject); 
				return; 
			case SclPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SclPackage.NOT_CHAIN_SUCCESSION:
				sequence_NotChainSuccession(context, (NotChainSuccession) semanticObject); 
				return; 
			case SclPackage.NOT_CO_EXISTANCE:
				sequence_NotCoExistance(context, (NotCoExistance) semanticObject); 
				return; 
			case SclPackage.NOT_SUCCESSION:
				sequence_NotSuccession(context, (NotSuccession) semanticObject); 
				return; 
			case SclPackage.PARAM_ACT:
				sequence_ParamAct(context, (ParamAct) semanticObject); 
				return; 
			case SclPackage.PAST:
				sequence_Past(context, (Past) semanticObject); 
				return; 
			case SclPackage.PRECEDENCE:
				sequence_Precedence(context, (Precedence) semanticObject); 
				return; 
			case SclPackage.REF_SEQUENCE:
				sequence_RefSequence(context, (RefSequence) semanticObject); 
				return; 
			case SclPackage.REF_STEP:
				sequence_RefStep(context, (RefStep) semanticObject); 
				return; 
			case SclPackage.RESPONDED_EXISTENCE:
				sequence_RespondedExistence(context, (RespondedExistence) semanticObject); 
				return; 
			case SclPackage.RESPONSE:
				sequence_Response(context, (Response) semanticObject); 
				return; 
			case SclPackage.SEQUENCE_DEF:
				sequence_SequenceDef(context, (SequenceDef) semanticObject); 
				return; 
			case SclPackage.SIMPLE_CHOICE:
				sequence_SimpleChoice(context, (SimpleChoice) semanticObject); 
				return; 
			case SclPackage.SUCCESSION:
				sequence_Succession(context, (Succession) semanticObject); 
				return; 
			case SclPackage.TEMPLATES:
				sequence_Templates(context, (Templates) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionParam returns ActionParam
	 *
	 * Constraint:
	 *     (parameters+=Expression parameters+=Expression*)
	 */
	protected void sequence_ActionParam(ISerializationContext context, ActionParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (act=ActionType name=ID label=STRING actParam+=ActionParam*)
	 */
	protected void sequence_Action(ISerializationContext context, nl.esi.comma.behavior.scl.scl.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns Actions
	 *
	 * Constraint:
	 *     act+=Action+
	 */
	protected void sequence_Actions(ISerializationContext context, Actions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlternatePrecedence returns AlternatePrecedence
	 *
	 * Constraint:
	 *     (
	 *         eitherB?='either'? 
	 *         refB+=Ref 
	 *         eitherA?='either'? 
	 *         refA+=Ref 
	 *         (minVal=INT maxVal=INT?)? 
	 *         not?='no'? 
	 *         eitherC?='either'? 
	 *         refC+=Ref
	 *     )
	 */
	protected void sequence_AlternatePrecedence(ISerializationContext context, AlternatePrecedence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlternateResponse returns AlternateResponse
	 *
	 * Constraint:
	 *     (
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         (minVal=INT maxVal=INT?)? 
	 *         not?='no'? 
	 *         eitherC?='either'? 
	 *         refC+=Ref+
	 *     )
	 */
	protected void sequence_AlternateResponse(ISerializationContext context, AlternateResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlternateSuccession returns AlternateSuccession
	 *
	 * Constraint:
	 *     (
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         eitherC?='either'? 
	 *         negation?='no'? 
	 *         refC+=Ref+
	 *     )
	 */
	protected void sequence_AlternateSuccession(ISerializationContext context, AlternateSuccession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtLeast returns AtLeast
	 *
	 * Constraint:
	 *     (ref+=Ref+ num=INT (minVal=INT maxVal=INT?)?)
	 */
	protected void sequence_AtLeast(ISerializationContext context, AtLeast semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtMost returns AtMost
	 *
	 * Constraint:
	 *     (ref+=Ref+ num=INT)
	 */
	protected void sequence_AtMost(ISerializationContext context, AtMost semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChainPrecedence returns ChainPrecedence
	 *
	 * Constraint:
	 *     (
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         not?='not'? 
	 *         (minVal=INT maxVal=INT?)?
	 *     )
	 */
	protected void sequence_ChainPrecedence(ISerializationContext context, ChainPrecedence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChainResponse returns ChainResponse
	 *
	 * Constraint:
	 *     (
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         not?='not'? 
	 *         (minVal=INT maxVal=INT?)?
	 *     )
	 */
	protected void sequence_ChainResponse(ISerializationContext context, ChainResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChainSuccession returns ChainSuccession
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+ (minVal=INT maxVal=INT?)?)
	 */
	protected void sequence_ChainSuccession(ISerializationContext context, ChainSuccession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Choice returns Choice
	 *
	 * Constraint:
	 *     (type+=SimpleChoice | type+=ExclusiveChoice)+
	 */
	protected void sequence_Choice(ISerializationContext context, Choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CoExistance returns CoExistance
	 *
	 * Constraint:
	 *     refA+=Ref+
	 */
	protected void sequence_CoExistance(ISerializationContext context, CoExistance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (name=ID templates+=[Templates|ID]+ descTxt=STRING? commonFeatures+=[Feature|ID]* tagStr+=STRING*)
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dependencies returns Dependencies
	 *
	 * Constraint:
	 *     (
	 *         type+=Succession | 
	 *         type+=CoExistance | 
	 *         type+=AlternateSuccession | 
	 *         type+=ChainSuccession | 
	 *         type+=RespondedExistence | 
	 *         type+=NotSuccession | 
	 *         type+=NotCoExistance | 
	 *         type+=NotChainSuccession
	 *     )+
	 */
	protected void sequence_Dependencies(ISerializationContext context, Dependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     End returns End
	 *
	 * Constraint:
	 *     ref+=Ref+
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exact returns Exact
	 *
	 * Constraint:
	 *     (ref+=Ref+ num=INT consecutively?='consecutively'? (minVal=INT maxVal=INT?)?)
	 */
	protected void sequence_Exact(ISerializationContext context, Exact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExclusiveChoice returns ExclusiveChoice
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+)
	 */
	protected void sequence_ExclusiveChoice(ISerializationContext context, ExclusiveChoice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Existential returns Existential
	 *
	 * Constraint:
	 *     (type+=AtLeast | type+=AtMost | type+=Init | type+=End | type+=Exact)+
	 */
	protected void sequence_Existential(ISerializationContext context, Existential semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SclPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SclPackage.Literals.FEATURE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Features returns Features
	 *
	 * Constraint:
	 *     feature+=Feature+
	 */
	protected void sequence_Features(ISerializationContext context, Features semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Future returns Future
	 *
	 * Constraint:
	 *     (type+=Response | type+=AlternateResponse | type+=ChainResponse)+
	 */
	protected void sequence_Future(ISerializationContext context, Future semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Init returns Init
	 *
	 * Constraint:
	 *     ref+=Ref+
	 */
	protected void sequence_Init(ISerializationContext context, Init semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         features+=Features* 
	 *         actions+=Actions+ 
	 *         sequences+=SequenceDef* 
	 *         composition+=Composition* 
	 *         commonFeatures+=[Feature|ID]* 
	 *         templates+=Templates* 
	 *         useLabels?='use-provided-labels'?
	 *     )
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NotChainSuccession returns NotChainSuccession
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+)
	 */
	protected void sequence_NotChainSuccession(ISerializationContext context, NotChainSuccession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NotCoExistance returns NotCoExistance
	 *
	 * Constraint:
	 *     refA+=Ref+
	 */
	protected void sequence_NotCoExistance(ISerializationContext context, NotCoExistance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NotSuccession returns NotSuccession
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+)
	 */
	protected void sequence_NotSuccession(ISerializationContext context, NotSuccession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParamAct returns ParamAct
	 *
	 * Constraint:
	 *     (act=[Action|ID] idx=INT?)
	 */
	protected void sequence_ParamAct(ISerializationContext context, ParamAct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Past returns Past
	 *
	 * Constraint:
	 *     (type+=Precedence | type+=AlternatePrecedence | type+=ChainPrecedence)+
	 */
	protected void sequence_Past(ISerializationContext context, Past semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Precedence returns Precedence
	 *
	 * Constraint:
	 *     (
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         not?='not'? 
	 *         (minVal=INT maxVal=INT?)?
	 *     )
	 */
	protected void sequence_Precedence(ISerializationContext context, Precedence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ref returns RefSequence
	 *     RefSequence returns RefSequence
	 *
	 * Constraint:
	 *     seq=[SequenceDef|ID]
	 */
	protected void sequence_RefSequence(ISerializationContext context, RefSequence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SclPackage.Literals.REF_SEQUENCE__SEQ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SclPackage.Literals.REF_SEQUENCE__SEQ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefSequenceAccess().getSeqSequenceDefIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SclPackage.Literals.REF_SEQUENCE__SEQ, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ref returns RefStep
	 *     RefStep returns RefStep
	 *
	 * Constraint:
	 *     (step=[Action|ID] idx=INT?)
	 */
	protected void sequence_RefStep(ISerializationContext context, RefStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RespondedExistence returns RespondedExistence
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+)
	 */
	protected void sequence_RespondedExistence(ISerializationContext context, RespondedExistence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Response returns Response
	 *
	 * Constraint:
	 *     (
	 *         eitherA?='either'? 
	 *         refA+=Ref+ 
	 *         eitherB?='either'? 
	 *         refB+=Ref+ 
	 *         not?='not'? 
	 *         (minVal=INT maxVal=INT?)?
	 *     )
	 */
	protected void sequence_Response(ISerializationContext context, Response semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceDef returns SequenceDef
	 *
	 * Constraint:
	 *     (name=ID actList+=ParamAct+)
	 */
	protected void sequence_SequenceDef(ISerializationContext context, SequenceDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleChoice returns SimpleChoice
	 *
	 * Constraint:
	 *     refA+=Ref+
	 */
	protected void sequence_SimpleChoice(ISerializationContext context, SimpleChoice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Succession returns Succession
	 *
	 * Constraint:
	 *     (eitherA?='either'? refA+=Ref+ eitherB?='either'? refB+=Ref+ (minVal=INT maxVal=INT?)?)
	 */
	protected void sequence_Succession(ISerializationContext context, Succession semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Templates returns Templates
	 *
	 * Constraint:
	 *     (name=ID (type+=Dependencies | type+=Past | type+=Future | type+=Choice | type+=Existential)+ features+=[Feature|ID]*)
	 */
	protected void sequence_Templates(ISerializationContext context, Templates semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
