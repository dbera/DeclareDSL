/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.scl.impl;

import java.util.Collection;

import nl.esi.comma.behavior.scl.scl.AlternateSuccession;
import nl.esi.comma.behavior.scl.scl.Ref;
import nl.esi.comma.behavior.scl.scl.SclPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alternate Succession</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#isEitherA <em>Either A</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#getRefA <em>Ref A</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#isEitherB <em>Either B</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#getRefB <em>Ref B</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#isEitherC <em>Either C</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.AlternateSuccessionImpl#getRefC <em>Ref C</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AlternateSuccessionImpl extends MinimalEObjectImpl.Container implements AlternateSuccession
{
  /**
   * The default value of the '{@link #isEitherA() <em>Either A</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherA()
   * @generated
   * @ordered
   */
  protected static final boolean EITHER_A_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEitherA() <em>Either A</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherA()
   * @generated
   * @ordered
   */
  protected boolean eitherA = EITHER_A_EDEFAULT;

  /**
   * The cached value of the '{@link #getRefA() <em>Ref A</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefA()
   * @generated
   * @ordered
   */
  protected EList<Ref> refA;

  /**
   * The default value of the '{@link #isEitherB() <em>Either B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherB()
   * @generated
   * @ordered
   */
  protected static final boolean EITHER_B_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEitherB() <em>Either B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherB()
   * @generated
   * @ordered
   */
  protected boolean eitherB = EITHER_B_EDEFAULT;

  /**
   * The cached value of the '{@link #getRefB() <em>Ref B</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefB()
   * @generated
   * @ordered
   */
  protected EList<Ref> refB;

  /**
   * The default value of the '{@link #isEitherC() <em>Either C</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherC()
   * @generated
   * @ordered
   */
  protected static final boolean EITHER_C_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEitherC() <em>Either C</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEitherC()
   * @generated
   * @ordered
   */
  protected boolean eitherC = EITHER_C_EDEFAULT;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getRefC() <em>Ref C</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefC()
   * @generated
   * @ordered
   */
  protected EList<Ref> refC;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AlternateSuccessionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SclPackage.Literals.ALTERNATE_SUCCESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEitherA()
  {
    return eitherA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEitherA(boolean newEitherA)
  {
    boolean oldEitherA = eitherA;
    eitherA = newEitherA;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.ALTERNATE_SUCCESSION__EITHER_A, oldEitherA, eitherA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Ref> getRefA()
  {
    if (refA == null)
    {
      refA = new EObjectContainmentEList<Ref>(Ref.class, this, SclPackage.ALTERNATE_SUCCESSION__REF_A);
    }
    return refA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEitherB()
  {
    return eitherB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEitherB(boolean newEitherB)
  {
    boolean oldEitherB = eitherB;
    eitherB = newEitherB;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.ALTERNATE_SUCCESSION__EITHER_B, oldEitherB, eitherB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Ref> getRefB()
  {
    if (refB == null)
    {
      refB = new EObjectContainmentEList<Ref>(Ref.class, this, SclPackage.ALTERNATE_SUCCESSION__REF_B);
    }
    return refB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEitherC()
  {
    return eitherC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEitherC(boolean newEitherC)
  {
    boolean oldEitherC = eitherC;
    eitherC = newEitherC;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.ALTERNATE_SUCCESSION__EITHER_C, oldEitherC, eitherC));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.ALTERNATE_SUCCESSION__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Ref> getRefC()
  {
    if (refC == null)
    {
      refC = new EObjectContainmentEList<Ref>(Ref.class, this, SclPackage.ALTERNATE_SUCCESSION__REF_C);
    }
    return refC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SclPackage.ALTERNATE_SUCCESSION__REF_A:
        return ((InternalEList<?>)getRefA()).basicRemove(otherEnd, msgs);
      case SclPackage.ALTERNATE_SUCCESSION__REF_B:
        return ((InternalEList<?>)getRefB()).basicRemove(otherEnd, msgs);
      case SclPackage.ALTERNATE_SUCCESSION__REF_C:
        return ((InternalEList<?>)getRefC()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_A:
        return isEitherA();
      case SclPackage.ALTERNATE_SUCCESSION__REF_A:
        return getRefA();
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_B:
        return isEitherB();
      case SclPackage.ALTERNATE_SUCCESSION__REF_B:
        return getRefB();
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_C:
        return isEitherC();
      case SclPackage.ALTERNATE_SUCCESSION__NEGATION:
        return isNegation();
      case SclPackage.ALTERNATE_SUCCESSION__REF_C:
        return getRefC();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_A:
        setEitherA((Boolean)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_A:
        getRefA().clear();
        getRefA().addAll((Collection<? extends Ref>)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_B:
        setEitherB((Boolean)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_B:
        getRefB().clear();
        getRefB().addAll((Collection<? extends Ref>)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_C:
        setEitherC((Boolean)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_C:
        getRefC().clear();
        getRefC().addAll((Collection<? extends Ref>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_A:
        setEitherA(EITHER_A_EDEFAULT);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_A:
        getRefA().clear();
        return;
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_B:
        setEitherB(EITHER_B_EDEFAULT);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_B:
        getRefB().clear();
        return;
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_C:
        setEitherC(EITHER_C_EDEFAULT);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case SclPackage.ALTERNATE_SUCCESSION__REF_C:
        getRefC().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_A:
        return eitherA != EITHER_A_EDEFAULT;
      case SclPackage.ALTERNATE_SUCCESSION__REF_A:
        return refA != null && !refA.isEmpty();
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_B:
        return eitherB != EITHER_B_EDEFAULT;
      case SclPackage.ALTERNATE_SUCCESSION__REF_B:
        return refB != null && !refB.isEmpty();
      case SclPackage.ALTERNATE_SUCCESSION__EITHER_C:
        return eitherC != EITHER_C_EDEFAULT;
      case SclPackage.ALTERNATE_SUCCESSION__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case SclPackage.ALTERNATE_SUCCESSION__REF_C:
        return refC != null && !refC.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eitherA: ");
    result.append(eitherA);
    result.append(", eitherB: ");
    result.append(eitherB);
    result.append(", eitherC: ");
    result.append(eitherC);
    result.append(", negation: ");
    result.append(negation);
    result.append(')');
    return result.toString();
  }

} //AlternateSuccessionImpl
