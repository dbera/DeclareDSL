/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.scl.impl;

import java.util.Collection;

import nl.esi.comma.behavior.scl.scl.Composition;
import nl.esi.comma.behavior.scl.scl.Feature;
import nl.esi.comma.behavior.scl.scl.SclPackage;
import nl.esi.comma.behavior.scl.scl.Templates;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Composition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.CompositionImpl#getName <em>Name</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.CompositionImpl#getTemplates <em>Templates</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.CompositionImpl#getDescTxt <em>Desc Txt</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.CompositionImpl#getCommonFeatures <em>Common Features</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.CompositionImpl#getTagStr <em>Tag Str</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompositionImpl extends MinimalEObjectImpl.Container implements Composition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTemplates() <em>Templates</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplates()
   * @generated
   * @ordered
   */
  protected EList<Templates> templates;

  /**
   * The default value of the '{@link #getDescTxt() <em>Desc Txt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescTxt()
   * @generated
   * @ordered
   */
  protected static final String DESC_TXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescTxt() <em>Desc Txt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescTxt()
   * @generated
   * @ordered
   */
  protected String descTxt = DESC_TXT_EDEFAULT;

  /**
   * The cached value of the '{@link #getCommonFeatures() <em>Common Features</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommonFeatures()
   * @generated
   * @ordered
   */
  protected EList<Feature> commonFeatures;

  /**
   * The cached value of the '{@link #getTagStr() <em>Tag Str</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTagStr()
   * @generated
   * @ordered
   */
  protected EList<String> tagStr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SclPackage.Literals.COMPOSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.COMPOSITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Templates> getTemplates()
  {
    if (templates == null)
    {
      templates = new EObjectResolvingEList<Templates>(Templates.class, this, SclPackage.COMPOSITION__TEMPLATES);
    }
    return templates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescTxt()
  {
    return descTxt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescTxt(String newDescTxt)
  {
    String oldDescTxt = descTxt;
    descTxt = newDescTxt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.COMPOSITION__DESC_TXT, oldDescTxt, descTxt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Feature> getCommonFeatures()
  {
    if (commonFeatures == null)
    {
      commonFeatures = new EObjectResolvingEList<Feature>(Feature.class, this, SclPackage.COMPOSITION__COMMON_FEATURES);
    }
    return commonFeatures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getTagStr()
  {
    if (tagStr == null)
    {
      tagStr = new EDataTypeEList<String>(String.class, this, SclPackage.COMPOSITION__TAG_STR);
    }
    return tagStr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SclPackage.COMPOSITION__NAME:
        return getName();
      case SclPackage.COMPOSITION__TEMPLATES:
        return getTemplates();
      case SclPackage.COMPOSITION__DESC_TXT:
        return getDescTxt();
      case SclPackage.COMPOSITION__COMMON_FEATURES:
        return getCommonFeatures();
      case SclPackage.COMPOSITION__TAG_STR:
        return getTagStr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SclPackage.COMPOSITION__NAME:
        setName((String)newValue);
        return;
      case SclPackage.COMPOSITION__TEMPLATES:
        getTemplates().clear();
        getTemplates().addAll((Collection<? extends Templates>)newValue);
        return;
      case SclPackage.COMPOSITION__DESC_TXT:
        setDescTxt((String)newValue);
        return;
      case SclPackage.COMPOSITION__COMMON_FEATURES:
        getCommonFeatures().clear();
        getCommonFeatures().addAll((Collection<? extends Feature>)newValue);
        return;
      case SclPackage.COMPOSITION__TAG_STR:
        getTagStr().clear();
        getTagStr().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.COMPOSITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SclPackage.COMPOSITION__TEMPLATES:
        getTemplates().clear();
        return;
      case SclPackage.COMPOSITION__DESC_TXT:
        setDescTxt(DESC_TXT_EDEFAULT);
        return;
      case SclPackage.COMPOSITION__COMMON_FEATURES:
        getCommonFeatures().clear();
        return;
      case SclPackage.COMPOSITION__TAG_STR:
        getTagStr().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.COMPOSITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SclPackage.COMPOSITION__TEMPLATES:
        return templates != null && !templates.isEmpty();
      case SclPackage.COMPOSITION__DESC_TXT:
        return DESC_TXT_EDEFAULT == null ? descTxt != null : !DESC_TXT_EDEFAULT.equals(descTxt);
      case SclPackage.COMPOSITION__COMMON_FEATURES:
        return commonFeatures != null && !commonFeatures.isEmpty();
      case SclPackage.COMPOSITION__TAG_STR:
        return tagStr != null && !tagStr.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", descTxt: ");
    result.append(descTxt);
    result.append(", tagStr: ");
    result.append(tagStr);
    result.append(')');
    return result.toString();
  }

} //CompositionImpl
