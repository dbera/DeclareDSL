/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.scl.impl;

import java.util.Collection;

import nl.esi.comma.behavior.scl.scl.Actions;
import nl.esi.comma.behavior.scl.scl.Composition;
import nl.esi.comma.behavior.scl.scl.Feature;
import nl.esi.comma.behavior.scl.scl.Features;
import nl.esi.comma.behavior.scl.scl.Model;
import nl.esi.comma.behavior.scl.scl.SclPackage;
import nl.esi.comma.behavior.scl.scl.SequenceDef;
import nl.esi.comma.behavior.scl.scl.Templates;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getFeatures <em>Features</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getSequences <em>Sequences</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getComposition <em>Composition</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getCommonFeatures <em>Common Features</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#getTemplates <em>Templates</em>}</li>
 *   <li>{@link nl.esi.comma.behavior.scl.scl.impl.ModelImpl#isUseLabels <em>Use Labels</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getFeatures() <em>Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatures()
   * @generated
   * @ordered
   */
  protected EList<Features> features;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<Actions> actions;

  /**
   * The cached value of the '{@link #getSequences() <em>Sequences</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequences()
   * @generated
   * @ordered
   */
  protected EList<SequenceDef> sequences;

  /**
   * The cached value of the '{@link #getComposition() <em>Composition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComposition()
   * @generated
   * @ordered
   */
  protected EList<Composition> composition;

  /**
   * The cached value of the '{@link #getCommonFeatures() <em>Common Features</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommonFeatures()
   * @generated
   * @ordered
   */
  protected EList<Feature> commonFeatures;

  /**
   * The cached value of the '{@link #getTemplates() <em>Templates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplates()
   * @generated
   * @ordered
   */
  protected EList<Templates> templates;

  /**
   * The default value of the '{@link #isUseLabels() <em>Use Labels</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseLabels()
   * @generated
   * @ordered
   */
  protected static final boolean USE_LABELS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUseLabels() <em>Use Labels</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseLabels()
   * @generated
   * @ordered
   */
  protected boolean useLabels = USE_LABELS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SclPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Features> getFeatures()
  {
    if (features == null)
    {
      features = new EObjectContainmentEList<Features>(Features.class, this, SclPackage.MODEL__FEATURES);
    }
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Actions> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<Actions>(Actions.class, this, SclPackage.MODEL__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SequenceDef> getSequences()
  {
    if (sequences == null)
    {
      sequences = new EObjectContainmentEList<SequenceDef>(SequenceDef.class, this, SclPackage.MODEL__SEQUENCES);
    }
    return sequences;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Composition> getComposition()
  {
    if (composition == null)
    {
      composition = new EObjectContainmentEList<Composition>(Composition.class, this, SclPackage.MODEL__COMPOSITION);
    }
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Feature> getCommonFeatures()
  {
    if (commonFeatures == null)
    {
      commonFeatures = new EObjectResolvingEList<Feature>(Feature.class, this, SclPackage.MODEL__COMMON_FEATURES);
    }
    return commonFeatures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Templates> getTemplates()
  {
    if (templates == null)
    {
      templates = new EObjectContainmentEList<Templates>(Templates.class, this, SclPackage.MODEL__TEMPLATES);
    }
    return templates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUseLabels()
  {
    return useLabels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUseLabels(boolean newUseLabels)
  {
    boolean oldUseLabels = useLabels;
    useLabels = newUseLabels;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SclPackage.MODEL__USE_LABELS, oldUseLabels, useLabels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SclPackage.MODEL__FEATURES:
        return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd, msgs);
      case SclPackage.MODEL__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
      case SclPackage.MODEL__SEQUENCES:
        return ((InternalEList<?>)getSequences()).basicRemove(otherEnd, msgs);
      case SclPackage.MODEL__COMPOSITION:
        return ((InternalEList<?>)getComposition()).basicRemove(otherEnd, msgs);
      case SclPackage.MODEL__TEMPLATES:
        return ((InternalEList<?>)getTemplates()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SclPackage.MODEL__FEATURES:
        return getFeatures();
      case SclPackage.MODEL__ACTIONS:
        return getActions();
      case SclPackage.MODEL__SEQUENCES:
        return getSequences();
      case SclPackage.MODEL__COMPOSITION:
        return getComposition();
      case SclPackage.MODEL__COMMON_FEATURES:
        return getCommonFeatures();
      case SclPackage.MODEL__TEMPLATES:
        return getTemplates();
      case SclPackage.MODEL__USE_LABELS:
        return isUseLabels();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SclPackage.MODEL__FEATURES:
        getFeatures().clear();
        getFeatures().addAll((Collection<? extends Features>)newValue);
        return;
      case SclPackage.MODEL__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends Actions>)newValue);
        return;
      case SclPackage.MODEL__SEQUENCES:
        getSequences().clear();
        getSequences().addAll((Collection<? extends SequenceDef>)newValue);
        return;
      case SclPackage.MODEL__COMPOSITION:
        getComposition().clear();
        getComposition().addAll((Collection<? extends Composition>)newValue);
        return;
      case SclPackage.MODEL__COMMON_FEATURES:
        getCommonFeatures().clear();
        getCommonFeatures().addAll((Collection<? extends Feature>)newValue);
        return;
      case SclPackage.MODEL__TEMPLATES:
        getTemplates().clear();
        getTemplates().addAll((Collection<? extends Templates>)newValue);
        return;
      case SclPackage.MODEL__USE_LABELS:
        setUseLabels((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.MODEL__FEATURES:
        getFeatures().clear();
        return;
      case SclPackage.MODEL__ACTIONS:
        getActions().clear();
        return;
      case SclPackage.MODEL__SEQUENCES:
        getSequences().clear();
        return;
      case SclPackage.MODEL__COMPOSITION:
        getComposition().clear();
        return;
      case SclPackage.MODEL__COMMON_FEATURES:
        getCommonFeatures().clear();
        return;
      case SclPackage.MODEL__TEMPLATES:
        getTemplates().clear();
        return;
      case SclPackage.MODEL__USE_LABELS:
        setUseLabels(USE_LABELS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SclPackage.MODEL__FEATURES:
        return features != null && !features.isEmpty();
      case SclPackage.MODEL__ACTIONS:
        return actions != null && !actions.isEmpty();
      case SclPackage.MODEL__SEQUENCES:
        return sequences != null && !sequences.isEmpty();
      case SclPackage.MODEL__COMPOSITION:
        return composition != null && !composition.isEmpty();
      case SclPackage.MODEL__COMMON_FEATURES:
        return commonFeatures != null && !commonFeatures.isEmpty();
      case SclPackage.MODEL__TEMPLATES:
        return templates != null && !templates.isEmpty();
      case SclPackage.MODEL__USE_LABELS:
        return useLabels != USE_LABELS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (useLabels: ");
    result.append(useLabels);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
