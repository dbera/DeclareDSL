/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.scl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Action Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see nl.esi.comma.behavior.scl.scl.SclPackage#getActionType()
 * @model
 * @generated
 */
public enum ActionType implements Enumerator
{
  /**
   * The '<em><b>Observable</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OBSERVABLE_VALUE
   * @generated
   * @ordered
   */
  OBSERVABLE(0, "Observable", "Observable"),

  /**
   * The '<em><b>Trigger</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRIGGER_VALUE
   * @generated
   * @ordered
   */
  TRIGGER(1, "Trigger", "Trigger"),

  /**
   * The '<em><b>Pre Condition</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PRE_CONDITION_VALUE
   * @generated
   * @ordered
   */
  PRE_CONDITION(2, "PreCondition", "Pre-condition"),

  /**
   * The '<em><b>Conjunction</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CONJUNCTION_VALUE
   * @generated
   * @ordered
   */
  CONJUNCTION(3, "Conjunction", "And");

  /**
   * The '<em><b>Observable</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OBSERVABLE
   * @model name="Observable"
   * @generated
   * @ordered
   */
  public static final int OBSERVABLE_VALUE = 0;

  /**
   * The '<em><b>Trigger</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRIGGER
   * @model name="Trigger"
   * @generated
   * @ordered
   */
  public static final int TRIGGER_VALUE = 1;

  /**
   * The '<em><b>Pre Condition</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PRE_CONDITION
   * @model name="PreCondition" literal="Pre-condition"
   * @generated
   * @ordered
   */
  public static final int PRE_CONDITION_VALUE = 2;

  /**
   * The '<em><b>Conjunction</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CONJUNCTION
   * @model name="Conjunction" literal="And"
   * @generated
   * @ordered
   */
  public static final int CONJUNCTION_VALUE = 3;

  /**
   * An array of all the '<em><b>Action Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ActionType[] VALUES_ARRAY =
    new ActionType[]
    {
      OBSERVABLE,
      TRIGGER,
      PRE_CONDITION,
      CONJUNCTION,
    };

  /**
   * A public read-only list of all the '<em><b>Action Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ActionType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Action Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ActionType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ActionType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Action Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ActionType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ActionType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Action Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ActionType get(int value)
  {
    switch (value)
    {
      case OBSERVABLE_VALUE: return OBSERVABLE;
      case TRIGGER_VALUE: return TRIGGER;
      case PRE_CONDITION_VALUE: return PRE_CONDITION;
      case CONJUNCTION_VALUE: return CONJUNCTION;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ActionType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ActionType
