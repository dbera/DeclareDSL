/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.behavior.scl.scl.impl;

import nl.esi.comma.behavior.scl.scl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SclFactoryImpl extends EFactoryImpl implements SclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SclFactory init()
  {
    try
    {
      SclFactory theSclFactory = (SclFactory)EPackage.Registry.INSTANCE.getEFactory(SclPackage.eNS_URI);
      if (theSclFactory != null)
      {
        return theSclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SclPackage.MODEL: return createModel();
      case SclPackage.COMPOSITION: return createComposition();
      case SclPackage.SEQUENCE_DEF: return createSequenceDef();
      case SclPackage.PARAM_ACT: return createParamAct();
      case SclPackage.REF: return createRef();
      case SclPackage.REF_STEP: return createRefStep();
      case SclPackage.REF_SEQUENCE: return createRefSequence();
      case SclPackage.FEATURES: return createFeatures();
      case SclPackage.FEATURE: return createFeature();
      case SclPackage.ACTIONS: return createActions();
      case SclPackage.ACTION_PARAM: return createActionParam();
      case SclPackage.ACTION: return createAction();
      case SclPackage.TEMPLATES: return createTemplates();
      case SclPackage.PAST: return createPast();
      case SclPackage.FUTURE: return createFuture();
      case SclPackage.DEPENDENCIES: return createDependencies();
      case SclPackage.CHOICE: return createChoice();
      case SclPackage.EXISTENTIAL: return createExistential();
      case SclPackage.EXCLUSIVE_CHOICE: return createExclusiveChoice();
      case SclPackage.SIMPLE_CHOICE: return createSimpleChoice();
      case SclPackage.NOT_CHAIN_SUCCESSION: return createNotChainSuccession();
      case SclPackage.NOT_CO_EXISTANCE: return createNotCoExistance();
      case SclPackage.NOT_SUCCESSION: return createNotSuccession();
      case SclPackage.CHAIN_SUCCESSION: return createChainSuccession();
      case SclPackage.ALTERNATE_SUCCESSION: return createAlternateSuccession();
      case SclPackage.SUCCESSION: return createSuccession();
      case SclPackage.CO_EXISTANCE: return createCoExistance();
      case SclPackage.RESPONDED_EXISTENCE: return createRespondedExistence();
      case SclPackage.CHAIN_PRECEDENCE: return createChainPrecedence();
      case SclPackage.CHAIN_RESPONSE: return createChainResponse();
      case SclPackage.ALTERNATE_RESPONSE: return createAlternateResponse();
      case SclPackage.ALTERNATE_PRECEDENCE: return createAlternatePrecedence();
      case SclPackage.RESPONSE: return createResponse();
      case SclPackage.PRECEDENCE: return createPrecedence();
      case SclPackage.END: return createEnd();
      case SclPackage.INIT: return createInit();
      case SclPackage.AT_MOST: return createAtMost();
      case SclPackage.EXACT: return createExact();
      case SclPackage.AT_LEAST: return createAtLeast();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SclPackage.ACTION_TYPE:
        return createActionTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SclPackage.ACTION_TYPE:
        return convertActionTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceDef createSequenceDef()
  {
    SequenceDefImpl sequenceDef = new SequenceDefImpl();
    return sequenceDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamAct createParamAct()
  {
    ParamActImpl paramAct = new ParamActImpl();
    return paramAct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ref createRef()
  {
    RefImpl ref = new RefImpl();
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefStep createRefStep()
  {
    RefStepImpl refStep = new RefStepImpl();
    return refStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefSequence createRefSequence()
  {
    RefSequenceImpl refSequence = new RefSequenceImpl();
    return refSequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Features createFeatures()
  {
    FeaturesImpl features = new FeaturesImpl();
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actions createActions()
  {
    ActionsImpl actions = new ActionsImpl();
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionParam createActionParam()
  {
    ActionParamImpl actionParam = new ActionParamImpl();
    return actionParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Templates createTemplates()
  {
    TemplatesImpl templates = new TemplatesImpl();
    return templates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Past createPast()
  {
    PastImpl past = new PastImpl();
    return past;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Future createFuture()
  {
    FutureImpl future = new FutureImpl();
    return future;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependencies createDependencies()
  {
    DependenciesImpl dependencies = new DependenciesImpl();
    return dependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Choice createChoice()
  {
    ChoiceImpl choice = new ChoiceImpl();
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Existential createExistential()
  {
    ExistentialImpl existential = new ExistentialImpl();
    return existential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExclusiveChoice createExclusiveChoice()
  {
    ExclusiveChoiceImpl exclusiveChoice = new ExclusiveChoiceImpl();
    return exclusiveChoice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleChoice createSimpleChoice()
  {
    SimpleChoiceImpl simpleChoice = new SimpleChoiceImpl();
    return simpleChoice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotChainSuccession createNotChainSuccession()
  {
    NotChainSuccessionImpl notChainSuccession = new NotChainSuccessionImpl();
    return notChainSuccession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotCoExistance createNotCoExistance()
  {
    NotCoExistanceImpl notCoExistance = new NotCoExistanceImpl();
    return notCoExistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotSuccession createNotSuccession()
  {
    NotSuccessionImpl notSuccession = new NotSuccessionImpl();
    return notSuccession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChainSuccession createChainSuccession()
  {
    ChainSuccessionImpl chainSuccession = new ChainSuccessionImpl();
    return chainSuccession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlternateSuccession createAlternateSuccession()
  {
    AlternateSuccessionImpl alternateSuccession = new AlternateSuccessionImpl();
    return alternateSuccession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Succession createSuccession()
  {
    SuccessionImpl succession = new SuccessionImpl();
    return succession;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CoExistance createCoExistance()
  {
    CoExistanceImpl coExistance = new CoExistanceImpl();
    return coExistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RespondedExistence createRespondedExistence()
  {
    RespondedExistenceImpl respondedExistence = new RespondedExistenceImpl();
    return respondedExistence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChainPrecedence createChainPrecedence()
  {
    ChainPrecedenceImpl chainPrecedence = new ChainPrecedenceImpl();
    return chainPrecedence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChainResponse createChainResponse()
  {
    ChainResponseImpl chainResponse = new ChainResponseImpl();
    return chainResponse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlternateResponse createAlternateResponse()
  {
    AlternateResponseImpl alternateResponse = new AlternateResponseImpl();
    return alternateResponse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlternatePrecedence createAlternatePrecedence()
  {
    AlternatePrecedenceImpl alternatePrecedence = new AlternatePrecedenceImpl();
    return alternatePrecedence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Response createResponse()
  {
    ResponseImpl response = new ResponseImpl();
    return response;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precedence createPrecedence()
  {
    PrecedenceImpl precedence = new PrecedenceImpl();
    return precedence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public End createEnd()
  {
    EndImpl end = new EndImpl();
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Init createInit()
  {
    InitImpl init = new InitImpl();
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtMost createAtMost()
  {
    AtMostImpl atMost = new AtMostImpl();
    return atMost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exact createExact()
  {
    ExactImpl exact = new ExactImpl();
    return exact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtLeast createAtLeast()
  {
    AtLeastImpl atLeast = new AtLeastImpl();
    return atLeast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionType createActionTypeFromString(EDataType eDataType, String initialValue)
  {
    ActionType result = ActionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SclPackage getSclPackage()
  {
    return (SclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SclPackage getPackage()
  {
    return SclPackage.eINSTANCE;
  }

} //SclFactoryImpl
