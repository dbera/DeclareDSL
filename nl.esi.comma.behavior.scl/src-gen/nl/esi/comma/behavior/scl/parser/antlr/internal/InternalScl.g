/*
 * generated by Xtext 2.25.0
 */
grammar InternalScl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.esi.comma.behavior.scl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.esi.comma.behavior.scl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.esi.comma.behavior.scl.services.SclGrammarAccess;

}

@parser::members {

 	private SclGrammarAccess grammarAccess;

    public InternalSclParser(TokenStream input, SclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFeaturesFeaturesParserRuleCall_0_0());
				}
				lv_features_0_0=ruleFeatures
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"features",
						lv_features_0_0,
						"nl.esi.comma.behavior.scl.Scl.Features");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getActionsActionsParserRuleCall_1_0());
				}
				lv_actions_1_0=ruleActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"actions",
						lv_actions_1_0,
						"nl.esi.comma.behavior.scl.Scl.Actions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSequencesSequenceDefParserRuleCall_2_0());
				}
				lv_sequences_2_0=ruleSequenceDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"sequences",
						lv_sequences_2_0,
						"nl.esi.comma.behavior.scl.Scl.SequenceDef");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='Requirements'
		{
			newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRequirementsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCompositionCompositionParserRuleCall_4_0());
				}
				lv_composition_4_0=ruleComposition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"composition",
						lv_composition_4_0,
						"nl.esi.comma.behavior.scl.Scl.Composition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='for-configurations'
			{
				newLeafNode(otherlv_5, grammarAccess.getModelAccess().getForConfigurationsKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getModelAccess().getCommonFeaturesFeatureCrossReference_5_1_0());
					}
				)
			)+
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTemplatesTemplatesParserRuleCall_6_0());
				}
				lv_templates_7_0=ruleTemplates
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"templates",
						lv_templates_7_0,
						"nl.esi.comma.behavior.scl.Scl.Templates");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_useLabels_8_0='use-provided-labels'
				{
					newLeafNode(lv_useLabels_8_0, grammarAccess.getModelAccess().getUseLabelsUseProvidedLabelsKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed($current, "useLabels", lv_useLabels_8_0 != null, "use-provided-labels");
				}
			)
		)?
	)
;

// Entry rule entryRuleComposition
entryRuleComposition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositionRule()); }
	iv_ruleComposition=ruleComposition
	{ $current=$iv_ruleComposition.current; }
	EOF;

// Rule Composition
ruleComposition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraint'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompositionAccess().getConstraintKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='is-composed-of'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompositionAccess().getIsComposedOfKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getCompositionAccess().getTemplatesTemplatesCrossReference_4_0());
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCompositionAccess().getRightCurlyBracketKeyword_5());
		}
		(
			otherlv_6='description'
			{
				newLeafNode(otherlv_6, grammarAccess.getCompositionAccess().getDescriptionKeyword_6_0());
			}
			(
				(
					lv_descTxt_7_0=RULE_STRING
					{
						newLeafNode(lv_descTxt_7_0, grammarAccess.getCompositionAccess().getDescTxtSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompositionRule());
						}
						setWithLastConsumed(
							$current,
							"descTxt",
							lv_descTxt_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_8='for-configurations'
			{
				newLeafNode(otherlv_8, grammarAccess.getCompositionAccess().getForConfigurationsKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompositionRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getCompositionAccess().getCommonFeaturesFeatureCrossReference_7_1_0());
					}
				)
			)+
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getCompositionAccess().getSemicolonKeyword_7_2());
			}
		)?
		(
			otherlv_11='requirement-tags'
			{
				newLeafNode(otherlv_11, grammarAccess.getCompositionAccess().getRequirementTagsKeyword_8_0());
			}
			(
				(
					lv_tagStr_12_0=RULE_STRING
					{
						newLeafNode(lv_tagStr_12_0, grammarAccess.getCompositionAccess().getTagStrSTRINGTerminalRuleCall_8_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompositionRule());
						}
						addWithLastConsumed(
							$current,
							"tagStr",
							lv_tagStr_12_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)*
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getCompositionAccess().getSemicolonKeyword_8_2());
			}
		)?
	)
;

// Entry rule entryRuleSequenceDef
entryRuleSequenceDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceDefRule()); }
	iv_ruleSequenceDef=ruleSequenceDef
	{ $current=$iv_ruleSequenceDef.current; }
	EOF;

// Rule SequenceDef
ruleSequenceDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sequence-Def'
		{
			newLeafNode(otherlv_0, grammarAccess.getSequenceDefAccess().getSequenceDefKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSequenceDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSequenceDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSequenceDefAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceDefAccess().getActListParamActParserRuleCall_3_0());
				}
				lv_actList_3_0=ruleParamAct
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceDefRule());
					}
					add(
						$current,
						"actList",
						lv_actList_3_0,
						"nl.esi.comma.behavior.scl.Scl.ParamAct");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSequenceDefAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleParamAct
entryRuleParamAct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamActRule()); }
	iv_ruleParamAct=ruleParamAct
	{ $current=$iv_ruleParamAct.current; }
	EOF;

// Rule ParamAct
ruleParamAct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamActRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getParamActAccess().getActActionCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getParamActAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_idx_2_0=RULE_INT
					{
						newLeafNode(lv_idx_2_0, grammarAccess.getParamActAccess().getIdxINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamActRule());
						}
						setWithLastConsumed(
							$current,
							"idx",
							lv_idx_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getParamActAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefRule()); }
	iv_ruleRef=ruleRef
	{ $current=$iv_ruleRef.current; }
	EOF;

// Rule Ref
ruleRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRefAccess().getRefSequenceParserRuleCall_0());
		}
		this_RefSequence_0=ruleRefSequence
		{
			$current = $this_RefSequence_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRefAccess().getRefStepParserRuleCall_1());
		}
		this_RefStep_1=ruleRefStep
		{
			$current = $this_RefStep_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRefStep
entryRuleRefStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefStepRule()); }
	iv_ruleRefStep=ruleRefStep
	{ $current=$iv_ruleRefStep.current; }
	EOF;

// Rule RefStep
ruleRefStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='act'
		{
			newLeafNode(otherlv_0, grammarAccess.getRefStepAccess().getActKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRefStepRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRefStepAccess().getStepActionCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getRefStepAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					lv_idx_3_0=RULE_INT
					{
						newLeafNode(lv_idx_3_0, grammarAccess.getRefStepAccess().getIdxINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRefStepRule());
						}
						setWithLastConsumed(
							$current,
							"idx",
							lv_idx_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getRefStepAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleRefSequence
entryRuleRefSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefSequenceRule()); }
	iv_ruleRefSequence=ruleRefSequence
	{ $current=$iv_ruleRefSequence.current; }
	EOF;

// Rule RefSequence
ruleRefSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='seq'
		{
			newLeafNode(otherlv_0, grammarAccess.getRefSequenceAccess().getSeqKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRefSequenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRefSequenceAccess().getSeqSequenceDefCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFeatures
entryRuleFeatures returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeaturesRule()); }
	iv_ruleFeatures=ruleFeatures
	{ $current=$iv_ruleFeatures.current; }
	EOF;

// Rule Features
ruleFeatures returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='feature-list:'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeaturesAccess().getFeatureListKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeaturesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeaturesAccess().getFeatureFeatureParserRuleCall_2_0());
				}
				lv_feature_2_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeaturesRule());
					}
					add(
						$current,
						"feature",
						lv_feature_2_0,
						"nl.esi.comma.behavior.scl.Scl.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeaturesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFeatureRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleActions
entryRuleActions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionsRule()); }
	iv_ruleActions=ruleActions
	{ $current=$iv_ruleActions.current; }
	EOF;

// Rule Actions
ruleActions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='action-list:'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionsAccess().getActionListKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getActionsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionsAccess().getActActionParserRuleCall_2_0());
				}
				lv_act_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionsRule());
					}
					add(
						$current,
						"act",
						lv_act_2_0,
						"nl.esi.comma.behavior.scl.Scl.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getActionsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleActionParam
entryRuleActionParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionParamRule()); }
	iv_ruleActionParam=ruleActionParam
	{ $current=$iv_ruleActionParam.current; }
	EOF;

// Rule ActionParam
ruleActionParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionParamAccess().getWithKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getActionParamAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionParamAccess().getParametersExpressionParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionParamRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getActionParamAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionParamAccess().getParametersExpressionParserRuleCall_3_1_0());
					}
					lv_parameters_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionParamRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"nl.esi.comma.expressions.Expressions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getActionParamAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getActActionTypeEnumRuleCall_0_0());
				}
				lv_act_0_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"act",
						lv_act_0_0,
						"nl.esi.comma.behavior.scl.Scl.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_label_2_0=RULE_STRING
				{
					newLeafNode(lv_label_2_0, grammarAccess.getActionAccess().getLabelSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getActParamActionParamParserRuleCall_3_0());
				}
				lv_actParam_3_0=ruleActionParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"actParam",
						lv_actParam_3_0,
						"nl.esi.comma.behavior.scl.Scl.ActionParam");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTemplates
entryRuleTemplates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplatesRule()); }
	iv_ruleTemplates=ruleTemplates
	{ $current=$iv_ruleTemplates.current; }
	EOF;

// Rule Templates
ruleTemplates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTemplatesAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemplatesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTemplatesAccess().getTypeDependenciesParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleDependencies
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplatesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.Dependencies");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTemplatesAccess().getTypePastParserRuleCall_1_0_1());
					}
					lv_type_1_2=rulePast
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplatesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.Past");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTemplatesAccess().getTypeFutureParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleFuture
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplatesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_3,
							"nl.esi.comma.behavior.scl.Scl.Future");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTemplatesAccess().getTypeChoiceParserRuleCall_1_0_3());
					}
					lv_type_1_4=ruleChoice
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplatesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_4,
							"nl.esi.comma.behavior.scl.Scl.Choice");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTemplatesAccess().getTypeExistentialParserRuleCall_1_0_4());
					}
					lv_type_1_5=ruleExistential
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplatesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_5,
							"nl.esi.comma.behavior.scl.Scl.Existential");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		(
			otherlv_2='for-configurations'
			{
				newLeafNode(otherlv_2, grammarAccess.getTemplatesAccess().getForConfigurationsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTemplatesRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getTemplatesAccess().getFeaturesFeatureCrossReference_2_1_0());
					}
				)
			)+
		)?
	)
;

// Entry rule entryRulePast
entryRulePast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPastRule()); }
	iv_rulePast=rulePast
	{ $current=$iv_rulePast.current; }
	EOF;

// Rule Past
rulePast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='P'
		{
			newLeafNode(otherlv_0, grammarAccess.getPastAccess().getPKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPastAccess().getTypePrecedenceParserRuleCall_1_0_0());
					}
					lv_type_1_1=rulePrecedence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.Precedence");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPastAccess().getTypeAlternatePrecedenceParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleAlternatePrecedence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.AlternatePrecedence");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPastAccess().getTypeChainPrecedenceParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleChainPrecedence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPastRule());
						}
						add(
							$current,
							"type",
							lv_type_1_3,
							"nl.esi.comma.behavior.scl.Scl.ChainPrecedence");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleFuture
entryRuleFuture returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFutureRule()); }
	iv_ruleFuture=ruleFuture
	{ $current=$iv_ruleFuture.current; }
	EOF;

// Rule Future
ruleFuture returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='F'
		{
			newLeafNode(otherlv_0, grammarAccess.getFutureAccess().getFKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFutureAccess().getTypeResponseParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleResponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.Response");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFutureAccess().getTypeAlternateResponseParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleAlternateResponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.AlternateResponse");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFutureAccess().getTypeChainResponseParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleChainResponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFutureRule());
						}
						add(
							$current,
							"type",
							lv_type_1_3,
							"nl.esi.comma.behavior.scl.Scl.ChainResponse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleDependencies
entryRuleDependencies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependenciesRule()); }
	iv_ruleDependencies=ruleDependencies
	{ $current=$iv_ruleDependencies.current; }
	EOF;

// Rule Dependencies
ruleDependencies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PF'
		{
			newLeafNode(otherlv_0, grammarAccess.getDependenciesAccess().getPFKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeSuccessionParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleSuccession
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.Succession");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeCoExistanceParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleCoExistance
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.CoExistance");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeAlternateSuccessionParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleAlternateSuccession
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_3,
							"nl.esi.comma.behavior.scl.Scl.AlternateSuccession");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeChainSuccessionParserRuleCall_1_0_3());
					}
					lv_type_1_4=ruleChainSuccession
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_4,
							"nl.esi.comma.behavior.scl.Scl.ChainSuccession");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeRespondedExistenceParserRuleCall_1_0_4());
					}
					lv_type_1_5=ruleRespondedExistence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_5,
							"nl.esi.comma.behavior.scl.Scl.RespondedExistence");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeNotSuccessionParserRuleCall_1_0_5());
					}
					lv_type_1_6=ruleNotSuccession
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_6,
							"nl.esi.comma.behavior.scl.Scl.NotSuccession");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeNotCoExistanceParserRuleCall_1_0_6());
					}
					lv_type_1_7=ruleNotCoExistance
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_7,
							"nl.esi.comma.behavior.scl.Scl.NotCoExistance");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependenciesAccess().getTypeNotChainSuccessionParserRuleCall_1_0_7());
					}
					lv_type_1_8=ruleNotChainSuccession
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenciesRule());
						}
						add(
							$current,
							"type",
							lv_type_1_8,
							"nl.esi.comma.behavior.scl.Scl.NotChainSuccession");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	iv_ruleChoice=ruleChoice
	{ $current=$iv_ruleChoice.current; }
	EOF;

// Rule Choice
ruleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='C'
		{
			newLeafNode(otherlv_0, grammarAccess.getChoiceAccess().getCKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getChoiceAccess().getTypeSimpleChoiceParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleSimpleChoice
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChoiceRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.SimpleChoice");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getChoiceAccess().getTypeExclusiveChoiceParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleExclusiveChoice
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChoiceRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.ExclusiveChoice");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleExistential
entryRuleExistential returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistentialRule()); }
	iv_ruleExistential=ruleExistential
	{ $current=$iv_ruleExistential.current; }
	EOF;

// Rule Existential
ruleExistential returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='E'
		{
			newLeafNode(otherlv_0, grammarAccess.getExistentialAccess().getEKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExistentialAccess().getTypeAtLeastParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleAtLeast
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExistentialRule());
						}
						add(
							$current,
							"type",
							lv_type_1_1,
							"nl.esi.comma.behavior.scl.Scl.AtLeast");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExistentialAccess().getTypeAtMostParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleAtMost
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExistentialRule());
						}
						add(
							$current,
							"type",
							lv_type_1_2,
							"nl.esi.comma.behavior.scl.Scl.AtMost");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExistentialAccess().getTypeInitParserRuleCall_1_0_2());
					}
					lv_type_1_3=ruleInit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExistentialRule());
						}
						add(
							$current,
							"type",
							lv_type_1_3,
							"nl.esi.comma.behavior.scl.Scl.Init");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExistentialAccess().getTypeEndParserRuleCall_1_0_3());
					}
					lv_type_1_4=ruleEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExistentialRule());
						}
						add(
							$current,
							"type",
							lv_type_1_4,
							"nl.esi.comma.behavior.scl.Scl.End");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExistentialAccess().getTypeExactParserRuleCall_1_0_4());
					}
					lv_type_1_5=ruleExact
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExistentialRule());
						}
						add(
							$current,
							"type",
							lv_type_1_5,
							"nl.esi.comma.behavior.scl.Scl.Exact");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleExclusiveChoice
entryRuleExclusiveChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveChoiceRule()); }
	iv_ruleExclusiveChoice=ruleExclusiveChoice
	{ $current=$iv_ruleExclusiveChoice.current; }
	EOF;

// Rule ExclusiveChoice
ruleExclusiveChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_eitherA_0_0='either'
				{
					newLeafNode(lv_eitherA_0_0, grammarAccess.getExclusiveChoiceAccess().getEitherAEitherKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusiveChoiceRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_0_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExclusiveChoiceAccess().getRefARefParserRuleCall_1_0());
				}
				lv_refA_1_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExclusiveChoiceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_1_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='or'
		{
			newLeafNode(otherlv_2, grammarAccess.getExclusiveChoiceAccess().getOrKeyword_2());
		}
		(
			(
				lv_eitherB_3_0='either'
				{
					newLeafNode(lv_eitherB_3_0, grammarAccess.getExclusiveChoiceAccess().getEitherBEitherKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusiveChoiceRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_3_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExclusiveChoiceAccess().getRefBRefParserRuleCall_4_0());
				}
				lv_refB_4_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExclusiveChoiceRule());
					}
					add(
						$current,
						"refB",
						lv_refB_4_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='eventually-occur-but-not-together'
		{
			newLeafNode(otherlv_5, grammarAccess.getExclusiveChoiceAccess().getEventuallyOccurButNotTogetherKeyword_5());
		}
	)
;

// Entry rule entryRuleSimpleChoice
entryRuleSimpleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleChoiceRule()); }
	iv_ruleSimpleChoice=ruleSimpleChoice
	{ $current=$iv_ruleSimpleChoice.current; }
	EOF;

// Rule SimpleChoice
ruleSimpleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleChoiceAccess().getRefARefParserRuleCall_0_0());
				}
				lv_refA_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleChoiceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='eventually-occur'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleChoiceAccess().getEventuallyOccurKeyword_1());
		}
	)
;

// Entry rule entryRuleNotChainSuccession
entryRuleNotChainSuccession returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotChainSuccessionRule()); }
	iv_ruleNotChainSuccession=ruleNotChainSuccession
	{ $current=$iv_ruleNotChainSuccession.current; }
	EOF;

// Rule NotChainSuccession
ruleNotChainSuccession returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!<>'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotChainSuccessionAccess().getExclamationMarkLessThanSignGreaterThanSignKeyword_0());
		}
		(
			(
				lv_eitherA_1_0='either'
				{
					newLeafNode(lv_eitherA_1_0, grammarAccess.getNotChainSuccessionAccess().getEitherAEitherKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotChainSuccessionRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_1_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNotChainSuccessionAccess().getRefARefParserRuleCall_2_0());
				}
				lv_refA_2_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotChainSuccessionRule());
					}
					add(
						$current,
						"refA",
						lv_refA_2_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_3='occurs'
			{
				newLeafNode(otherlv_3, grammarAccess.getNotChainSuccessionAccess().getOccursKeyword_3());
			}
		)?
		otherlv_4='if-and-only-if-not-followed-immediately-by'
		{
			newLeafNode(otherlv_4, grammarAccess.getNotChainSuccessionAccess().getIfAndOnlyIfNotFollowedImmediatelyByKeyword_4());
		}
		(
			(
				lv_eitherB_5_0='either'
				{
					newLeafNode(lv_eitherB_5_0, grammarAccess.getNotChainSuccessionAccess().getEitherBEitherKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotChainSuccessionRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_5_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNotChainSuccessionAccess().getRefBRefParserRuleCall_6_0());
				}
				lv_refB_6_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotChainSuccessionRule());
					}
					add(
						$current,
						"refB",
						lv_refB_6_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNotCoExistance
entryRuleNotCoExistance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotCoExistanceRule()); }
	iv_ruleNotCoExistance=ruleNotCoExistance
	{ $current=$iv_ruleNotCoExistance.current; }
	EOF;

// Rule NotCoExistance
ruleNotCoExistance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!-'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotCoExistanceAccess().getExclamationMarkHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotCoExistanceAccess().getRefARefParserRuleCall_1_0());
				}
				lv_refA_1_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotCoExistanceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_1_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='do-not-occur-together'
		{
			newLeafNode(otherlv_2, grammarAccess.getNotCoExistanceAccess().getDoNotOccurTogetherKeyword_2());
		}
	)
;

// Entry rule entryRuleNotSuccession
entryRuleNotSuccession returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotSuccessionRule()); }
	iv_ruleNotSuccession=ruleNotSuccession
	{ $current=$iv_ruleNotSuccession.current; }
	EOF;

// Rule NotSuccession
ruleNotSuccession returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!<-->'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotSuccessionAccess().getExclamationMarkLessThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				lv_eitherA_1_0='either'
				{
					newLeafNode(lv_eitherA_1_0, grammarAccess.getNotSuccessionAccess().getEitherAEitherKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotSuccessionRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_1_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNotSuccessionAccess().getRefARefParserRuleCall_2_0());
				}
				lv_refA_2_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotSuccessionRule());
					}
					add(
						$current,
						"refA",
						lv_refA_2_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_3='occurs'
			{
				newLeafNode(otherlv_3, grammarAccess.getNotSuccessionAccess().getOccursKeyword_3());
			}
		)?
		otherlv_4='if-and-only-if-not-followed-by'
		{
			newLeafNode(otherlv_4, grammarAccess.getNotSuccessionAccess().getIfAndOnlyIfNotFollowedByKeyword_4());
		}
		(
			(
				lv_eitherB_5_0='either'
				{
					newLeafNode(lv_eitherB_5_0, grammarAccess.getNotSuccessionAccess().getEitherBEitherKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotSuccessionRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_5_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNotSuccessionAccess().getRefBRefParserRuleCall_6_0());
				}
				lv_refB_6_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotSuccessionRule());
					}
					add(
						$current,
						"refB",
						lv_refB_6_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleChainSuccession
entryRuleChainSuccession returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChainSuccessionRule()); }
	iv_ruleChainSuccession=ruleChainSuccession
	{ $current=$iv_ruleChainSuccession.current; }
	EOF;

// Rule ChainSuccession
ruleChainSuccession returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<>'
		{
			newLeafNode(otherlv_0, grammarAccess.getChainSuccessionAccess().getLessThanSignGreaterThanSignKeyword_0());
		}
		(
			(
				lv_eitherA_1_0='either'
				{
					newLeafNode(lv_eitherA_1_0, grammarAccess.getChainSuccessionAccess().getEitherAEitherKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainSuccessionRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_1_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainSuccessionAccess().getRefARefParserRuleCall_2_0());
				}
				lv_refA_2_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainSuccessionRule());
					}
					add(
						$current,
						"refA",
						lv_refA_2_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='occurs-if-and-only-if-immediately-followed-by'
		{
			newLeafNode(otherlv_3, grammarAccess.getChainSuccessionAccess().getOccursIfAndOnlyIfImmediatelyFollowedByKeyword_3());
		}
		(
			(
				lv_eitherB_4_0='either'
				{
					newLeafNode(lv_eitherB_4_0, grammarAccess.getChainSuccessionAccess().getEitherBEitherKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainSuccessionRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_4_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainSuccessionAccess().getRefBRefParserRuleCall_5_0());
				}
				lv_refB_5_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainSuccessionRule());
					}
					add(
						$current,
						"refB",
						lv_refB_5_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_6='within'
			{
				newLeafNode(otherlv_6, grammarAccess.getChainSuccessionAccess().getWithinKeyword_6_0());
			}
			(
				(
					lv_minVal_7_0=RULE_INT
					{
						newLeafNode(lv_minVal_7_0, grammarAccess.getChainSuccessionAccess().getMinValINTTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChainSuccessionRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_8='-'
				{
					newLeafNode(otherlv_8, grammarAccess.getChainSuccessionAccess().getHyphenMinusKeyword_6_2_0());
				}
				(
					(
						lv_maxVal_9_0=RULE_INT
						{
							newLeafNode(lv_maxVal_9_0, grammarAccess.getChainSuccessionAccess().getMaxValINTTerminalRuleCall_6_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getChainSuccessionRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_9_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_10='ms'
			{
				newLeafNode(otherlv_10, grammarAccess.getChainSuccessionAccess().getMsKeyword_6_3());
			}
		)?
	)
;

// Entry rule entryRuleAlternateSuccession
entryRuleAlternateSuccession returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlternateSuccessionRule()); }
	iv_ruleAlternateSuccession=ruleAlternateSuccession
	{ $current=$iv_ruleAlternateSuccession.current; }
	EOF;

// Rule AlternateSuccession
ruleAlternateSuccession returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<!>'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlternateSuccessionAccess().getLessThanSignExclamationMarkGreaterThanSignKeyword_0());
		}
		(
			(
				lv_eitherA_1_0='either'
				{
					newLeafNode(lv_eitherA_1_0, grammarAccess.getAlternateSuccessionAccess().getEitherAEitherKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateSuccessionRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_1_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateSuccessionAccess().getRefARefParserRuleCall_2_0());
				}
				lv_refA_2_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateSuccessionRule());
					}
					add(
						$current,
						"refA",
						lv_refA_2_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_3='occurs'
			{
				newLeafNode(otherlv_3, grammarAccess.getAlternateSuccessionAccess().getOccursKeyword_3());
			}
		)?
		otherlv_4='if-and-only-if-followed-by'
		{
			newLeafNode(otherlv_4, grammarAccess.getAlternateSuccessionAccess().getIfAndOnlyIfFollowedByKeyword_4());
		}
		(
			(
				lv_eitherB_5_0='either'
				{
					newLeafNode(lv_eitherB_5_0, grammarAccess.getAlternateSuccessionAccess().getEitherBEitherKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateSuccessionRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_5_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateSuccessionAccess().getRefBRefParserRuleCall_6_0());
				}
				lv_refB_6_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateSuccessionRule());
					}
					add(
						$current,
						"refB",
						lv_refB_6_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='with'
		{
			newLeafNode(otherlv_7, grammarAccess.getAlternateSuccessionAccess().getWithKeyword_7());
		}
		(
			(
				lv_eitherC_8_0='either'
				{
					newLeafNode(lv_eitherC_8_0, grammarAccess.getAlternateSuccessionAccess().getEitherCEitherKeyword_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateSuccessionRule());
					}
					setWithLastConsumed($current, "eitherC", lv_eitherC_8_0 != null, "either");
				}
			)
		)?
		(
			(
				lv_negation_9_0='no'
				{
					newLeafNode(lv_negation_9_0, grammarAccess.getAlternateSuccessionAccess().getNegationNoKeyword_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateSuccessionRule());
					}
					setWithLastConsumed($current, "negation", lv_negation_9_0 != null, "no");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateSuccessionAccess().getRefCRefParserRuleCall_10_0());
				}
				lv_refC_10_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateSuccessionRule());
					}
					add(
						$current,
						"refC",
						lv_refC_10_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_11='in-between'
		{
			newLeafNode(otherlv_11, grammarAccess.getAlternateSuccessionAccess().getInBetweenKeyword_11());
		}
	)
;

// Entry rule entryRuleSuccession
entryRuleSuccession returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuccessionRule()); }
	iv_ruleSuccession=ruleSuccession
	{ $current=$iv_ruleSuccession.current; }
	EOF;

// Rule Succession
ruleSuccession returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<-->'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuccessionAccess().getLessThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				lv_eitherA_1_0='either'
				{
					newLeafNode(lv_eitherA_1_0, grammarAccess.getSuccessionAccess().getEitherAEitherKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuccessionRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_1_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSuccessionAccess().getRefARefParserRuleCall_2_0());
				}
				lv_refA_2_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuccessionRule());
					}
					add(
						$current,
						"refA",
						lv_refA_2_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_3='occurs'
			{
				newLeafNode(otherlv_3, grammarAccess.getSuccessionAccess().getOccursKeyword_3());
			}
		)?
		otherlv_4='if-and-only-if-followed-by'
		{
			newLeafNode(otherlv_4, grammarAccess.getSuccessionAccess().getIfAndOnlyIfFollowedByKeyword_4());
		}
		(
			(
				lv_eitherB_5_0='either'
				{
					newLeafNode(lv_eitherB_5_0, grammarAccess.getSuccessionAccess().getEitherBEitherKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuccessionRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_5_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSuccessionAccess().getRefBRefParserRuleCall_6_0());
				}
				lv_refB_6_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuccessionRule());
					}
					add(
						$current,
						"refB",
						lv_refB_6_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_7='within'
			{
				newLeafNode(otherlv_7, grammarAccess.getSuccessionAccess().getWithinKeyword_7_0());
			}
			(
				(
					lv_minVal_8_0=RULE_INT
					{
						newLeafNode(lv_minVal_8_0, grammarAccess.getSuccessionAccess().getMinValINTTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSuccessionRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_9='-'
				{
					newLeafNode(otherlv_9, grammarAccess.getSuccessionAccess().getHyphenMinusKeyword_7_2_0());
				}
				(
					(
						lv_maxVal_10_0=RULE_INT
						{
							newLeafNode(lv_maxVal_10_0, grammarAccess.getSuccessionAccess().getMaxValINTTerminalRuleCall_7_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSuccessionRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_10_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_11='ms'
			{
				newLeafNode(otherlv_11, grammarAccess.getSuccessionAccess().getMsKeyword_7_3());
			}
		)?
	)
;

// Entry rule entryRuleCoExistance
entryRuleCoExistance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoExistanceRule()); }
	iv_ruleCoExistance=ruleCoExistance
	{ $current=$iv_ruleCoExistance.current; }
	EOF;

// Rule CoExistance
ruleCoExistance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getCoExistanceAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCoExistanceAccess().getRefARefParserRuleCall_1_0());
				}
				lv_refA_1_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoExistanceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_1_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='occur-together'
		{
			newLeafNode(otherlv_2, grammarAccess.getCoExistanceAccess().getOccurTogetherKeyword_2());
		}
	)
;

// Entry rule entryRuleRespondedExistence
entryRuleRespondedExistence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRespondedExistenceRule()); }
	iv_ruleRespondedExistence=ruleRespondedExistence
	{ $current=$iv_ruleRespondedExistence.current; }
	EOF;

// Rule RespondedExistence
ruleRespondedExistence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-|-'
		{
			newLeafNode(otherlv_0, grammarAccess.getRespondedExistenceAccess().getHyphenMinusVerticalLineHyphenMinusKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getRespondedExistenceAccess().getIfKeyword_1());
		}
		(
			(
				lv_eitherA_2_0='either'
				{
					newLeafNode(lv_eitherA_2_0, grammarAccess.getRespondedExistenceAccess().getEitherAEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRespondedExistenceRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRespondedExistenceAccess().getRefARefParserRuleCall_3_0());
				}
				lv_refA_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRespondedExistenceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getRespondedExistenceAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getRespondedExistenceAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherB_6_0='either'
				{
					newLeafNode(lv_eitherB_6_0, grammarAccess.getRespondedExistenceAccess().getEitherBEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRespondedExistenceRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRespondedExistenceAccess().getRefBRefParserRuleCall_7_0());
				}
				lv_refB_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRespondedExistenceRule());
					}
					add(
						$current,
						"refB",
						lv_refB_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='occurs-as-well'
		{
			newLeafNode(otherlv_8, grammarAccess.getRespondedExistenceAccess().getOccursAsWellKeyword_8());
		}
	)
;

// Entry rule entryRuleChainPrecedence
entryRuleChainPrecedence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChainPrecedenceRule()); }
	iv_ruleChainPrecedence=ruleChainPrecedence
	{ $current=$iv_ruleChainPrecedence.current; }
	EOF;

// Rule ChainPrecedence
ruleChainPrecedence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getChainPrecedenceAccess().getLessThanSignKeyword_0());
		}
		otherlv_1='whenever'
		{
			newLeafNode(otherlv_1, grammarAccess.getChainPrecedenceAccess().getWheneverKeyword_1());
		}
		(
			(
				lv_eitherB_2_0='either'
				{
					newLeafNode(lv_eitherB_2_0, grammarAccess.getChainPrecedenceAccess().getEitherBEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainPrecedenceRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainPrecedenceAccess().getRefBRefParserRuleCall_3_0());
				}
				lv_refB_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainPrecedenceRule());
					}
					add(
						$current,
						"refB",
						lv_refB_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getChainPrecedenceAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getChainPrecedenceAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherA_6_0='either'
				{
					newLeafNode(lv_eitherA_6_0, grammarAccess.getChainPrecedenceAccess().getEitherAEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainPrecedenceRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainPrecedenceAccess().getRefARefParserRuleCall_7_0());
				}
				lv_refA_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainPrecedenceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='must'
		{
			newLeafNode(otherlv_8, grammarAccess.getChainPrecedenceAccess().getMustKeyword_8());
		}
		(
			(
				lv_not_9_0='not'
				{
					newLeafNode(lv_not_9_0, grammarAccess.getChainPrecedenceAccess().getNotNotKeyword_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainPrecedenceRule());
					}
					setWithLastConsumed($current, "not", lv_not_9_0 != null, "not");
				}
			)
		)?
		otherlv_10='have-occurred-immediately-before'
		{
			newLeafNode(otherlv_10, grammarAccess.getChainPrecedenceAccess().getHaveOccurredImmediatelyBeforeKeyword_10());
		}
		(
			otherlv_11='within'
			{
				newLeafNode(otherlv_11, grammarAccess.getChainPrecedenceAccess().getWithinKeyword_11_0());
			}
			(
				(
					lv_minVal_12_0=RULE_INT
					{
						newLeafNode(lv_minVal_12_0, grammarAccess.getChainPrecedenceAccess().getMinValINTTerminalRuleCall_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChainPrecedenceRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_12_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_13='-'
				{
					newLeafNode(otherlv_13, grammarAccess.getChainPrecedenceAccess().getHyphenMinusKeyword_11_2_0());
				}
				(
					(
						lv_maxVal_14_0=RULE_INT
						{
							newLeafNode(lv_maxVal_14_0, grammarAccess.getChainPrecedenceAccess().getMaxValINTTerminalRuleCall_11_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getChainPrecedenceRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_15='ms'
			{
				newLeafNode(otherlv_15, grammarAccess.getChainPrecedenceAccess().getMsKeyword_11_3());
			}
		)?
	)
;

// Entry rule entryRuleChainResponse
entryRuleChainResponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChainResponseRule()); }
	iv_ruleChainResponse=ruleChainResponse
	{ $current=$iv_ruleChainResponse.current; }
	EOF;

// Rule ChainResponse
ruleChainResponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='>'
		{
			newLeafNode(otherlv_0, grammarAccess.getChainResponseAccess().getGreaterThanSignKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getChainResponseAccess().getIfKeyword_1());
		}
		(
			(
				lv_eitherA_2_0='either'
				{
					newLeafNode(lv_eitherA_2_0, grammarAccess.getChainResponseAccess().getEitherAEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainResponseRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainResponseAccess().getRefARefParserRuleCall_3_0());
				}
				lv_refA_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainResponseRule());
					}
					add(
						$current,
						"refA",
						lv_refA_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getChainResponseAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getChainResponseAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherB_6_0='either'
				{
					newLeafNode(lv_eitherB_6_0, grammarAccess.getChainResponseAccess().getEitherBEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainResponseRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChainResponseAccess().getRefBRefParserRuleCall_7_0());
				}
				lv_refB_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChainResponseRule());
					}
					add(
						$current,
						"refB",
						lv_refB_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='must'
		{
			newLeafNode(otherlv_8, grammarAccess.getChainResponseAccess().getMustKeyword_8());
		}
		(
			(
				lv_not_9_0='not'
				{
					newLeafNode(lv_not_9_0, grammarAccess.getChainResponseAccess().getNotNotKeyword_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChainResponseRule());
					}
					setWithLastConsumed($current, "not", lv_not_9_0 != null, "not");
				}
			)
		)?
		otherlv_10='immediately-follow'
		{
			newLeafNode(otherlv_10, grammarAccess.getChainResponseAccess().getImmediatelyFollowKeyword_10());
		}
		(
			otherlv_11='within'
			{
				newLeafNode(otherlv_11, grammarAccess.getChainResponseAccess().getWithinKeyword_11_0());
			}
			(
				(
					lv_minVal_12_0=RULE_INT
					{
						newLeafNode(lv_minVal_12_0, grammarAccess.getChainResponseAccess().getMinValINTTerminalRuleCall_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChainResponseRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_12_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_13='-'
				{
					newLeafNode(otherlv_13, grammarAccess.getChainResponseAccess().getHyphenMinusKeyword_11_2_0());
				}
				(
					(
						lv_maxVal_14_0=RULE_INT
						{
							newLeafNode(lv_maxVal_14_0, grammarAccess.getChainResponseAccess().getMaxValINTTerminalRuleCall_11_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getChainResponseRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_15='ms'
			{
				newLeafNode(otherlv_15, grammarAccess.getChainResponseAccess().getMsKeyword_11_3());
			}
		)?
	)
;

// Entry rule entryRuleAlternateResponse
entryRuleAlternateResponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlternateResponseRule()); }
	iv_ruleAlternateResponse=ruleAlternateResponse
	{ $current=$iv_ruleAlternateResponse.current; }
	EOF;

// Rule AlternateResponse
ruleAlternateResponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!>'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlternateResponseAccess().getExclamationMarkGreaterThanSignKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlternateResponseAccess().getIfKeyword_1());
		}
		(
			(
				lv_eitherA_2_0='either'
				{
					newLeafNode(lv_eitherA_2_0, grammarAccess.getAlternateResponseAccess().getEitherAEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateResponseRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateResponseAccess().getRefARefParserRuleCall_3_0());
				}
				lv_refA_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateResponseRule());
					}
					add(
						$current,
						"refA",
						lv_refA_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getAlternateResponseAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getAlternateResponseAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherB_6_0='either'
				{
					newLeafNode(lv_eitherB_6_0, grammarAccess.getAlternateResponseAccess().getEitherBEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateResponseRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateResponseAccess().getRefBRefParserRuleCall_7_0());
				}
				lv_refB_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateResponseRule());
					}
					add(
						$current,
						"refB",
						lv_refB_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='must-follow'
		{
			newLeafNode(otherlv_8, grammarAccess.getAlternateResponseAccess().getMustFollowKeyword_8());
		}
		(
			otherlv_9='within'
			{
				newLeafNode(otherlv_9, grammarAccess.getAlternateResponseAccess().getWithinKeyword_9_0());
			}
			(
				(
					lv_minVal_10_0=RULE_INT
					{
						newLeafNode(lv_minVal_10_0, grammarAccess.getAlternateResponseAccess().getMinValINTTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAlternateResponseRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_10_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_11='-'
				{
					newLeafNode(otherlv_11, grammarAccess.getAlternateResponseAccess().getHyphenMinusKeyword_9_2_0());
				}
				(
					(
						lv_maxVal_12_0=RULE_INT
						{
							newLeafNode(lv_maxVal_12_0, grammarAccess.getAlternateResponseAccess().getMaxValINTTerminalRuleCall_9_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAlternateResponseRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_12_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_13='ms'
			{
				newLeafNode(otherlv_13, grammarAccess.getAlternateResponseAccess().getMsKeyword_9_3());
			}
		)?
		otherlv_14='with'
		{
			newLeafNode(otherlv_14, grammarAccess.getAlternateResponseAccess().getWithKeyword_10());
		}
		(
			(
				lv_not_15_0='no'
				{
					newLeafNode(lv_not_15_0, grammarAccess.getAlternateResponseAccess().getNotNoKeyword_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateResponseRule());
					}
					setWithLastConsumed($current, "not", lv_not_15_0 != null, "no");
				}
			)
		)?
		(
			(
				lv_eitherC_16_0='either'
				{
					newLeafNode(lv_eitherC_16_0, grammarAccess.getAlternateResponseAccess().getEitherCEitherKeyword_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternateResponseRule());
					}
					setWithLastConsumed($current, "eitherC", lv_eitherC_16_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternateResponseAccess().getRefCRefParserRuleCall_13_0());
				}
				lv_refC_17_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternateResponseRule());
					}
					add(
						$current,
						"refC",
						lv_refC_17_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_18='in-between'
		{
			newLeafNode(otherlv_18, grammarAccess.getAlternateResponseAccess().getInBetweenKeyword_14());
		}
	)
;

// Entry rule entryRuleAlternatePrecedence
entryRuleAlternatePrecedence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlternatePrecedenceRule()); }
	iv_ruleAlternatePrecedence=ruleAlternatePrecedence
	{ $current=$iv_ruleAlternatePrecedence.current; }
	EOF;

// Rule AlternatePrecedence
ruleAlternatePrecedence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<!'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlternatePrecedenceAccess().getLessThanSignExclamationMarkKeyword_0());
		}
		otherlv_1='whenever'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlternatePrecedenceAccess().getWheneverKeyword_1());
		}
		(
			(
				lv_eitherB_2_0='either'
				{
					newLeafNode(lv_eitherB_2_0, grammarAccess.getAlternatePrecedenceAccess().getEitherBEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternatePrecedenceAccess().getRefBRefParserRuleCall_3_0());
				}
				lv_refB_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternatePrecedenceRule());
					}
					add(
						$current,
						"refB",
						lv_refB_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getAlternatePrecedenceAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getAlternatePrecedenceAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherA_6_0='either'
				{
					newLeafNode(lv_eitherA_6_0, grammarAccess.getAlternatePrecedenceAccess().getEitherAEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternatePrecedenceAccess().getRefARefParserRuleCall_7_0());
				}
				lv_refA_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternatePrecedenceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='must-have-occurred'
		{
			newLeafNode(otherlv_8, grammarAccess.getAlternatePrecedenceAccess().getMustHaveOccurredKeyword_8());
		}
		(
			otherlv_9='within'
			{
				newLeafNode(otherlv_9, grammarAccess.getAlternatePrecedenceAccess().getWithinKeyword_9_0());
			}
			(
				(
					lv_minVal_10_0=RULE_INT
					{
						newLeafNode(lv_minVal_10_0, grammarAccess.getAlternatePrecedenceAccess().getMinValINTTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_10_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_11='-'
				{
					newLeafNode(otherlv_11, grammarAccess.getAlternatePrecedenceAccess().getHyphenMinusKeyword_9_2_0());
				}
				(
					(
						lv_maxVal_12_0=RULE_INT
						{
							newLeafNode(lv_maxVal_12_0, grammarAccess.getAlternatePrecedenceAccess().getMaxValINTTerminalRuleCall_9_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_12_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_13='ms'
			{
				newLeafNode(otherlv_13, grammarAccess.getAlternatePrecedenceAccess().getMsKeyword_9_3());
			}
		)?
		otherlv_14='with'
		{
			newLeafNode(otherlv_14, grammarAccess.getAlternatePrecedenceAccess().getWithKeyword_10());
		}
		(
			(
				lv_not_15_0='no'
				{
					newLeafNode(lv_not_15_0, grammarAccess.getAlternatePrecedenceAccess().getNotNoKeyword_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
					}
					setWithLastConsumed($current, "not", lv_not_15_0 != null, "no");
				}
			)
		)?
		(
			(
				lv_eitherC_16_0='either'
				{
					newLeafNode(lv_eitherC_16_0, grammarAccess.getAlternatePrecedenceAccess().getEitherCEitherKeyword_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlternatePrecedenceRule());
					}
					setWithLastConsumed($current, "eitherC", lv_eitherC_16_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternatePrecedenceAccess().getRefCRefParserRuleCall_13_0());
				}
				lv_refC_17_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternatePrecedenceRule());
					}
					add(
						$current,
						"refC",
						lv_refC_17_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_18='in-between'
		{
			newLeafNode(otherlv_18, grammarAccess.getAlternatePrecedenceAccess().getInBetweenKeyword_14());
		}
	)
;

// Entry rule entryRuleResponse
entryRuleResponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResponseRule()); }
	iv_ruleResponse=ruleResponse
	{ $current=$iv_ruleResponse.current; }
	EOF;

// Rule Response
ruleResponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getResponseAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getResponseAccess().getIfKeyword_1());
		}
		(
			(
				lv_eitherA_2_0='either'
				{
					newLeafNode(lv_eitherA_2_0, grammarAccess.getResponseAccess().getEitherAEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResponseRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getRefARefParserRuleCall_3_0());
				}
				lv_refA_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					add(
						$current,
						"refA",
						lv_refA_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getResponseAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getResponseAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherB_6_0='either'
				{
					newLeafNode(lv_eitherB_6_0, grammarAccess.getResponseAccess().getEitherBEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResponseRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getRefBRefParserRuleCall_7_0());
				}
				lv_refB_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					add(
						$current,
						"refB",
						lv_refB_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='must'
		{
			newLeafNode(otherlv_8, grammarAccess.getResponseAccess().getMustKeyword_8());
		}
		(
			(
				lv_not_9_0='not'
				{
					newLeafNode(lv_not_9_0, grammarAccess.getResponseAccess().getNotNotKeyword_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResponseRule());
					}
					setWithLastConsumed($current, "not", lv_not_9_0 != null, "not");
				}
			)
		)?
		otherlv_10='eventually-follow'
		{
			newLeafNode(otherlv_10, grammarAccess.getResponseAccess().getEventuallyFollowKeyword_10());
		}
		(
			otherlv_11='within'
			{
				newLeafNode(otherlv_11, grammarAccess.getResponseAccess().getWithinKeyword_11_0());
			}
			(
				(
					lv_minVal_12_0=RULE_INT
					{
						newLeafNode(lv_minVal_12_0, grammarAccess.getResponseAccess().getMinValINTTerminalRuleCall_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getResponseRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_12_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_13='-'
				{
					newLeafNode(otherlv_13, grammarAccess.getResponseAccess().getHyphenMinusKeyword_11_2_0());
				}
				(
					(
						lv_maxVal_14_0=RULE_INT
						{
							newLeafNode(lv_maxVal_14_0, grammarAccess.getResponseAccess().getMaxValINTTerminalRuleCall_11_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getResponseRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_15='ms'
			{
				newLeafNode(otherlv_15, grammarAccess.getResponseAccess().getMsKeyword_11_3());
			}
		)?
	)
;

// Entry rule entryRulePrecedence
entryRulePrecedence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrecedenceRule()); }
	iv_rulePrecedence=rulePrecedence
	{ $current=$iv_rulePrecedence.current; }
	EOF;

// Rule Precedence
rulePrecedence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<-'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrecedenceAccess().getLessThanSignHyphenMinusKeyword_0());
		}
		otherlv_1='whenever'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrecedenceAccess().getWheneverKeyword_1());
		}
		(
			(
				lv_eitherB_2_0='either'
				{
					newLeafNode(lv_eitherB_2_0, grammarAccess.getPrecedenceAccess().getEitherBEitherKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrecedenceRule());
					}
					setWithLastConsumed($current, "eitherB", lv_eitherB_2_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPrecedenceAccess().getRefBRefParserRuleCall_3_0());
				}
				lv_refB_3_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrecedenceRule());
					}
					add(
						$current,
						"refB",
						lv_refB_3_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='occurs'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrecedenceAccess().getOccursKeyword_4());
			}
		)?
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getPrecedenceAccess().getThenKeyword_5());
		}
		(
			(
				lv_eitherA_6_0='either'
				{
					newLeafNode(lv_eitherA_6_0, grammarAccess.getPrecedenceAccess().getEitherAEitherKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrecedenceRule());
					}
					setWithLastConsumed($current, "eitherA", lv_eitherA_6_0 != null, "either");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPrecedenceAccess().getRefARefParserRuleCall_7_0());
				}
				lv_refA_7_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrecedenceRule());
					}
					add(
						$current,
						"refA",
						lv_refA_7_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='must'
		{
			newLeafNode(otherlv_8, grammarAccess.getPrecedenceAccess().getMustKeyword_8());
		}
		(
			(
				lv_not_9_0='not'
				{
					newLeafNode(lv_not_9_0, grammarAccess.getPrecedenceAccess().getNotNotKeyword_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrecedenceRule());
					}
					setWithLastConsumed($current, "not", lv_not_9_0 != null, "not");
				}
			)
		)?
		otherlv_10='have-occurred-before'
		{
			newLeafNode(otherlv_10, grammarAccess.getPrecedenceAccess().getHaveOccurredBeforeKeyword_10());
		}
		(
			otherlv_11='within'
			{
				newLeafNode(otherlv_11, grammarAccess.getPrecedenceAccess().getWithinKeyword_11_0());
			}
			(
				(
					lv_minVal_12_0=RULE_INT
					{
						newLeafNode(lv_minVal_12_0, grammarAccess.getPrecedenceAccess().getMinValINTTerminalRuleCall_11_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrecedenceRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_12_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_13='-'
				{
					newLeafNode(otherlv_13, grammarAccess.getPrecedenceAccess().getHyphenMinusKeyword_11_2_0());
				}
				(
					(
						lv_maxVal_14_0=RULE_INT
						{
							newLeafNode(lv_maxVal_14_0, grammarAccess.getPrecedenceAccess().getMaxValINTTerminalRuleCall_11_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrecedenceRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_15='ms'
			{
				newLeafNode(otherlv_15, grammarAccess.getPrecedenceAccess().getMsKeyword_11_3());
			}
		)?
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current; }
	EOF;

// Rule End
ruleEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAccess().getRefRefParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndRule());
					}
					add(
						$current,
						"ref",
						lv_ref_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='occurs-last'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndAccess().getOccursLastKeyword_1());
		}
	)
;

// Entry rule entryRuleInit
entryRuleInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitRule()); }
	iv_ruleInit=ruleInit
	{ $current=$iv_ruleInit.current; }
	EOF;

// Rule Init
ruleInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInitAccess().getRefRefParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitRule());
					}
					add(
						$current,
						"ref",
						lv_ref_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='occurs-first'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitAccess().getOccursFirstKeyword_1());
		}
	)
;

// Entry rule entryRuleAtMost
entryRuleAtMost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtMostRule()); }
	iv_ruleAtMost=ruleAtMost
	{ $current=$iv_ruleAtMost.current; }
	EOF;

// Rule AtMost
ruleAtMost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtMostAccess().getRefRefParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtMostRule());
					}
					add(
						$current,
						"ref",
						lv_ref_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='occurs-at-most'
		{
			newLeafNode(otherlv_1, grammarAccess.getAtMostAccess().getOccursAtMostKeyword_1());
		}
		(
			(
				lv_num_2_0=RULE_INT
				{
					newLeafNode(lv_num_2_0, grammarAccess.getAtMostAccess().getNumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtMostRule());
					}
					setWithLastConsumed(
						$current,
						"num",
						lv_num_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='times'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtMostAccess().getTimesKeyword_3());
		}
	)
;

// Entry rule entryRuleExact
entryRuleExact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactRule()); }
	iv_ruleExact=ruleExact
	{ $current=$iv_ruleExact.current; }
	EOF;

// Rule Exact
ruleExact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExactAccess().getRefRefParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExactRule());
					}
					add(
						$current,
						"ref",
						lv_ref_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='occurs-exactly'
		{
			newLeafNode(otherlv_1, grammarAccess.getExactAccess().getOccursExactlyKeyword_1());
		}
		(
			(
				lv_num_2_0=RULE_INT
				{
					newLeafNode(lv_num_2_0, grammarAccess.getExactAccess().getNumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactRule());
					}
					setWithLastConsumed(
						$current,
						"num",
						lv_num_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='times'
		{
			newLeafNode(otherlv_3, grammarAccess.getExactAccess().getTimesKeyword_3());
		}
		(
			(
				lv_consecutively_4_0='consecutively'
				{
					newLeafNode(lv_consecutively_4_0, grammarAccess.getExactAccess().getConsecutivelyConsecutivelyKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactRule());
					}
					setWithLastConsumed($current, "consecutively", lv_consecutively_4_0 != null, "consecutively");
				}
			)
		)?
		(
			otherlv_5='with-periodicity-of'
			{
				newLeafNode(otherlv_5, grammarAccess.getExactAccess().getWithPeriodicityOfKeyword_5_0());
			}
			(
				(
					lv_minVal_6_0=RULE_INT
					{
						newLeafNode(lv_minVal_6_0, grammarAccess.getExactAccess().getMinValINTTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExactRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_7='-'
				{
					newLeafNode(otherlv_7, grammarAccess.getExactAccess().getHyphenMinusKeyword_5_2_0());
				}
				(
					(
						lv_maxVal_8_0=RULE_INT
						{
							newLeafNode(lv_maxVal_8_0, grammarAccess.getExactAccess().getMaxValINTTerminalRuleCall_5_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExactRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_8_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_9='ms'
			{
				newLeafNode(otherlv_9, grammarAccess.getExactAccess().getMsKeyword_5_3());
			}
		)?
	)
;

// Entry rule entryRuleAtLeast
entryRuleAtLeast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtLeastRule()); }
	iv_ruleAtLeast=ruleAtLeast
	{ $current=$iv_ruleAtLeast.current; }
	EOF;

// Rule AtLeast
ruleAtLeast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtLeastAccess().getRefRefParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtLeastRule());
					}
					add(
						$current,
						"ref",
						lv_ref_0_0,
						"nl.esi.comma.behavior.scl.Scl.Ref");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='occurs-at-least'
		{
			newLeafNode(otherlv_1, grammarAccess.getAtLeastAccess().getOccursAtLeastKeyword_1());
		}
		(
			(
				lv_num_2_0=RULE_INT
				{
					newLeafNode(lv_num_2_0, grammarAccess.getAtLeastAccess().getNumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtLeastRule());
					}
					setWithLastConsumed(
						$current,
						"num",
						lv_num_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='times'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtLeastAccess().getTimesKeyword_3());
		}
		(
			otherlv_4='with-periodicity-of'
			{
				newLeafNode(otherlv_4, grammarAccess.getAtLeastAccess().getWithPeriodicityOfKeyword_4_0());
			}
			(
				(
					lv_minVal_5_0=RULE_INT
					{
						newLeafNode(lv_minVal_5_0, grammarAccess.getAtLeastAccess().getMinValINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtLeastRule());
						}
						setWithLastConsumed(
							$current,
							"minVal",
							lv_minVal_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_6='-'
				{
					newLeafNode(otherlv_6, grammarAccess.getAtLeastAccess().getHyphenMinusKeyword_4_2_0());
				}
				(
					(
						lv_maxVal_7_0=RULE_INT
						{
							newLeafNode(lv_maxVal_7_0, grammarAccess.getAtLeastAccess().getMaxValINTTerminalRuleCall_4_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtLeastRule());
							}
							setWithLastConsumed(
								$current,
								"maxVal",
								lv_maxVal_7_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			otherlv_8='ms'
			{
				newLeafNode(otherlv_8, grammarAccess.getAtLeastAccess().getMsKeyword_4_3());
			}
		)?
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getExpressionLevel1ParserRuleCall());
	}
	this_ExpressionLevel1_0=ruleExpressionLevel1
	{
		$current = $this_ExpressionLevel1_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpressionLevel1
entryRuleExpressionLevel1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel1Rule()); }
	iv_ruleExpressionLevel1=ruleExpressionLevel1
	{ $current=$iv_ruleExpressionLevel1.current; }
	EOF;

// Rule ExpressionLevel1
ruleExpressionLevel1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel1Access().getExpressionLevel2ParserRuleCall_0());
		}
		this_ExpressionLevel2_0=ruleExpressionLevel2
		{
			$current = $this_ExpressionLevel2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0(),
							$current);
					}
				)
				(
					otherlv_2='AND'
					{
						newLeafNode(otherlv_2, grammarAccess.getExpressionLevel1Access().getANDKeyword_1_0_1_0());
					}
					    |
					otherlv_3='and'
					{
						newLeafNode(otherlv_3, grammarAccess.getExpressionLevel1Access().getAndKeyword_1_0_1_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_0_2_0());
						}
						lv_right_4_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_4_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0(),
							$current);
					}
				)
				(
					otherlv_6='OR'
					{
						newLeafNode(otherlv_6, grammarAccess.getExpressionLevel1Access().getORKeyword_1_1_1_0());
					}
					    |
					otherlv_7='or'
					{
						newLeafNode(otherlv_7, grammarAccess.getExpressionLevel1Access().getOrKeyword_1_1_1_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_1_2_0());
						}
						lv_right_8_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_8_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel2
entryRuleExpressionLevel2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel2Rule()); }
	iv_ruleExpressionLevel2=ruleExpressionLevel2
	{ $current=$iv_ruleExpressionLevel2.current; }
	EOF;

// Rule ExpressionLevel2
ruleExpressionLevel2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel2Access().getExpressionLevel3ParserRuleCall_0());
		}
		this_ExpressionLevel3_0=ruleExpressionLevel3
		{
			$current = $this_ExpressionLevel3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='=='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel2Access().getEqualsSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='!='
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel2Access().getExclamationMarkEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel3
entryRuleExpressionLevel3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel3Rule()); }
	iv_ruleExpressionLevel3=ruleExpressionLevel3
	{ $current=$iv_ruleExpressionLevel3.current; }
	EOF;

// Rule ExpressionLevel3
ruleExpressionLevel3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel3Access().getExpressionLevel4ParserRuleCall_0());
		}
		this_ExpressionLevel4_0=ruleExpressionLevel4
		{
			$current = $this_ExpressionLevel4_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='>='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel3Access().getGreaterThanSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='>'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel3Access().getGreaterThanSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='<='
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionLevel3Access().getLessThanSignEqualsSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='<'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpressionLevel3Access().getLessThanSignKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel4
entryRuleExpressionLevel4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel4Rule()); }
	iv_ruleExpressionLevel4=ruleExpressionLevel4
	{ $current=$iv_ruleExpressionLevel4.current; }
	EOF;

// Rule ExpressionLevel4
ruleExpressionLevel4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel4Access().getExpressionLevel5ParserRuleCall_0());
		}
		this_ExpressionLevel5_0=ruleExpressionLevel5
		{
			$current = $this_ExpressionLevel5_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel4Access().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel4Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='-'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel4Access().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel4Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel5
entryRuleExpressionLevel5 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel5Rule()); }
	iv_ruleExpressionLevel5=ruleExpressionLevel5
	{ $current=$iv_ruleExpressionLevel5.current; }
	EOF;

// Rule ExpressionLevel5
ruleExpressionLevel5 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel5Access().getExpressionLevel6ParserRuleCall_0());
		}
		this_ExpressionLevel6_0=ruleExpressionLevel6
		{
			$current = $this_ExpressionLevel6_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel5Access().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='/'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel5Access().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='max'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionLevel5Access().getMaxKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='min'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpressionLevel5Access().getMinKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0(),
							$current);
					}
				)
				otherlv_14='mod'
				{
					newLeafNode(otherlv_14, grammarAccess.getExpressionLevel5Access().getModKeyword_1_4_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_4_2_0());
						}
						lv_right_15_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_15_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel6
entryRuleExpressionLevel6 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel6Rule()); }
	iv_ruleExpressionLevel6=ruleExpressionLevel6
	{ $current=$iv_ruleExpressionLevel6.current; }
	EOF;

// Rule ExpressionLevel6
ruleExpressionLevel6 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel6Access().getExpressionLevel7ParserRuleCall_0());
		}
		this_ExpressionLevel7_0=ruleExpressionLevel7
		{
			$current = $this_ExpressionLevel7_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionLevel6Access().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionLevel6Access().getRightExpressionLevel6ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpressionLevel6
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionLevel6Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpressionLevel7
entryRuleExpressionLevel7 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel7Rule()); }
	iv_ruleExpressionLevel7=ruleExpressionLevel7
	{ $current=$iv_ruleExpressionLevel7.current; }
	EOF;

// Rule ExpressionLevel7
ruleExpressionLevel7 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionNotParserRuleCall_0());
		}
		this_ExpressionNot_0=ruleExpressionNot
		{
			$current = $this_ExpressionNot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionMinusParserRuleCall_1());
		}
		this_ExpressionMinus_1=ruleExpressionMinus
		{
			$current = $this_ExpressionMinus_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionPlusParserRuleCall_2());
		}
		this_ExpressionPlus_2=ruleExpressionPlus
		{
			$current = $this_ExpressionPlus_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionLevel8ParserRuleCall_3());
		}
		this_ExpressionLevel8_3=ruleExpressionLevel8
		{
			$current = $this_ExpressionLevel8_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionNot
entryRuleExpressionNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionNotRule()); }
	iv_ruleExpressionNot=ruleExpressionNot
	{ $current=$iv_ruleExpressionNot.current; }
	EOF;

// Rule ExpressionNot
ruleExpressionNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='NOT'
			{
				newLeafNode(otherlv_0, grammarAccess.getExpressionNotAccess().getNOTKeyword_0_0());
			}
			    |
			otherlv_1='not'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionNotAccess().getNotKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionNotAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_2_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionNotRule());
					}
					set(
						$current,
						"sub",
						lv_sub_2_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionMinus
entryRuleExpressionMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMinusRule()); }
	iv_ruleExpressionMinus=ruleExpressionMinus
	{ $current=$iv_ruleExpressionMinus.current; }
	EOF;

// Rule ExpressionMinus
ruleExpressionMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionMinusAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionMinusAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionMinusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionPlus
entryRuleExpressionPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionPlusRule()); }
	iv_ruleExpressionPlus=ruleExpressionPlus
	{ $current=$iv_ruleExpressionPlus.current; }
	EOF;

// Rule ExpressionPlus
ruleExpressionPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionPlusAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionPlusAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionPlusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLevel8
entryRuleExpressionLevel8 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel8Rule()); }
	iv_ruleExpressionLevel8=ruleExpressionLevel8
	{ $current=$iv_ruleExpressionLevel8.current; }
	EOF;

// Rule ExpressionLevel8
ruleExpressionLevel8 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionBracketParserRuleCall_0());
		}
		this_ExpressionBracket_0=ruleExpressionBracket
		{
			$current = $this_ExpressionBracket_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantBoolParserRuleCall_1());
		}
		this_ExpressionConstantBool_1=ruleExpressionConstantBool
		{
			$current = $this_ExpressionConstantBool_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantIntParserRuleCall_2());
		}
		this_ExpressionConstantInt_2=ruleExpressionConstantInt
		{
			$current = $this_ExpressionConstantInt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantStringParserRuleCall_3());
		}
		this_ExpressionConstantString_3=ruleExpressionConstantString
		{
			$current = $this_ExpressionConstantString_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionVariableParserRuleCall_4());
		}
		this_ExpressionVariable_4=ruleExpressionVariable
		{
			$current = $this_ExpressionVariable_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionQuantifierParserRuleCall_5());
		}
		this_ExpressionQuantifier_5=ruleExpressionQuantifier
		{
			$current = $this_ExpressionQuantifier_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionTypeAnnotatedParserRuleCall_6());
		}
		this_ExpressionTypeAnnotated_6=ruleExpressionTypeAnnotated
		{
			$current = $this_ExpressionTypeAnnotated_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionBracket
entryRuleExpressionBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionBracketRule()); }
	iv_ruleExpressionBracket=ruleExpressionBracket
	{ $current=$iv_ruleExpressionBracket.current; }
	EOF;

// Rule ExpressionBracket
ruleExpressionBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionBracketAccess().getSubExpressionParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionBracketRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExpressionConstantBool
entryRuleExpressionConstantBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantBoolRule()); }
	iv_ruleExpressionConstantBool=ruleExpressionConstantBool
	{ $current=$iv_ruleExpressionConstantBool.current; }
	EOF;

// Rule ExpressionConstantBool
ruleExpressionConstantBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOL_LITERAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantBoolAccess().getValueBOOL_LITERALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantBoolRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"nl.esi.comma.expressions.Expressions.BOOL_LITERAL");
			}
		)
	)
;

// Entry rule entryRuleExpressionConstantInt
entryRuleExpressionConstantInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantIntRule()); }
	iv_ruleExpressionConstantInt=ruleExpressionConstantInt
	{ $current=$iv_ruleExpressionConstantInt.current; }
	EOF;

// Rule ExpressionConstantInt
ruleExpressionConstantInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantIntAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantIntRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleExpressionConstantString
entryRuleExpressionConstantString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantStringRule()); }
	iv_ruleExpressionConstantString=ruleExpressionConstantString
	{ $current=$iv_ruleExpressionConstantString.current; }
	EOF;

// Rule ExpressionConstantString
ruleExpressionConstantString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantStringAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantStringRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleExpressionVariable
entryRuleExpressionVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionVariableRule()); }
	iv_ruleExpressionVariable=ruleExpressionVariable
	{ $current=$iv_ruleExpressionVariable.current; }
	EOF;

// Rule ExpressionVariable
ruleExpressionVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getExpressionVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpressionQuantifier
entryRuleExpressionQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionQuantifierRule()); }
	iv_ruleExpressionQuantifier=ruleExpressionQuantifier
	{ $current=$iv_ruleExpressionQuantifier.current; }
	EOF;

// Rule ExpressionQuantifier
ruleExpressionQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getQuantifierQUANTIFIEREnumRuleCall_0_0());
				}
				lv_quantifier_0_0=ruleQUANTIFIER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"quantifier",
						lv_quantifier_0_0,
						"nl.esi.comma.expressions.Expressions.QUANTIFIER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExpressionQuantifierAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getIteratorVariableParserRuleCall_2_0());
				}
				lv_iterator_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"iterator",
						lv_iterator_2_0,
						"nl.esi.comma.expressions.Expressions.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getExpressionQuantifierAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getCollectionExpressionParserRuleCall_4_0());
				}
				lv_collection_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"collection",
						lv_collection_4_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getExpressionQuantifierAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getConditionExpressionParserRuleCall_6_0());
				}
				lv_condition_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"condition",
						lv_condition_6_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExpressionQuantifierAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExpressionTypeAnnotated
entryRuleExpressionTypeAnnotated returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionTypeAnnotatedRule()); }
	iv_ruleExpressionTypeAnnotated=ruleExpressionTypeAnnotated
	{ $current=$iv_ruleExpressionTypeAnnotated.current; }
	EOF;

// Rule ExpressionTypeAnnotated
ruleExpressionTypeAnnotated returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getTypeAnnotationParserRuleCall_0());
		}
		this_TypeAnnotation_0=ruleTypeAnnotation
		{
			$current = $this_TypeAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionTypeAnnotatedAccess().getExpressionVectorTypeAnnotationAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionTypeAnnotatedAccess().getLeftSquareBracketKeyword_1_0_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsExpressionParserRuleCall_1_0_2_0_0());
							}
							lv_elements_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
								}
								add(
									$current,
									"elements",
									lv_elements_3_0,
									"nl.esi.comma.expressions.Expressions.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getExpressionTypeAnnotatedAccess().getCommaKeyword_1_0_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsExpressionParserRuleCall_1_0_2_1_1_0());
								}
								lv_elements_5_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
									}
									add(
										$current,
										"elements",
										lv_elements_5_0,
										"nl.esi.comma.expressions.Expressions.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getExpressionTypeAnnotatedAccess().getRightSquareBracketKeyword_1_0_3());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionTypeAnnotatedAccess().getExpressionMapTypeAnnotationAction_1_1_0(),
							$current);
					}
				)
				otherlv_8='{'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionTypeAnnotatedAccess().getLeftCurlyBracketKeyword_1_1_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsPairParserRuleCall_1_1_2_0_0());
							}
							lv_pairs_9_0=rulePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
								}
								add(
									$current,
									"pairs",
									lv_pairs_9_0,
									"nl.esi.comma.expressions.Expressions.Pair");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_10=','
						{
							newLeafNode(otherlv_10, grammarAccess.getExpressionTypeAnnotatedAccess().getCommaKeyword_1_1_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsPairParserRuleCall_1_1_2_1_1_0());
								}
								lv_pairs_11_0=rulePair
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
									}
									add(
										$current,
										"pairs",
										lv_pairs_11_0,
										"nl.esi.comma.expressions.Expressions.Pair");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_12='}'
				{
					newLeafNode(otherlv_12, grammarAccess.getExpressionTypeAnnotatedAccess().getRightCurlyBracketKeyword_1_1_3());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeAnnotation
entryRuleTypeAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeAnnotationRule()); }
	iv_ruleTypeAnnotation=ruleTypeAnnotation
	{ $current=$iv_ruleTypeAnnotation.current; }
	EOF;

// Rule TypeAnnotation
ruleTypeAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAnnotationAccess().getLessThanSignKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getTypeAnnotationAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAnnotationAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRulePair
entryRulePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	iv_rulePair=rulePair
	{ $current=$iv_rulePair.current; }
	EOF;

// Rule Pair
rulePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPairAccess().getKeyExpressionParserRuleCall_0_0());
				}
				lv_key_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPairRule());
					}
					set(
						$current,
						"key",
						lv_key_0_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPairAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPairAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPairRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule ActionType
ruleActionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Observable'
			{
				$current = grammarAccess.getActionTypeAccess().getObservableEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionTypeAccess().getObservableEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Trigger'
			{
				$current = grammarAccess.getActionTypeAccess().getTriggerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionTypeAccess().getTriggerEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Pre-condition'
			{
				$current = grammarAccess.getActionTypeAccess().getPreConditionEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionTypeAccess().getPreConditionEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='And'
			{
				$current = grammarAccess.getActionTypeAccess().getConjunctionEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionTypeAccess().getConjunctionEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule QUANTIFIER
ruleQUANTIFIER returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='exists'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getEXISTSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getQUANTIFIERAccess().getEXISTSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='forAll'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getFORALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getQUANTIFIERAccess().getFORALLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='delete'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getDELETEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getQUANTIFIERAccess().getDELETEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_BOOL_LITERAL : ('true'|'false'|'TRUE'|'FALSE'|'True'|'False');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
