/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.expressions.expressions.util;

import nl.esi.comma.expressions.expressions.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see nl.esi.comma.expressions.expressions.ExpressionsPackage
 * @generated
 */
public class ExpressionsSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ExpressionsPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionsSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ExpressionsPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ExpressionsPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_NOT:
      {
        ExpressionNot expressionNot = (ExpressionNot)theEObject;
        T result = caseExpressionNot(expressionNot);
        if (result == null) result = caseExpressionUnary(expressionNot);
        if (result == null) result = caseExpression(expressionNot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MINUS:
      {
        ExpressionMinus expressionMinus = (ExpressionMinus)theEObject;
        T result = caseExpressionMinus(expressionMinus);
        if (result == null) result = caseExpressionUnary(expressionMinus);
        if (result == null) result = caseExpression(expressionMinus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_PLUS:
      {
        ExpressionPlus expressionPlus = (ExpressionPlus)theEObject;
        T result = caseExpressionPlus(expressionPlus);
        if (result == null) result = caseExpressionUnary(expressionPlus);
        if (result == null) result = caseExpression(expressionPlus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_BRACKET:
      {
        ExpressionBracket expressionBracket = (ExpressionBracket)theEObject;
        T result = caseExpressionBracket(expressionBracket);
        if (result == null) result = caseExpressionUnary(expressionBracket);
        if (result == null) result = caseExpression(expressionBracket);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_CONSTANT_BOOL:
      {
        ExpressionConstantBool expressionConstantBool = (ExpressionConstantBool)theEObject;
        T result = caseExpressionConstantBool(expressionConstantBool);
        if (result == null) result = caseExpression(expressionConstantBool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_CONSTANT_INT:
      {
        ExpressionConstantInt expressionConstantInt = (ExpressionConstantInt)theEObject;
        T result = caseExpressionConstantInt(expressionConstantInt);
        if (result == null) result = caseExpression(expressionConstantInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_CONSTANT_STRING:
      {
        ExpressionConstantString expressionConstantString = (ExpressionConstantString)theEObject;
        T result = caseExpressionConstantString(expressionConstantString);
        if (result == null) result = caseExpression(expressionConstantString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_ENUM_LITERAL:
      {
        ExpressionEnumLiteral expressionEnumLiteral = (ExpressionEnumLiteral)theEObject;
        T result = caseExpressionEnumLiteral(expressionEnumLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_VARIABLE:
      {
        ExpressionVariable expressionVariable = (ExpressionVariable)theEObject;
        T result = caseExpressionVariable(expressionVariable);
        if (result == null) result = caseExpression(expressionVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_ANY:
      {
        ExpressionAny expressionAny = (ExpressionAny)theEObject;
        T result = caseExpressionAny(expressionAny);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_FUNCTION_CALL:
      {
        ExpressionFunctionCall expressionFunctionCall = (ExpressionFunctionCall)theEObject;
        T result = caseExpressionFunctionCall(expressionFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_QUANTIFIER:
      {
        ExpressionQuantifier expressionQuantifier = (ExpressionQuantifier)theEObject;
        T result = caseExpressionQuantifier(expressionQuantifier);
        if (result == null) result = caseExpression(expressionQuantifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.TYPE_ANNOTATION:
      {
        TypeAnnotation typeAnnotation = (TypeAnnotation)theEObject;
        T result = caseTypeAnnotation(typeAnnotation);
        if (result == null) result = caseExpression(typeAnnotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.PAIR:
      {
        Pair pair = (Pair)theEObject;
        T result = casePair(pair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_BINARY:
      {
        ExpressionBinary expressionBinary = (ExpressionBinary)theEObject;
        T result = caseExpressionBinary(expressionBinary);
        if (result == null) result = caseExpression(expressionBinary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_UNARY:
      {
        ExpressionUnary expressionUnary = (ExpressionUnary)theEObject;
        T result = caseExpressionUnary(expressionUnary);
        if (result == null) result = caseExpression(expressionUnary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_AND:
      {
        ExpressionAnd expressionAnd = (ExpressionAnd)theEObject;
        T result = caseExpressionAnd(expressionAnd);
        if (result == null) result = caseExpressionBinary(expressionAnd);
        if (result == null) result = caseExpression(expressionAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_OR:
      {
        ExpressionOr expressionOr = (ExpressionOr)theEObject;
        T result = caseExpressionOr(expressionOr);
        if (result == null) result = caseExpressionBinary(expressionOr);
        if (result == null) result = caseExpression(expressionOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_EQUAL:
      {
        ExpressionEqual expressionEqual = (ExpressionEqual)theEObject;
        T result = caseExpressionEqual(expressionEqual);
        if (result == null) result = caseExpressionBinary(expressionEqual);
        if (result == null) result = caseExpression(expressionEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_NEQUAL:
      {
        ExpressionNEqual expressionNEqual = (ExpressionNEqual)theEObject;
        T result = caseExpressionNEqual(expressionNEqual);
        if (result == null) result = caseExpressionBinary(expressionNEqual);
        if (result == null) result = caseExpression(expressionNEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_GEQ:
      {
        ExpressionGeq expressionGeq = (ExpressionGeq)theEObject;
        T result = caseExpressionGeq(expressionGeq);
        if (result == null) result = caseExpressionBinary(expressionGeq);
        if (result == null) result = caseExpression(expressionGeq);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_GREATER:
      {
        ExpressionGreater expressionGreater = (ExpressionGreater)theEObject;
        T result = caseExpressionGreater(expressionGreater);
        if (result == null) result = caseExpressionBinary(expressionGreater);
        if (result == null) result = caseExpression(expressionGreater);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_LEQ:
      {
        ExpressionLeq expressionLeq = (ExpressionLeq)theEObject;
        T result = caseExpressionLeq(expressionLeq);
        if (result == null) result = caseExpressionBinary(expressionLeq);
        if (result == null) result = caseExpression(expressionLeq);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_LESS:
      {
        ExpressionLess expressionLess = (ExpressionLess)theEObject;
        T result = caseExpressionLess(expressionLess);
        if (result == null) result = caseExpressionBinary(expressionLess);
        if (result == null) result = caseExpression(expressionLess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_ADDITION:
      {
        ExpressionAddition expressionAddition = (ExpressionAddition)theEObject;
        T result = caseExpressionAddition(expressionAddition);
        if (result == null) result = caseExpressionBinary(expressionAddition);
        if (result == null) result = caseExpression(expressionAddition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_SUBTRACTION:
      {
        ExpressionSubtraction expressionSubtraction = (ExpressionSubtraction)theEObject;
        T result = caseExpressionSubtraction(expressionSubtraction);
        if (result == null) result = caseExpressionBinary(expressionSubtraction);
        if (result == null) result = caseExpression(expressionSubtraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MULTIPLY:
      {
        ExpressionMultiply expressionMultiply = (ExpressionMultiply)theEObject;
        T result = caseExpressionMultiply(expressionMultiply);
        if (result == null) result = caseExpressionBinary(expressionMultiply);
        if (result == null) result = caseExpression(expressionMultiply);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_DIVISION:
      {
        ExpressionDivision expressionDivision = (ExpressionDivision)theEObject;
        T result = caseExpressionDivision(expressionDivision);
        if (result == null) result = caseExpressionBinary(expressionDivision);
        if (result == null) result = caseExpression(expressionDivision);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MAXIMUM:
      {
        ExpressionMaximum expressionMaximum = (ExpressionMaximum)theEObject;
        T result = caseExpressionMaximum(expressionMaximum);
        if (result == null) result = caseExpressionBinary(expressionMaximum);
        if (result == null) result = caseExpression(expressionMaximum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MINIMUM:
      {
        ExpressionMinimum expressionMinimum = (ExpressionMinimum)theEObject;
        T result = caseExpressionMinimum(expressionMinimum);
        if (result == null) result = caseExpressionBinary(expressionMinimum);
        if (result == null) result = caseExpression(expressionMinimum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MODULO:
      {
        ExpressionModulo expressionModulo = (ExpressionModulo)theEObject;
        T result = caseExpressionModulo(expressionModulo);
        if (result == null) result = caseExpressionBinary(expressionModulo);
        if (result == null) result = caseExpression(expressionModulo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_POWER:
      {
        ExpressionPower expressionPower = (ExpressionPower)theEObject;
        T result = caseExpressionPower(expressionPower);
        if (result == null) result = caseExpressionBinary(expressionPower);
        if (result == null) result = caseExpression(expressionPower);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_VECTOR:
      {
        ExpressionVector expressionVector = (ExpressionVector)theEObject;
        T result = caseExpressionVector(expressionVector);
        if (result == null) result = caseExpression(expressionVector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ExpressionsPackage.EXPRESSION_MAP:
      {
        ExpressionMap expressionMap = (ExpressionMap)theEObject;
        T result = caseExpressionMap(expressionMap);
        if (result == null) result = caseExpression(expressionMap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionNot(ExpressionNot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionMinus(ExpressionMinus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionPlus(ExpressionPlus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Bracket</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Bracket</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionBracket(ExpressionBracket object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Constant Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Constant Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionConstantBool(ExpressionConstantBool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Constant Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Constant Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionConstantInt(ExpressionConstantInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Constant String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Constant String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionConstantString(ExpressionConstantString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Enum Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Enum Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionEnumLiteral(ExpressionEnumLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionVariable(ExpressionVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Any</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Any</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionAny(ExpressionAny object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionFunctionCall(ExpressionFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Quantifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Quantifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionQuantifier(ExpressionQuantifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeAnnotation(TypeAnnotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePair(Pair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Binary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Binary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionBinary(ExpressionBinary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Unary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Unary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionUnary(ExpressionUnary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionAnd(ExpressionAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionOr(ExpressionOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionEqual(ExpressionEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression NEqual</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression NEqual</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionNEqual(ExpressionNEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Geq</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Geq</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionGeq(ExpressionGeq object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Greater</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Greater</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionGreater(ExpressionGreater object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Leq</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Leq</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionLeq(ExpressionLeq object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Less</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Less</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionLess(ExpressionLess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Addition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Addition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionAddition(ExpressionAddition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Subtraction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Subtraction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionSubtraction(ExpressionSubtraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Multiply</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Multiply</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionMultiply(ExpressionMultiply object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Division</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Division</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionDivision(ExpressionDivision object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Maximum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Maximum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionMaximum(ExpressionMaximum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Minimum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Minimum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionMinimum(ExpressionMinimum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Modulo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Modulo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionModulo(ExpressionModulo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Power</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Power</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionPower(ExpressionPower object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Vector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Vector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionVector(ExpressionVector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionMap(ExpressionMap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ExpressionsSwitch
