/**
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.expressions.expressions.util;

import nl.esi.comma.expressions.expressions.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.esi.comma.expressions.expressions.ExpressionsPackage
 * @generated
 */
public class ExpressionsAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ExpressionsPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionsAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ExpressionsPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionsSwitch<Adapter> modelSwitch =
    new ExpressionsSwitch<Adapter>()
    {
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseExpressionNot(ExpressionNot object)
      {
        return createExpressionNotAdapter();
      }
      @Override
      public Adapter caseExpressionMinus(ExpressionMinus object)
      {
        return createExpressionMinusAdapter();
      }
      @Override
      public Adapter caseExpressionPlus(ExpressionPlus object)
      {
        return createExpressionPlusAdapter();
      }
      @Override
      public Adapter caseExpressionBracket(ExpressionBracket object)
      {
        return createExpressionBracketAdapter();
      }
      @Override
      public Adapter caseExpressionConstantBool(ExpressionConstantBool object)
      {
        return createExpressionConstantBoolAdapter();
      }
      @Override
      public Adapter caseExpressionConstantInt(ExpressionConstantInt object)
      {
        return createExpressionConstantIntAdapter();
      }
      @Override
      public Adapter caseExpressionConstantString(ExpressionConstantString object)
      {
        return createExpressionConstantStringAdapter();
      }
      @Override
      public Adapter caseExpressionEnumLiteral(ExpressionEnumLiteral object)
      {
        return createExpressionEnumLiteralAdapter();
      }
      @Override
      public Adapter caseExpressionVariable(ExpressionVariable object)
      {
        return createExpressionVariableAdapter();
      }
      @Override
      public Adapter caseExpressionAny(ExpressionAny object)
      {
        return createExpressionAnyAdapter();
      }
      @Override
      public Adapter caseExpressionFunctionCall(ExpressionFunctionCall object)
      {
        return createExpressionFunctionCallAdapter();
      }
      @Override
      public Adapter caseExpressionQuantifier(ExpressionQuantifier object)
      {
        return createExpressionQuantifierAdapter();
      }
      @Override
      public Adapter caseTypeAnnotation(TypeAnnotation object)
      {
        return createTypeAnnotationAdapter();
      }
      @Override
      public Adapter casePair(Pair object)
      {
        return createPairAdapter();
      }
      @Override
      public Adapter caseExpressionBinary(ExpressionBinary object)
      {
        return createExpressionBinaryAdapter();
      }
      @Override
      public Adapter caseExpressionUnary(ExpressionUnary object)
      {
        return createExpressionUnaryAdapter();
      }
      @Override
      public Adapter caseExpressionAnd(ExpressionAnd object)
      {
        return createExpressionAndAdapter();
      }
      @Override
      public Adapter caseExpressionOr(ExpressionOr object)
      {
        return createExpressionOrAdapter();
      }
      @Override
      public Adapter caseExpressionEqual(ExpressionEqual object)
      {
        return createExpressionEqualAdapter();
      }
      @Override
      public Adapter caseExpressionNEqual(ExpressionNEqual object)
      {
        return createExpressionNEqualAdapter();
      }
      @Override
      public Adapter caseExpressionGeq(ExpressionGeq object)
      {
        return createExpressionGeqAdapter();
      }
      @Override
      public Adapter caseExpressionGreater(ExpressionGreater object)
      {
        return createExpressionGreaterAdapter();
      }
      @Override
      public Adapter caseExpressionLeq(ExpressionLeq object)
      {
        return createExpressionLeqAdapter();
      }
      @Override
      public Adapter caseExpressionLess(ExpressionLess object)
      {
        return createExpressionLessAdapter();
      }
      @Override
      public Adapter caseExpressionAddition(ExpressionAddition object)
      {
        return createExpressionAdditionAdapter();
      }
      @Override
      public Adapter caseExpressionSubtraction(ExpressionSubtraction object)
      {
        return createExpressionSubtractionAdapter();
      }
      @Override
      public Adapter caseExpressionMultiply(ExpressionMultiply object)
      {
        return createExpressionMultiplyAdapter();
      }
      @Override
      public Adapter caseExpressionDivision(ExpressionDivision object)
      {
        return createExpressionDivisionAdapter();
      }
      @Override
      public Adapter caseExpressionMaximum(ExpressionMaximum object)
      {
        return createExpressionMaximumAdapter();
      }
      @Override
      public Adapter caseExpressionMinimum(ExpressionMinimum object)
      {
        return createExpressionMinimumAdapter();
      }
      @Override
      public Adapter caseExpressionModulo(ExpressionModulo object)
      {
        return createExpressionModuloAdapter();
      }
      @Override
      public Adapter caseExpressionPower(ExpressionPower object)
      {
        return createExpressionPowerAdapter();
      }
      @Override
      public Adapter caseExpressionVector(ExpressionVector object)
      {
        return createExpressionVectorAdapter();
      }
      @Override
      public Adapter caseExpressionMap(ExpressionMap object)
      {
        return createExpressionMapAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionNot <em>Expression Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionNot
   * @generated
   */
  public Adapter createExpressionNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionMinus <em>Expression Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionMinus
   * @generated
   */
  public Adapter createExpressionMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionPlus <em>Expression Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionPlus
   * @generated
   */
  public Adapter createExpressionPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionBracket <em>Expression Bracket</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionBracket
   * @generated
   */
  public Adapter createExpressionBracketAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionConstantBool <em>Expression Constant Bool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionConstantBool
   * @generated
   */
  public Adapter createExpressionConstantBoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionConstantInt <em>Expression Constant Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionConstantInt
   * @generated
   */
  public Adapter createExpressionConstantIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionConstantString <em>Expression Constant String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionConstantString
   * @generated
   */
  public Adapter createExpressionConstantStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionEnumLiteral <em>Expression Enum Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionEnumLiteral
   * @generated
   */
  public Adapter createExpressionEnumLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionVariable <em>Expression Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionVariable
   * @generated
   */
  public Adapter createExpressionVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionAny <em>Expression Any</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionAny
   * @generated
   */
  public Adapter createExpressionAnyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionFunctionCall <em>Expression Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionFunctionCall
   * @generated
   */
  public Adapter createExpressionFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionQuantifier <em>Expression Quantifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionQuantifier
   * @generated
   */
  public Adapter createExpressionQuantifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.TypeAnnotation <em>Type Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.TypeAnnotation
   * @generated
   */
  public Adapter createTypeAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.Pair <em>Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.Pair
   * @generated
   */
  public Adapter createPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionBinary <em>Expression Binary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionBinary
   * @generated
   */
  public Adapter createExpressionBinaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionUnary <em>Expression Unary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionUnary
   * @generated
   */
  public Adapter createExpressionUnaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionAnd <em>Expression And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionAnd
   * @generated
   */
  public Adapter createExpressionAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionOr <em>Expression Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionOr
   * @generated
   */
  public Adapter createExpressionOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionEqual <em>Expression Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionEqual
   * @generated
   */
  public Adapter createExpressionEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionNEqual <em>Expression NEqual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionNEqual
   * @generated
   */
  public Adapter createExpressionNEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionGeq <em>Expression Geq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionGeq
   * @generated
   */
  public Adapter createExpressionGeqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionGreater <em>Expression Greater</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionGreater
   * @generated
   */
  public Adapter createExpressionGreaterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionLeq <em>Expression Leq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionLeq
   * @generated
   */
  public Adapter createExpressionLeqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionLess <em>Expression Less</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionLess
   * @generated
   */
  public Adapter createExpressionLessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionAddition <em>Expression Addition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionAddition
   * @generated
   */
  public Adapter createExpressionAdditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionSubtraction <em>Expression Subtraction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionSubtraction
   * @generated
   */
  public Adapter createExpressionSubtractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionMultiply <em>Expression Multiply</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionMultiply
   * @generated
   */
  public Adapter createExpressionMultiplyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionDivision <em>Expression Division</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionDivision
   * @generated
   */
  public Adapter createExpressionDivisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionMaximum <em>Expression Maximum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionMaximum
   * @generated
   */
  public Adapter createExpressionMaximumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionMinimum <em>Expression Minimum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionMinimum
   * @generated
   */
  public Adapter createExpressionMinimumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionModulo <em>Expression Modulo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionModulo
   * @generated
   */
  public Adapter createExpressionModuloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionPower <em>Expression Power</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionPower
   * @generated
   */
  public Adapter createExpressionPowerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionVector <em>Expression Vector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionVector
   * @generated
   */
  public Adapter createExpressionVectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.esi.comma.expressions.expressions.ExpressionMap <em>Expression Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.esi.comma.expressions.expressions.ExpressionMap
   * @generated
   */
  public Adapter createExpressionMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ExpressionsAdapterFactory
