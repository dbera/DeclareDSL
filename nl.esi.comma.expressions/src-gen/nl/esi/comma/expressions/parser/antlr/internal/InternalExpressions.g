/*
 * generated by Xtext 2.25.0
 */
grammar InternalExpressions;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.esi.comma.expressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.esi.comma.expressions.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.esi.comma.expressions.services.ExpressionsGrammarAccess;

}

@parser::members {

 	private ExpressionsGrammarAccess grammarAccess;

    public InternalExpressionsParser(TokenStream input, ExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Variable";
   	}

   	@Override
   	protected ExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getExpressionLevel1ParserRuleCall());
	}
	this_ExpressionLevel1_0=ruleExpressionLevel1
	{
		$current = $this_ExpressionLevel1_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpressionLevel1
entryRuleExpressionLevel1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel1Rule()); }
	iv_ruleExpressionLevel1=ruleExpressionLevel1
	{ $current=$iv_ruleExpressionLevel1.current; }
	EOF;

// Rule ExpressionLevel1
ruleExpressionLevel1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel1Access().getExpressionLevel2ParserRuleCall_0());
		}
		this_ExpressionLevel2_0=ruleExpressionLevel2
		{
			$current = $this_ExpressionLevel2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0(),
							$current);
					}
				)
				(
					otherlv_2='AND'
					{
						newLeafNode(otherlv_2, grammarAccess.getExpressionLevel1Access().getANDKeyword_1_0_1_0());
					}
					    |
					otherlv_3='and'
					{
						newLeafNode(otherlv_3, grammarAccess.getExpressionLevel1Access().getAndKeyword_1_0_1_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_0_2_0());
						}
						lv_right_4_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_4_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0(),
							$current);
					}
				)
				(
					otherlv_6='OR'
					{
						newLeafNode(otherlv_6, grammarAccess.getExpressionLevel1Access().getORKeyword_1_1_1_0());
					}
					    |
					otherlv_7='or'
					{
						newLeafNode(otherlv_7, grammarAccess.getExpressionLevel1Access().getOrKeyword_1_1_1_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_1_2_0());
						}
						lv_right_8_0=ruleExpressionLevel2
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel1Rule());
							}
							set(
								$current,
								"right",
								lv_right_8_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel2");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel2
entryRuleExpressionLevel2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel2Rule()); }
	iv_ruleExpressionLevel2=ruleExpressionLevel2
	{ $current=$iv_ruleExpressionLevel2.current; }
	EOF;

// Rule ExpressionLevel2
ruleExpressionLevel2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel2Access().getExpressionLevel3ParserRuleCall_0());
		}
		this_ExpressionLevel3_0=ruleExpressionLevel3
		{
			$current = $this_ExpressionLevel3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='=='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel2Access().getEqualsSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='!='
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel2Access().getExclamationMarkEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel3
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel2Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel3");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel3
entryRuleExpressionLevel3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel3Rule()); }
	iv_ruleExpressionLevel3=ruleExpressionLevel3
	{ $current=$iv_ruleExpressionLevel3.current; }
	EOF;

// Rule ExpressionLevel3
ruleExpressionLevel3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel3Access().getExpressionLevel4ParserRuleCall_0());
		}
		this_ExpressionLevel4_0=ruleExpressionLevel4
		{
			$current = $this_ExpressionLevel4_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='>='
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel3Access().getGreaterThanSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='>'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel3Access().getGreaterThanSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='<='
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionLevel3Access().getLessThanSignEqualsSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='<'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpressionLevel3Access().getLessThanSignKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpressionLevel4
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel3Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel4");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel4
entryRuleExpressionLevel4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel4Rule()); }
	iv_ruleExpressionLevel4=ruleExpressionLevel4
	{ $current=$iv_ruleExpressionLevel4.current; }
	EOF;

// Rule ExpressionLevel4
ruleExpressionLevel4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel4Access().getExpressionLevel5ParserRuleCall_0());
		}
		this_ExpressionLevel5_0=ruleExpressionLevel5
		{
			$current = $this_ExpressionLevel5_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel4Access().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel4Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='-'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel4Access().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel5
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel4Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel5");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel5
entryRuleExpressionLevel5 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel5Rule()); }
	iv_ruleExpressionLevel5=ruleExpressionLevel5
	{ $current=$iv_ruleExpressionLevel5.current; }
	EOF;

// Rule ExpressionLevel5
ruleExpressionLevel5 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel5Access().getExpressionLevel6ParserRuleCall_0());
		}
		this_ExpressionLevel6_0=ruleExpressionLevel6
		{
			$current = $this_ExpressionLevel6_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionLevel5Access().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='/'
				{
					newLeafNode(otherlv_5, grammarAccess.getExpressionLevel5Access().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='max'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionLevel5Access().getMaxKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11='min'
				{
					newLeafNode(otherlv_11, grammarAccess.getExpressionLevel5Access().getMinKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0(),
							$current);
					}
				)
				otherlv_14='mod'
				{
					newLeafNode(otherlv_14, grammarAccess.getExpressionLevel5Access().getModKeyword_1_4_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_4_2_0());
						}
						lv_right_15_0=ruleExpressionLevel6
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionLevel5Rule());
							}
							set(
								$current,
								"right",
								lv_right_15_0,
								"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExpressionLevel6
entryRuleExpressionLevel6 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel6Rule()); }
	iv_ruleExpressionLevel6=ruleExpressionLevel6
	{ $current=$iv_ruleExpressionLevel6.current; }
	EOF;

// Rule ExpressionLevel6
ruleExpressionLevel6 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel6Access().getExpressionLevel7ParserRuleCall_0());
		}
		this_ExpressionLevel7_0=ruleExpressionLevel7
		{
			$current = $this_ExpressionLevel7_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionLevel6Access().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionLevel6Access().getRightExpressionLevel6ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpressionLevel6
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionLevel6Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"nl.esi.comma.expressions.Expressions.ExpressionLevel6");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpressionLevel7
entryRuleExpressionLevel7 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel7Rule()); }
	iv_ruleExpressionLevel7=ruleExpressionLevel7
	{ $current=$iv_ruleExpressionLevel7.current; }
	EOF;

// Rule ExpressionLevel7
ruleExpressionLevel7 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionNotParserRuleCall_0());
		}
		this_ExpressionNot_0=ruleExpressionNot
		{
			$current = $this_ExpressionNot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionMinusParserRuleCall_1());
		}
		this_ExpressionMinus_1=ruleExpressionMinus
		{
			$current = $this_ExpressionMinus_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionPlusParserRuleCall_2());
		}
		this_ExpressionPlus_2=ruleExpressionPlus
		{
			$current = $this_ExpressionPlus_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel7Access().getExpressionLevel8ParserRuleCall_3());
		}
		this_ExpressionLevel8_3=ruleExpressionLevel8
		{
			$current = $this_ExpressionLevel8_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionNot
entryRuleExpressionNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionNotRule()); }
	iv_ruleExpressionNot=ruleExpressionNot
	{ $current=$iv_ruleExpressionNot.current; }
	EOF;

// Rule ExpressionNot
ruleExpressionNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='NOT'
			{
				newLeafNode(otherlv_0, grammarAccess.getExpressionNotAccess().getNOTKeyword_0_0());
			}
			    |
			otherlv_1='not'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionNotAccess().getNotKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionNotAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_2_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionNotRule());
					}
					set(
						$current,
						"sub",
						lv_sub_2_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionMinus
entryRuleExpressionMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMinusRule()); }
	iv_ruleExpressionMinus=ruleExpressionMinus
	{ $current=$iv_ruleExpressionMinus.current; }
	EOF;

// Rule ExpressionMinus
ruleExpressionMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionMinusAccess().getHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionMinusAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionMinusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionPlus
entryRuleExpressionPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionPlusRule()); }
	iv_ruleExpressionPlus=ruleExpressionPlus
	{ $current=$iv_ruleExpressionPlus.current; }
	EOF;

// Rule ExpressionPlus
ruleExpressionPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionPlusAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionPlusAccess().getSubExpressionLevel8ParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpressionLevel8
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionPlusRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.ExpressionLevel8");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLevel8
entryRuleExpressionLevel8 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLevel8Rule()); }
	iv_ruleExpressionLevel8=ruleExpressionLevel8
	{ $current=$iv_ruleExpressionLevel8.current; }
	EOF;

// Rule ExpressionLevel8
ruleExpressionLevel8 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionBracketParserRuleCall_0());
		}
		this_ExpressionBracket_0=ruleExpressionBracket
		{
			$current = $this_ExpressionBracket_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantBoolParserRuleCall_1());
		}
		this_ExpressionConstantBool_1=ruleExpressionConstantBool
		{
			$current = $this_ExpressionConstantBool_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantIntParserRuleCall_2());
		}
		this_ExpressionConstantInt_2=ruleExpressionConstantInt
		{
			$current = $this_ExpressionConstantInt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionConstantStringParserRuleCall_3());
		}
		this_ExpressionConstantString_3=ruleExpressionConstantString
		{
			$current = $this_ExpressionConstantString_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionVariableParserRuleCall_4());
		}
		this_ExpressionVariable_4=ruleExpressionVariable
		{
			$current = $this_ExpressionVariable_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionQuantifierParserRuleCall_5());
		}
		this_ExpressionQuantifier_5=ruleExpressionQuantifier
		{
			$current = $this_ExpressionQuantifier_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLevel8Access().getExpressionTypeAnnotatedParserRuleCall_6());
		}
		this_ExpressionTypeAnnotated_6=ruleExpressionTypeAnnotated
		{
			$current = $this_ExpressionTypeAnnotated_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionBracket
entryRuleExpressionBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionBracketRule()); }
	iv_ruleExpressionBracket=ruleExpressionBracket
	{ $current=$iv_ruleExpressionBracket.current; }
	EOF;

// Rule ExpressionBracket
ruleExpressionBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionBracketAccess().getSubExpressionParserRuleCall_1_0());
				}
				lv_sub_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionBracketRule());
					}
					set(
						$current,
						"sub",
						lv_sub_1_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExpressionConstantBool
entryRuleExpressionConstantBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantBoolRule()); }
	iv_ruleExpressionConstantBool=ruleExpressionConstantBool
	{ $current=$iv_ruleExpressionConstantBool.current; }
	EOF;

// Rule ExpressionConstantBool
ruleExpressionConstantBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOL_LITERAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantBoolAccess().getValueBOOL_LITERALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantBoolRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"nl.esi.comma.expressions.Expressions.BOOL_LITERAL");
			}
		)
	)
;

// Entry rule entryRuleExpressionConstantInt
entryRuleExpressionConstantInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantIntRule()); }
	iv_ruleExpressionConstantInt=ruleExpressionConstantInt
	{ $current=$iv_ruleExpressionConstantInt.current; }
	EOF;

// Rule ExpressionConstantInt
ruleExpressionConstantInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantIntAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantIntRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleExpressionConstantString
entryRuleExpressionConstantString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstantStringRule()); }
	iv_ruleExpressionConstantString=ruleExpressionConstantString
	{ $current=$iv_ruleExpressionConstantString.current; }
	EOF;

// Rule ExpressionConstantString
ruleExpressionConstantString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getExpressionConstantStringAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionConstantStringRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleExpressionVariable
entryRuleExpressionVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionVariableRule()); }
	iv_ruleExpressionVariable=ruleExpressionVariable
	{ $current=$iv_ruleExpressionVariable.current; }
	EOF;

// Rule ExpressionVariable
ruleExpressionVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getExpressionVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExpressionQuantifier
entryRuleExpressionQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionQuantifierRule()); }
	iv_ruleExpressionQuantifier=ruleExpressionQuantifier
	{ $current=$iv_ruleExpressionQuantifier.current; }
	EOF;

// Rule ExpressionQuantifier
ruleExpressionQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getQuantifierQUANTIFIEREnumRuleCall_0_0());
				}
				lv_quantifier_0_0=ruleQUANTIFIER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"quantifier",
						lv_quantifier_0_0,
						"nl.esi.comma.expressions.Expressions.QUANTIFIER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExpressionQuantifierAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getIteratorVariableParserRuleCall_2_0());
				}
				lv_iterator_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"iterator",
						lv_iterator_2_0,
						"nl.esi.comma.expressions.Expressions.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getExpressionQuantifierAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getCollectionExpressionParserRuleCall_4_0());
				}
				lv_collection_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"collection",
						lv_collection_4_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getExpressionQuantifierAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionQuantifierAccess().getConditionExpressionParserRuleCall_6_0());
				}
				lv_condition_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionQuantifierRule());
					}
					set(
						$current,
						"condition",
						lv_condition_6_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExpressionQuantifierAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExpressionTypeAnnotated
entryRuleExpressionTypeAnnotated returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionTypeAnnotatedRule()); }
	iv_ruleExpressionTypeAnnotated=ruleExpressionTypeAnnotated
	{ $current=$iv_ruleExpressionTypeAnnotated.current; }
	EOF;

// Rule ExpressionTypeAnnotated
ruleExpressionTypeAnnotated returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getTypeAnnotationParserRuleCall_0());
		}
		this_TypeAnnotation_0=ruleTypeAnnotation
		{
			$current = $this_TypeAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionTypeAnnotatedAccess().getExpressionVectorTypeAnnotationAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionTypeAnnotatedAccess().getLeftSquareBracketKeyword_1_0_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsExpressionParserRuleCall_1_0_2_0_0());
							}
							lv_elements_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
								}
								add(
									$current,
									"elements",
									lv_elements_3_0,
									"nl.esi.comma.expressions.Expressions.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getExpressionTypeAnnotatedAccess().getCommaKeyword_1_0_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getElementsExpressionParserRuleCall_1_0_2_1_1_0());
								}
								lv_elements_5_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
									}
									add(
										$current,
										"elements",
										lv_elements_5_0,
										"nl.esi.comma.expressions.Expressions.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getExpressionTypeAnnotatedAccess().getRightSquareBracketKeyword_1_0_3());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionTypeAnnotatedAccess().getExpressionMapTypeAnnotationAction_1_1_0(),
							$current);
					}
				)
				otherlv_8='{'
				{
					newLeafNode(otherlv_8, grammarAccess.getExpressionTypeAnnotatedAccess().getLeftCurlyBracketKeyword_1_1_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsPairParserRuleCall_1_1_2_0_0());
							}
							lv_pairs_9_0=rulePair
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
								}
								add(
									$current,
									"pairs",
									lv_pairs_9_0,
									"nl.esi.comma.expressions.Expressions.Pair");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_10=','
						{
							newLeafNode(otherlv_10, grammarAccess.getExpressionTypeAnnotatedAccess().getCommaKeyword_1_1_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getExpressionTypeAnnotatedAccess().getPairsPairParserRuleCall_1_1_2_1_1_0());
								}
								lv_pairs_11_0=rulePair
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getExpressionTypeAnnotatedRule());
									}
									add(
										$current,
										"pairs",
										lv_pairs_11_0,
										"nl.esi.comma.expressions.Expressions.Pair");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_12='}'
				{
					newLeafNode(otherlv_12, grammarAccess.getExpressionTypeAnnotatedAccess().getRightCurlyBracketKeyword_1_1_3());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeAnnotation
entryRuleTypeAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeAnnotationRule()); }
	iv_ruleTypeAnnotation=ruleTypeAnnotation
	{ $current=$iv_ruleTypeAnnotation.current; }
	EOF;

// Rule TypeAnnotation
ruleTypeAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAnnotationAccess().getLessThanSignKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getTypeAnnotationAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAnnotationAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRulePair
entryRulePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	iv_rulePair=rulePair
	{ $current=$iv_rulePair.current; }
	EOF;

// Rule Pair
rulePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPairAccess().getKeyExpressionParserRuleCall_0_0());
				}
				lv_key_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPairRule());
					}
					set(
						$current,
						"key",
						lv_key_0_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPairAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPairAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPairRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"nl.esi.comma.expressions.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule QUANTIFIER
ruleQUANTIFIER returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='exists'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getEXISTSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getQUANTIFIERAccess().getEXISTSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='forAll'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getFORALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getQUANTIFIERAccess().getFORALLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='delete'
			{
				$current = grammarAccess.getQUANTIFIERAccess().getDELETEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getQUANTIFIERAccess().getDELETEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_BOOL_LITERAL : ('true'|'false'|'TRUE'|'FALSE'|'True'|'False');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
