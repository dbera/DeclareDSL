/*
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.expressions.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.esi.comma.expressions.expressions.ExpressionAddition;
import nl.esi.comma.expressions.expressions.ExpressionAnd;
import nl.esi.comma.expressions.expressions.ExpressionAny;
import nl.esi.comma.expressions.expressions.ExpressionBinary;
import nl.esi.comma.expressions.expressions.ExpressionBracket;
import nl.esi.comma.expressions.expressions.ExpressionConstantBool;
import nl.esi.comma.expressions.expressions.ExpressionConstantInt;
import nl.esi.comma.expressions.expressions.ExpressionConstantString;
import nl.esi.comma.expressions.expressions.ExpressionDivision;
import nl.esi.comma.expressions.expressions.ExpressionEnumLiteral;
import nl.esi.comma.expressions.expressions.ExpressionEqual;
import nl.esi.comma.expressions.expressions.ExpressionFunctionCall;
import nl.esi.comma.expressions.expressions.ExpressionGeq;
import nl.esi.comma.expressions.expressions.ExpressionGreater;
import nl.esi.comma.expressions.expressions.ExpressionLeq;
import nl.esi.comma.expressions.expressions.ExpressionLess;
import nl.esi.comma.expressions.expressions.ExpressionMap;
import nl.esi.comma.expressions.expressions.ExpressionMaximum;
import nl.esi.comma.expressions.expressions.ExpressionMinimum;
import nl.esi.comma.expressions.expressions.ExpressionMinus;
import nl.esi.comma.expressions.expressions.ExpressionModulo;
import nl.esi.comma.expressions.expressions.ExpressionMultiply;
import nl.esi.comma.expressions.expressions.ExpressionNEqual;
import nl.esi.comma.expressions.expressions.ExpressionNot;
import nl.esi.comma.expressions.expressions.ExpressionOr;
import nl.esi.comma.expressions.expressions.ExpressionPlus;
import nl.esi.comma.expressions.expressions.ExpressionPower;
import nl.esi.comma.expressions.expressions.ExpressionQuantifier;
import nl.esi.comma.expressions.expressions.ExpressionSubtraction;
import nl.esi.comma.expressions.expressions.ExpressionUnary;
import nl.esi.comma.expressions.expressions.ExpressionVariable;
import nl.esi.comma.expressions.expressions.ExpressionVector;
import nl.esi.comma.expressions.expressions.ExpressionsPackage;
import nl.esi.comma.expressions.expressions.Pair;
import nl.esi.comma.expressions.expressions.TypeAnnotation;
import nl.esi.comma.expressions.expressions.Variable;
import nl.esi.comma.expressions.services.ExpressionsGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ExpressionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ExpressionsPackage.EXPRESSION_ADDITION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionAddition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()) {
					sequence_ExpressionLevel4(context, (ExpressionAddition) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_AND:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionAnd) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()) {
					sequence_ExpressionLevel1(context, (ExpressionAnd) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_ANY:
				sequence_ExpressionAny(context, (ExpressionAny) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_BINARY:
				sequence_ExpressionBinary(context, (ExpressionBinary) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_BRACKET:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionBracket) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionLevel8Rule()
						|| rule == grammarAccess.getExpressionBracketRule()) {
					sequence_ExpressionBracket(context, (ExpressionBracket) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_CONSTANT_BOOL:
				sequence_ExpressionConstantBool(context, (ExpressionConstantBool) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_CONSTANT_INT:
				sequence_ExpressionConstantInt(context, (ExpressionConstantInt) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_CONSTANT_STRING:
				sequence_ExpressionConstantString(context, (ExpressionConstantString) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_DIVISION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionDivision) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionDivision) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_ENUM_LITERAL:
				sequence_ExpressionEnumLiteral(context, (ExpressionEnumLiteral) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_EQUAL:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()) {
					sequence_ExpressionLevel2(context, (ExpressionEqual) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_FUNCTION_CALL:
				sequence_ExpressionFunctionCall(context, (ExpressionFunctionCall) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_GEQ:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionGeq) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionGeq) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_GREATER:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionGreater) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionGreater) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_LEQ:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionLeq) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionLeq) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_LESS:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionLess) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()) {
					sequence_ExpressionLevel3(context, (ExpressionLess) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MAP:
				sequence_ExpressionTypeAnnotated(context, (ExpressionMap) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_MAXIMUM:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMaximum) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMaximum) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MINIMUM:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMinimum) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMinimum) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MINUS:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionMinus) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionMinusRule()) {
					sequence_ExpressionMinus(context, (ExpressionMinus) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MODULO:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionModulo) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionModulo) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_MULTIPLY:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionMultiply) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()) {
					sequence_ExpressionLevel5(context, (ExpressionMultiply) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_NEQUAL:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionNEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()) {
					sequence_ExpressionLevel2(context, (ExpressionNEqual) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_NOT:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionNot) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionNotRule()) {
					sequence_ExpressionNot(context, (ExpressionNot) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_OR:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionOr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()) {
					sequence_ExpressionLevel1(context, (ExpressionOr) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_PLUS:
				if (rule == grammarAccess.getConcreteExpressionUnaryRule()) {
					sequence_ConcreteExpressionUnary(context, (ExpressionPlus) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()
						|| action == grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0()
						|| rule == grammarAccess.getExpressionLevel7Rule()
						|| rule == grammarAccess.getExpressionPlusRule()) {
					sequence_ExpressionPlus(context, (ExpressionPlus) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_POWER:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionPower) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel5Rule()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0()
						|| action == grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0()
						|| rule == grammarAccess.getExpressionLevel6Rule()) {
					sequence_ExpressionLevel6(context, (ExpressionPower) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_QUANTIFIER:
				sequence_ExpressionQuantifier(context, (ExpressionQuantifier) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_SUBTRACTION:
				if (rule == grammarAccess.getConcreteExpressionBinaryRule()) {
					sequence_ConcreteExpressionBinary(context, (ExpressionSubtraction) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getExpressionLevel1Rule()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel2Rule()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0()
						|| rule == grammarAccess.getExpressionLevel3Rule()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0()
						|| action == grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0()
						|| rule == grammarAccess.getExpressionLevel4Rule()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0()
						|| action == grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0()) {
					sequence_ExpressionLevel4(context, (ExpressionSubtraction) semanticObject); 
					return; 
				}
				else break;
			case ExpressionsPackage.EXPRESSION_UNARY:
				sequence_ExpressionUnary(context, (ExpressionUnary) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_VARIABLE:
				sequence_ExpressionVariable(context, (ExpressionVariable) semanticObject); 
				return; 
			case ExpressionsPackage.EXPRESSION_VECTOR:
				sequence_ExpressionTypeAnnotated(context, (ExpressionVector) semanticObject); 
				return; 
			case ExpressionsPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case ExpressionsPackage.TYPE_ANNOTATION:
				sequence_TypeAnnotation(context, (TypeAnnotation) semanticObject); 
				return; 
			case ExpressionsPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionAddition
	 *
	 * Constraint:
	 *     {ExpressionAddition}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionAddition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionAnd
	 *
	 * Constraint:
	 *     {ExpressionAnd}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionAnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionDivision
	 *
	 * Constraint:
	 *     {ExpressionDivision}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionDivision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionEqual
	 *
	 * Constraint:
	 *     {ExpressionEqual}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionEqual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionGeq
	 *
	 * Constraint:
	 *     {ExpressionGeq}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionGeq semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionGreater
	 *
	 * Constraint:
	 *     {ExpressionGreater}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionGreater semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionLeq
	 *
	 * Constraint:
	 *     {ExpressionLeq}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionLeq semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionLess
	 *
	 * Constraint:
	 *     {ExpressionLess}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionLess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionMaximum
	 *
	 * Constraint:
	 *     {ExpressionMaximum}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionMaximum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionMinimum
	 *
	 * Constraint:
	 *     {ExpressionMinimum}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionMinimum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionModulo
	 *
	 * Constraint:
	 *     {ExpressionModulo}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionModulo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionMultiply
	 *
	 * Constraint:
	 *     {ExpressionMultiply}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionMultiply semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionNEqual
	 *
	 * Constraint:
	 *     {ExpressionNEqual}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionNEqual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionOr
	 *
	 * Constraint:
	 *     {ExpressionOr}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionOr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionPower
	 *
	 * Constraint:
	 *     {ExpressionPower}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionPower semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionBinary returns ExpressionSubtraction
	 *
	 * Constraint:
	 *     {ExpressionSubtraction}
	 */
	protected void sequence_ConcreteExpressionBinary(ISerializationContext context, ExpressionSubtraction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionUnary returns ExpressionBracket
	 *
	 * Constraint:
	 *     {ExpressionBracket}
	 */
	protected void sequence_ConcreteExpressionUnary(ISerializationContext context, ExpressionBracket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionUnary returns ExpressionMinus
	 *
	 * Constraint:
	 *     {ExpressionMinus}
	 */
	protected void sequence_ConcreteExpressionUnary(ISerializationContext context, ExpressionMinus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionUnary returns ExpressionNot
	 *
	 * Constraint:
	 *     {ExpressionNot}
	 */
	protected void sequence_ConcreteExpressionUnary(ISerializationContext context, ExpressionNot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcreteExpressionUnary returns ExpressionPlus
	 *
	 * Constraint:
	 *     {ExpressionPlus}
	 */
	protected void sequence_ConcreteExpressionUnary(ISerializationContext context, ExpressionPlus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionAny returns ExpressionAny
	 *
	 * Constraint:
	 *     {ExpressionAny}
	 */
	protected void sequence_ExpressionAny(ISerializationContext context, ExpressionAny semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionBinary returns ExpressionBinary
	 *
	 * Constraint:
	 *     {ExpressionBinary}
	 */
	protected void sequence_ExpressionBinary(ISerializationContext context, ExpressionBinary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionBracket
	 *     ExpressionLevel1 returns ExpressionBracket
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionBracket
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionBracket
	 *     ExpressionLevel2 returns ExpressionBracket
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionBracket
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionBracket
	 *     ExpressionLevel3 returns ExpressionBracket
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionBracket
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionBracket
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionBracket
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionBracket
	 *     ExpressionLevel4 returns ExpressionBracket
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionBracket
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionBracket
	 *     ExpressionLevel5 returns ExpressionBracket
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionBracket
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionBracket
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionBracket
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionBracket
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionBracket
	 *     ExpressionLevel6 returns ExpressionBracket
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionBracket
	 *     ExpressionLevel7 returns ExpressionBracket
	 *     ExpressionLevel8 returns ExpressionBracket
	 *     ExpressionBracket returns ExpressionBracket
	 *
	 * Constraint:
	 *     sub=Expression
	 */
	protected void sequence_ExpressionBracket(ISerializationContext context, ExpressionBracket semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionBracketAccess().getSubExpressionParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionConstantBool
	 *     ExpressionLevel1 returns ExpressionConstantBool
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionConstantBool
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel2 returns ExpressionConstantBool
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionConstantBool
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel3 returns ExpressionConstantBool
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionConstantBool
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionConstantBool
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionConstantBool
	 *     ExpressionLevel4 returns ExpressionConstantBool
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionConstantBool
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel5 returns ExpressionConstantBool
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionConstantBool
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionConstantBool
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionConstantBool
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionConstantBool
	 *     ExpressionLevel6 returns ExpressionConstantBool
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionConstantBool
	 *     ExpressionLevel7 returns ExpressionConstantBool
	 *     ExpressionLevel8 returns ExpressionConstantBool
	 *     ExpressionConstantBool returns ExpressionConstantBool
	 *
	 * Constraint:
	 *     value=BOOL_LITERAL
	 */
	protected void sequence_ExpressionConstantBool(ISerializationContext context, ExpressionConstantBool semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_BOOL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_BOOL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionConstantBoolAccess().getValueBOOL_LITERALTerminalRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionConstantInt
	 *     ExpressionLevel1 returns ExpressionConstantInt
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionConstantInt
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel2 returns ExpressionConstantInt
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionConstantInt
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel3 returns ExpressionConstantInt
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionConstantInt
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionConstantInt
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionConstantInt
	 *     ExpressionLevel4 returns ExpressionConstantInt
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionConstantInt
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel5 returns ExpressionConstantInt
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionConstantInt
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionConstantInt
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionConstantInt
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionConstantInt
	 *     ExpressionLevel6 returns ExpressionConstantInt
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionConstantInt
	 *     ExpressionLevel7 returns ExpressionConstantInt
	 *     ExpressionLevel8 returns ExpressionConstantInt
	 *     ExpressionConstantInt returns ExpressionConstantInt
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_ExpressionConstantInt(ISerializationContext context, ExpressionConstantInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_INT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_INT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionConstantIntAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionConstantString
	 *     ExpressionLevel1 returns ExpressionConstantString
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionConstantString
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionConstantString
	 *     ExpressionLevel2 returns ExpressionConstantString
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionConstantString
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionConstantString
	 *     ExpressionLevel3 returns ExpressionConstantString
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionConstantString
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionConstantString
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionConstantString
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionConstantString
	 *     ExpressionLevel4 returns ExpressionConstantString
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionConstantString
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionConstantString
	 *     ExpressionLevel5 returns ExpressionConstantString
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionConstantString
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionConstantString
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionConstantString
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionConstantString
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionConstantString
	 *     ExpressionLevel6 returns ExpressionConstantString
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionConstantString
	 *     ExpressionLevel7 returns ExpressionConstantString
	 *     ExpressionLevel8 returns ExpressionConstantString
	 *     ExpressionConstantString returns ExpressionConstantString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ExpressionConstantString(ISerializationContext context, ExpressionConstantString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_CONSTANT_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionConstantStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionEnumLiteral returns ExpressionEnumLiteral
	 *
	 * Constraint:
	 *     (type=ID literal=ID)
	 */
	protected void sequence_ExpressionEnumLiteral(ISerializationContext context, ExpressionEnumLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_ENUM_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_ENUM_LITERAL__TYPE));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_ENUM_LITERAL__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_ENUM_LITERAL__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionEnumLiteralAccess().getTypeIDTerminalRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getExpressionEnumLiteralAccess().getLiteralIDTerminalRuleCall_2_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionFunctionCall returns ExpressionFunctionCall
	 *
	 * Constraint:
	 *     (functionName=ID (args+=Expression args+=Expression*)?)
	 */
	protected void sequence_ExpressionFunctionCall(ISerializationContext context, ExpressionFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionAnd
	 *     ExpressionLevel1 returns ExpressionAnd
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionAnd
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionAnd
	 *
	 * Constraint:
	 *     (left=ExpressionLevel1_ExpressionAnd_1_0_0 right=ExpressionLevel2)
	 */
	protected void sequence_ExpressionLevel1(ISerializationContext context, ExpressionAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel1Access().getExpressionAndLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionOr
	 *     ExpressionLevel1 returns ExpressionOr
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionOr
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionOr
	 *
	 * Constraint:
	 *     (left=ExpressionLevel1_ExpressionOr_1_1_0 right=ExpressionLevel2)
	 */
	protected void sequence_ExpressionLevel1(ISerializationContext context, ExpressionOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel1Access().getExpressionOrLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel1Access().getRightExpressionLevel2ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionEqual
	 *     ExpressionLevel1 returns ExpressionEqual
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionEqual
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionEqual
	 *     ExpressionLevel2 returns ExpressionEqual
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionEqual
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionEqual
	 *
	 * Constraint:
	 *     (left=ExpressionLevel2_ExpressionEqual_1_0_0 right=ExpressionLevel3)
	 */
	protected void sequence_ExpressionLevel2(ISerializationContext context, ExpressionEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel2Access().getExpressionEqualLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionNEqual
	 *     ExpressionLevel1 returns ExpressionNEqual
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionNEqual
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionNEqual
	 *     ExpressionLevel2 returns ExpressionNEqual
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionNEqual
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionNEqual
	 *
	 * Constraint:
	 *     (left=ExpressionLevel2_ExpressionNEqual_1_1_0 right=ExpressionLevel3)
	 */
	protected void sequence_ExpressionLevel2(ISerializationContext context, ExpressionNEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel2Access().getExpressionNEqualLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel2Access().getRightExpressionLevel3ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionGeq
	 *     ExpressionLevel1 returns ExpressionGeq
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionGeq
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionGeq
	 *     ExpressionLevel2 returns ExpressionGeq
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionGeq
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionGeq
	 *     ExpressionLevel3 returns ExpressionGeq
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionGeq
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionGeq
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionGeq
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionGeq
	 *
	 * Constraint:
	 *     (left=ExpressionLevel3_ExpressionGeq_1_0_0 right=ExpressionLevel4)
	 */
	protected void sequence_ExpressionLevel3(ISerializationContext context, ExpressionGeq semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel3Access().getExpressionGeqLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionGreater
	 *     ExpressionLevel1 returns ExpressionGreater
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionGreater
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionGreater
	 *     ExpressionLevel2 returns ExpressionGreater
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionGreater
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionGreater
	 *     ExpressionLevel3 returns ExpressionGreater
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionGreater
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionGreater
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionGreater
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionGreater
	 *
	 * Constraint:
	 *     (left=ExpressionLevel3_ExpressionGreater_1_1_0 right=ExpressionLevel4)
	 */
	protected void sequence_ExpressionLevel3(ISerializationContext context, ExpressionGreater semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel3Access().getExpressionGreaterLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionLeq
	 *     ExpressionLevel1 returns ExpressionLeq
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionLeq
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionLeq
	 *     ExpressionLevel2 returns ExpressionLeq
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionLeq
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionLeq
	 *     ExpressionLevel3 returns ExpressionLeq
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionLeq
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionLeq
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionLeq
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionLeq
	 *
	 * Constraint:
	 *     (left=ExpressionLevel3_ExpressionLeq_1_2_0 right=ExpressionLevel4)
	 */
	protected void sequence_ExpressionLevel3(ISerializationContext context, ExpressionLeq semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel3Access().getExpressionLeqLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionLess
	 *     ExpressionLevel1 returns ExpressionLess
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionLess
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionLess
	 *     ExpressionLevel2 returns ExpressionLess
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionLess
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionLess
	 *     ExpressionLevel3 returns ExpressionLess
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionLess
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionLess
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionLess
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionLess
	 *
	 * Constraint:
	 *     (left=ExpressionLevel3_ExpressionLess_1_3_0 right=ExpressionLevel4)
	 */
	protected void sequence_ExpressionLevel3(ISerializationContext context, ExpressionLess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel3Access().getExpressionLessLeftAction_1_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel3Access().getRightExpressionLevel4ParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionAddition
	 *     ExpressionLevel1 returns ExpressionAddition
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionAddition
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionAddition
	 *     ExpressionLevel2 returns ExpressionAddition
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionAddition
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionAddition
	 *     ExpressionLevel3 returns ExpressionAddition
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionAddition
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionAddition
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionAddition
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionAddition
	 *     ExpressionLevel4 returns ExpressionAddition
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionAddition
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionAddition
	 *
	 * Constraint:
	 *     (left=ExpressionLevel4_ExpressionAddition_1_0_0 right=ExpressionLevel5)
	 */
	protected void sequence_ExpressionLevel4(ISerializationContext context, ExpressionAddition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel4Access().getExpressionAdditionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionSubtraction
	 *     ExpressionLevel1 returns ExpressionSubtraction
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionSubtraction
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionSubtraction
	 *     ExpressionLevel2 returns ExpressionSubtraction
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionSubtraction
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionSubtraction
	 *     ExpressionLevel3 returns ExpressionSubtraction
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionSubtraction
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionSubtraction
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionSubtraction
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionSubtraction
	 *     ExpressionLevel4 returns ExpressionSubtraction
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionSubtraction
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionSubtraction
	 *
	 * Constraint:
	 *     (left=ExpressionLevel4_ExpressionSubtraction_1_1_0 right=ExpressionLevel5)
	 */
	protected void sequence_ExpressionLevel4(ISerializationContext context, ExpressionSubtraction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel4Access().getExpressionSubtractionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel4Access().getRightExpressionLevel5ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionDivision
	 *     ExpressionLevel1 returns ExpressionDivision
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionDivision
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionDivision
	 *     ExpressionLevel2 returns ExpressionDivision
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionDivision
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionDivision
	 *     ExpressionLevel3 returns ExpressionDivision
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionDivision
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionDivision
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionDivision
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionDivision
	 *     ExpressionLevel4 returns ExpressionDivision
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionDivision
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionDivision
	 *     ExpressionLevel5 returns ExpressionDivision
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionDivision
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionDivision
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionDivision
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionDivision
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionDivision
	 *
	 * Constraint:
	 *     (left=ExpressionLevel5_ExpressionDivision_1_1_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel5(ISerializationContext context, ExpressionDivision semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel5Access().getExpressionDivisionLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionMaximum
	 *     ExpressionLevel1 returns ExpressionMaximum
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionMaximum
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionMaximum
	 *     ExpressionLevel2 returns ExpressionMaximum
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionMaximum
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionMaximum
	 *     ExpressionLevel3 returns ExpressionMaximum
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionMaximum
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionMaximum
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionMaximum
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionMaximum
	 *     ExpressionLevel4 returns ExpressionMaximum
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionMaximum
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionMaximum
	 *     ExpressionLevel5 returns ExpressionMaximum
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionMaximum
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionMaximum
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionMaximum
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionMaximum
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionMaximum
	 *
	 * Constraint:
	 *     (left=ExpressionLevel5_ExpressionMaximum_1_2_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel5(ISerializationContext context, ExpressionMaximum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel5Access().getExpressionMaximumLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionMinimum
	 *     ExpressionLevel1 returns ExpressionMinimum
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionMinimum
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionMinimum
	 *     ExpressionLevel2 returns ExpressionMinimum
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionMinimum
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionMinimum
	 *     ExpressionLevel3 returns ExpressionMinimum
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionMinimum
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionMinimum
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionMinimum
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionMinimum
	 *     ExpressionLevel4 returns ExpressionMinimum
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionMinimum
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionMinimum
	 *     ExpressionLevel5 returns ExpressionMinimum
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionMinimum
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionMinimum
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionMinimum
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionMinimum
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionMinimum
	 *
	 * Constraint:
	 *     (left=ExpressionLevel5_ExpressionMinimum_1_3_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel5(ISerializationContext context, ExpressionMinimum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel5Access().getExpressionMinimumLeftAction_1_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionModulo
	 *     ExpressionLevel1 returns ExpressionModulo
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionModulo
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionModulo
	 *     ExpressionLevel2 returns ExpressionModulo
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionModulo
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionModulo
	 *     ExpressionLevel3 returns ExpressionModulo
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionModulo
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionModulo
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionModulo
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionModulo
	 *     ExpressionLevel4 returns ExpressionModulo
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionModulo
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionModulo
	 *     ExpressionLevel5 returns ExpressionModulo
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionModulo
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionModulo
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionModulo
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionModulo
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionModulo
	 *
	 * Constraint:
	 *     (left=ExpressionLevel5_ExpressionModulo_1_4_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel5(ISerializationContext context, ExpressionModulo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel5Access().getExpressionModuloLeftAction_1_4_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_4_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionMultiply
	 *     ExpressionLevel1 returns ExpressionMultiply
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionMultiply
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionMultiply
	 *     ExpressionLevel2 returns ExpressionMultiply
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionMultiply
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionMultiply
	 *     ExpressionLevel3 returns ExpressionMultiply
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionMultiply
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionMultiply
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionMultiply
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionMultiply
	 *     ExpressionLevel4 returns ExpressionMultiply
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionMultiply
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionMultiply
	 *     ExpressionLevel5 returns ExpressionMultiply
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionMultiply
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionMultiply
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionMultiply
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionMultiply
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionMultiply
	 *
	 * Constraint:
	 *     (left=ExpressionLevel5_ExpressionMultiply_1_0_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel5(ISerializationContext context, ExpressionMultiply semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel5Access().getExpressionMultiplyLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel5Access().getRightExpressionLevel6ParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionPower
	 *     ExpressionLevel1 returns ExpressionPower
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionPower
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionPower
	 *     ExpressionLevel2 returns ExpressionPower
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionPower
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionPower
	 *     ExpressionLevel3 returns ExpressionPower
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionPower
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionPower
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionPower
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionPower
	 *     ExpressionLevel4 returns ExpressionPower
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionPower
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionPower
	 *     ExpressionLevel5 returns ExpressionPower
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionPower
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionPower
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionPower
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionPower
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionPower
	 *     ExpressionLevel6 returns ExpressionPower
	 *
	 * Constraint:
	 *     (left=ExpressionLevel6_ExpressionPower_1_0 right=ExpressionLevel6)
	 */
	protected void sequence_ExpressionLevel6(ISerializationContext context, ExpressionPower semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_BINARY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionLevel6Access().getExpressionPowerLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionLevel6Access().getRightExpressionLevel6ParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionMinus
	 *     ExpressionLevel1 returns ExpressionMinus
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionMinus
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionMinus
	 *     ExpressionLevel2 returns ExpressionMinus
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionMinus
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionMinus
	 *     ExpressionLevel3 returns ExpressionMinus
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionMinus
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionMinus
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionMinus
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionMinus
	 *     ExpressionLevel4 returns ExpressionMinus
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionMinus
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionMinus
	 *     ExpressionLevel5 returns ExpressionMinus
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionMinus
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionMinus
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionMinus
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionMinus
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionMinus
	 *     ExpressionLevel6 returns ExpressionMinus
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionMinus
	 *     ExpressionLevel7 returns ExpressionMinus
	 *     ExpressionMinus returns ExpressionMinus
	 *
	 * Constraint:
	 *     sub=ExpressionLevel8
	 */
	protected void sequence_ExpressionMinus(ISerializationContext context, ExpressionMinus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionMinusAccess().getSubExpressionLevel8ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionNot
	 *     ExpressionLevel1 returns ExpressionNot
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionNot
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionNot
	 *     ExpressionLevel2 returns ExpressionNot
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionNot
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionNot
	 *     ExpressionLevel3 returns ExpressionNot
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionNot
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionNot
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionNot
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionNot
	 *     ExpressionLevel4 returns ExpressionNot
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionNot
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionNot
	 *     ExpressionLevel5 returns ExpressionNot
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionNot
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionNot
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionNot
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionNot
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionNot
	 *     ExpressionLevel6 returns ExpressionNot
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionNot
	 *     ExpressionLevel7 returns ExpressionNot
	 *     ExpressionNot returns ExpressionNot
	 *
	 * Constraint:
	 *     sub=ExpressionLevel8
	 */
	protected void sequence_ExpressionNot(ISerializationContext context, ExpressionNot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionNotAccess().getSubExpressionLevel8ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionPlus
	 *     ExpressionLevel1 returns ExpressionPlus
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionPlus
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionPlus
	 *     ExpressionLevel2 returns ExpressionPlus
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionPlus
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionPlus
	 *     ExpressionLevel3 returns ExpressionPlus
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionPlus
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionPlus
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionPlus
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionPlus
	 *     ExpressionLevel4 returns ExpressionPlus
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionPlus
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionPlus
	 *     ExpressionLevel5 returns ExpressionPlus
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionPlus
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionPlus
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionPlus
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionPlus
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionPlus
	 *     ExpressionLevel6 returns ExpressionPlus
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionPlus
	 *     ExpressionLevel7 returns ExpressionPlus
	 *     ExpressionPlus returns ExpressionPlus
	 *
	 * Constraint:
	 *     sub=ExpressionLevel8
	 */
	protected void sequence_ExpressionPlus(ISerializationContext context, ExpressionPlus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_UNARY__SUB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionPlusAccess().getSubExpressionLevel8ParserRuleCall_1_0(), semanticObject.getSub());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionQuantifier
	 *     ExpressionLevel1 returns ExpressionQuantifier
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionQuantifier
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel2 returns ExpressionQuantifier
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionQuantifier
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel3 returns ExpressionQuantifier
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionQuantifier
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionQuantifier
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionQuantifier
	 *     ExpressionLevel4 returns ExpressionQuantifier
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionQuantifier
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel5 returns ExpressionQuantifier
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionQuantifier
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionQuantifier
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionQuantifier
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionQuantifier
	 *     ExpressionLevel6 returns ExpressionQuantifier
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionQuantifier
	 *     ExpressionLevel7 returns ExpressionQuantifier
	 *     ExpressionLevel8 returns ExpressionQuantifier
	 *     ExpressionQuantifier returns ExpressionQuantifier
	 *
	 * Constraint:
	 *     (quantifier=QUANTIFIER iterator=Variable collection=Expression condition=Expression)
	 */
	protected void sequence_ExpressionQuantifier(ISerializationContext context, ExpressionQuantifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__QUANTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__QUANTIFIER));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__ITERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__ITERATOR));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__COLLECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__COLLECTION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_QUANTIFIER__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionQuantifierAccess().getQuantifierQUANTIFIEREnumRuleCall_0_0(), semanticObject.getQuantifier());
		feeder.accept(grammarAccess.getExpressionQuantifierAccess().getIteratorVariableParserRuleCall_2_0(), semanticObject.getIterator());
		feeder.accept(grammarAccess.getExpressionQuantifierAccess().getCollectionExpressionParserRuleCall_4_0(), semanticObject.getCollection());
		feeder.accept(grammarAccess.getExpressionQuantifierAccess().getConditionExpressionParserRuleCall_6_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionMap
	 *     ExpressionLevel1 returns ExpressionMap
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionMap
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionMap
	 *     ExpressionLevel2 returns ExpressionMap
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionMap
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionMap
	 *     ExpressionLevel3 returns ExpressionMap
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionMap
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionMap
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionMap
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionMap
	 *     ExpressionLevel4 returns ExpressionMap
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionMap
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionMap
	 *     ExpressionLevel5 returns ExpressionMap
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionMap
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionMap
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionMap
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionMap
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionMap
	 *     ExpressionLevel6 returns ExpressionMap
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionMap
	 *     ExpressionLevel7 returns ExpressionMap
	 *     ExpressionLevel8 returns ExpressionMap
	 *     ExpressionTypeAnnotated returns ExpressionMap
	 *
	 * Constraint:
	 *     (typeAnnotation=ExpressionTypeAnnotated_ExpressionMap_1_1_0 (pairs+=Pair pairs+=Pair*)?)
	 */
	protected void sequence_ExpressionTypeAnnotated(ISerializationContext context, ExpressionMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionVector
	 *     ExpressionLevel1 returns ExpressionVector
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionVector
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionVector
	 *     ExpressionLevel2 returns ExpressionVector
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionVector
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionVector
	 *     ExpressionLevel3 returns ExpressionVector
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionVector
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionVector
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionVector
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionVector
	 *     ExpressionLevel4 returns ExpressionVector
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionVector
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionVector
	 *     ExpressionLevel5 returns ExpressionVector
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionVector
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionVector
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionVector
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionVector
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionVector
	 *     ExpressionLevel6 returns ExpressionVector
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionVector
	 *     ExpressionLevel7 returns ExpressionVector
	 *     ExpressionLevel8 returns ExpressionVector
	 *     ExpressionTypeAnnotated returns ExpressionVector
	 *
	 * Constraint:
	 *     (typeAnnotation=ExpressionTypeAnnotated_ExpressionVector_1_0_0 (elements+=Expression elements+=Expression*)?)
	 */
	protected void sequence_ExpressionTypeAnnotated(ISerializationContext context, ExpressionVector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionUnary returns ExpressionUnary
	 *
	 * Constraint:
	 *     {ExpressionUnary}
	 */
	protected void sequence_ExpressionUnary(ISerializationContext context, ExpressionUnary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExpressionVariable
	 *     ExpressionLevel1 returns ExpressionVariable
	 *     ExpressionLevel1.ExpressionAnd_1_0_0 returns ExpressionVariable
	 *     ExpressionLevel1.ExpressionOr_1_1_0 returns ExpressionVariable
	 *     ExpressionLevel2 returns ExpressionVariable
	 *     ExpressionLevel2.ExpressionEqual_1_0_0 returns ExpressionVariable
	 *     ExpressionLevel2.ExpressionNEqual_1_1_0 returns ExpressionVariable
	 *     ExpressionLevel3 returns ExpressionVariable
	 *     ExpressionLevel3.ExpressionGeq_1_0_0 returns ExpressionVariable
	 *     ExpressionLevel3.ExpressionGreater_1_1_0 returns ExpressionVariable
	 *     ExpressionLevel3.ExpressionLeq_1_2_0 returns ExpressionVariable
	 *     ExpressionLevel3.ExpressionLess_1_3_0 returns ExpressionVariable
	 *     ExpressionLevel4 returns ExpressionVariable
	 *     ExpressionLevel4.ExpressionAddition_1_0_0 returns ExpressionVariable
	 *     ExpressionLevel4.ExpressionSubtraction_1_1_0 returns ExpressionVariable
	 *     ExpressionLevel5 returns ExpressionVariable
	 *     ExpressionLevel5.ExpressionMultiply_1_0_0 returns ExpressionVariable
	 *     ExpressionLevel5.ExpressionDivision_1_1_0 returns ExpressionVariable
	 *     ExpressionLevel5.ExpressionMaximum_1_2_0 returns ExpressionVariable
	 *     ExpressionLevel5.ExpressionMinimum_1_3_0 returns ExpressionVariable
	 *     ExpressionLevel5.ExpressionModulo_1_4_0 returns ExpressionVariable
	 *     ExpressionLevel6 returns ExpressionVariable
	 *     ExpressionLevel6.ExpressionPower_1_0 returns ExpressionVariable
	 *     ExpressionLevel7 returns ExpressionVariable
	 *     ExpressionLevel8 returns ExpressionVariable
	 *     ExpressionVariable returns ExpressionVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExpressionVariable(ISerializationContext context, ExpressionVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.EXPRESSION_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.EXPRESSION_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pair returns Pair
	 *
	 * Constraint:
	 *     (key=Expression value=Expression)
	 */
	protected void sequence_Pair(ISerializationContext context, Pair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPairAccess().getKeyExpressionParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPairAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionTypeAnnotated.ExpressionVector_1_0_0 returns TypeAnnotation
	 *     ExpressionTypeAnnotated.ExpressionMap_1_1_0 returns TypeAnnotation
	 *     TypeAnnotation returns TypeAnnotation
	 *
	 * Constraint:
	 *     type=ID
	 */
	protected void sequence_TypeAnnotation(ISerializationContext context, TypeAnnotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.TYPE_ANNOTATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.TYPE_ANNOTATION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAnnotationAccess().getTypeIDTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
