/*
 * generated by Xtext 2.25.0
 */
package nl.esi.comma.expressions.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressionsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////import "http://www.esi.nl/comma/types/Types" as types
		////import "http://www.esi.nl/comma/signature/InterfaceSignature" as signature
		//Variable: name= ID ;
		@Override public ParserRule getRule() { return rule; }
		
		//name= ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.Expression");
		private final RuleCall cExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression: ExpressionLevel1;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLevel1
		public RuleCall getExpressionLevel1ParserRuleCall() { return cExpressionLevel1ParserRuleCall; }
	}
	public class ExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cANDKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionOrLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel1 returns Expression:        // Left associativity
		//    ExpressionLevel2
		//    ( ({ExpressionAnd.left=current}            ("AND" | "and")    right=ExpressionLevel2)
		//    | ({ExpressionOr.left=current}            ("OR" | "or")    right=ExpressionLevel2)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel2
		//( ({ExpressionAnd.left=current}            ("AND" | "and")    right=ExpressionLevel2)
		//| ({ExpressionOr.left=current}            ("OR" | "or")    right=ExpressionLevel2)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel2
		public RuleCall getExpressionLevel2ParserRuleCall_0() { return cExpressionLevel2ParserRuleCall_0; }
		
		//( ({ExpressionAnd.left=current}            ("AND" | "and")    right=ExpressionLevel2)
		//| ({ExpressionOr.left=current}            ("OR" | "or")    right=ExpressionLevel2)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAnd.left=current}			("AND" | "and")	right=ExpressionLevel2)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAnd.left=current}
		public Action getExpressionAndLeftAction_1_0_0() { return cExpressionAndLeftAction_1_0_0; }
		
		//("AND" | "and")
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//"AND"
		public Keyword getANDKeyword_1_0_1_0() { return cANDKeyword_1_0_1_0; }
		
		//"and"
		public Keyword getAndKeyword_1_0_1_1() { return cAndKeyword_1_0_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_0_2_0() { return cRightExpressionLevel2ParserRuleCall_1_0_2_0; }
		
		//({ExpressionOr.left=current}			("OR" | "or")	right=ExpressionLevel2)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionOr.left=current}
		public Action getExpressionOrLeftAction_1_1_0() { return cExpressionOrLeftAction_1_1_0; }
		
		//("OR" | "or")
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//"OR"
		public Keyword getORKeyword_1_1_1_0() { return cORKeyword_1_1_1_0; }
		
		//"or"
		public Keyword getOrKeyword_1_1_1_1() { return cOrKeyword_1_1_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_1_2_0() { return cRightExpressionLevel2ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionEqualLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionNEqualLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel2 returns Expression:        // Left associativity
		//    ExpressionLevel3
		//    ( ({ExpressionEqual.left=current}        "=="    right=ExpressionLevel3)
		//    | ({ExpressionNEqual.left=current}        "!="    right=ExpressionLevel3)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel3
		//( ({ExpressionEqual.left=current}        "=="    right=ExpressionLevel3)
		//| ({ExpressionNEqual.left=current}        "!="    right=ExpressionLevel3)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel3
		public RuleCall getExpressionLevel3ParserRuleCall_0() { return cExpressionLevel3ParserRuleCall_0; }
		
		//( ({ExpressionEqual.left=current}        "=="    right=ExpressionLevel3)
		//| ({ExpressionNEqual.left=current}        "!="    right=ExpressionLevel3)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionEqual.left=current}		"=="	right=ExpressionLevel3)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionEqual.left=current}
		public Action getExpressionEqualLeftAction_1_0_0() { return cExpressionEqualLeftAction_1_0_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_0_2_0() { return cRightExpressionLevel3ParserRuleCall_1_0_2_0; }
		
		//({ExpressionNEqual.left=current}		"!="	right=ExpressionLevel3)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionNEqual.left=current}
		public Action getExpressionNEqualLeftAction_1_1_0() { return cExpressionNEqualLeftAction_1_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionGeqLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionGreaterLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionLeqLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionLessLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//ExpressionLevel3 returns Expression:        // Left associativity
		//    ExpressionLevel4
		//    ( ({ExpressionGeq.left    =current}        ">="    right=ExpressionLevel4)
		//    | ({ExpressionGreater.left=current}        ">"        right=ExpressionLevel4)
		//    | ({ExpressionLeq.left    =current}        "<="    right=ExpressionLevel4)
		//    | ({ExpressionLess.left   =current}        "<"        right=ExpressionLevel4)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel4
		//( ({ExpressionGeq.left    =current}        ">="    right=ExpressionLevel4)
		//| ({ExpressionGreater.left=current}        ">"        right=ExpressionLevel4)
		//| ({ExpressionLeq.left    =current}        "<="    right=ExpressionLevel4)
		//| ({ExpressionLess.left   =current}        "<"        right=ExpressionLevel4)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel4
		public RuleCall getExpressionLevel4ParserRuleCall_0() { return cExpressionLevel4ParserRuleCall_0; }
		
		//( ({ExpressionGeq.left    =current}        ">="    right=ExpressionLevel4)
		//| ({ExpressionGreater.left=current}        ">"        right=ExpressionLevel4)
		//| ({ExpressionLeq.left    =current}        "<="    right=ExpressionLevel4)
		//| ({ExpressionLess.left   =current}        "<"        right=ExpressionLevel4)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionGeq.left    =current}		">="	right=ExpressionLevel4)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionGeq.left    =current}
		public Action getExpressionGeqLeftAction_1_0_0() { return cExpressionGeqLeftAction_1_0_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_0_2_0() { return cRightExpressionLevel4ParserRuleCall_1_0_2_0; }
		
		//({ExpressionGreater.left=current}		">"		right=ExpressionLevel4)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionGreater.left=current}
		public Action getExpressionGreaterLeftAction_1_1_0() { return cExpressionGreaterLeftAction_1_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_1_1() { return cGreaterThanSignKeyword_1_1_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_1_2_0() { return cRightExpressionLevel4ParserRuleCall_1_1_2_0; }
		
		//({ExpressionLeq.left    =current}		"<="	right=ExpressionLevel4)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionLeq.left    =current}
		public Action getExpressionLeqLeftAction_1_2_0() { return cExpressionLeqLeftAction_1_2_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_2_1() { return cLessThanSignEqualsSignKeyword_1_2_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_2_2_0() { return cRightExpressionLevel4ParserRuleCall_1_2_2_0; }
		
		//({ExpressionLess.left   =current}		"<"		right=ExpressionLevel4)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionLess.left   =current}
		public Action getExpressionLessLeftAction_1_3_0() { return cExpressionLessLeftAction_1_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_3_1() { return cLessThanSignKeyword_1_3_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_3_2_0() { return cRightExpressionLevel4ParserRuleCall_1_3_2_0; }
	}
	public class ExpressionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel5ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel4 returns Expression:        // Left associativity
		//    ExpressionLevel5
		//    ( ({ExpressionAddition.left   =current}    "+"        right=ExpressionLevel5)
		//    | ({ExpressionSubtraction.left=current}    "-"        right=ExpressionLevel5)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel5
		//( ({ExpressionAddition.left   =current}    "+"        right=ExpressionLevel5)
		//| ({ExpressionSubtraction.left=current}    "-"        right=ExpressionLevel5)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel5
		public RuleCall getExpressionLevel5ParserRuleCall_0() { return cExpressionLevel5ParserRuleCall_0; }
		
		//( ({ExpressionAddition.left   =current}    "+"        right=ExpressionLevel5)
		//| ({ExpressionSubtraction.left=current}    "-"        right=ExpressionLevel5)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAddition.left   =current}	"+"		right=ExpressionLevel5)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAddition.left   =current}
		public Action getExpressionAdditionLeftAction_1_0_0() { return cExpressionAdditionLeftAction_1_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLevel5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel5
		public RuleCall getRightExpressionLevel5ParserRuleCall_1_0_2_0() { return cRightExpressionLevel5ParserRuleCall_1_0_2_0; }
		
		//({ExpressionSubtraction.left=current}	"-"		right=ExpressionLevel5)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionSubtraction.left=current}
		public Action getExpressionSubtractionLeftAction_1_1_0() { return cExpressionSubtractionLeftAction_1_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLevel5
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel5
		public RuleCall getRightExpressionLevel5ParserRuleCall_1_1_2_0() { return cRightExpressionLevel5ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionMaximumLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cMaxKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionMinimumLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cMinKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cExpressionModuloLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cModKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		
		//ExpressionLevel5 returns Expression:        // Left associativity
		//    ExpressionLevel6
		//    ( ({ExpressionMultiply.left=current}    "*"        right=ExpressionLevel6)
		//    | ({ExpressionDivision.left=current}    "/"        right=ExpressionLevel6)
		//    | ({ExpressionMaximum.left =current}    "max"    right=ExpressionLevel6)
		//    | ({ExpressionMinimum.left =current}    "min"    right=ExpressionLevel6)
		//    | ({ExpressionModulo.left  =current}    "mod"    right=ExpressionLevel6)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel6
		//( ({ExpressionMultiply.left=current}    "*"        right=ExpressionLevel6)
		//| ({ExpressionDivision.left=current}    "/"        right=ExpressionLevel6)
		//| ({ExpressionMaximum.left =current}    "max"    right=ExpressionLevel6)
		//| ({ExpressionMinimum.left =current}    "min"    right=ExpressionLevel6)
		//| ({ExpressionModulo.left  =current}    "mod"    right=ExpressionLevel6)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel6
		public RuleCall getExpressionLevel6ParserRuleCall_0() { return cExpressionLevel6ParserRuleCall_0; }
		
		//( ({ExpressionMultiply.left=current}    "*"        right=ExpressionLevel6)
		//| ({ExpressionDivision.left=current}    "/"        right=ExpressionLevel6)
		//| ({ExpressionMaximum.left =current}    "max"    right=ExpressionLevel6)
		//| ({ExpressionMinimum.left =current}    "min"    right=ExpressionLevel6)
		//| ({ExpressionModulo.left  =current}    "mod"    right=ExpressionLevel6)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionMultiply.left=current}	"*"		right=ExpressionLevel6)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionMultiply.left=current}
		public Action getExpressionMultiplyLeftAction_1_0_0() { return cExpressionMultiplyLeftAction_1_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_0_2_0() { return cRightExpressionLevel6ParserRuleCall_1_0_2_0; }
		
		//({ExpressionDivision.left=current}	"/"		right=ExpressionLevel6)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionDivision.left=current}
		public Action getExpressionDivisionLeftAction_1_1_0() { return cExpressionDivisionLeftAction_1_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_1_2_0() { return cRightExpressionLevel6ParserRuleCall_1_1_2_0; }
		
		//({ExpressionMaximum.left =current}	"max"	right=ExpressionLevel6)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionMaximum.left =current}
		public Action getExpressionMaximumLeftAction_1_2_0() { return cExpressionMaximumLeftAction_1_2_0; }
		
		//"max"
		public Keyword getMaxKeyword_1_2_1() { return cMaxKeyword_1_2_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_2_2_0() { return cRightExpressionLevel6ParserRuleCall_1_2_2_0; }
		
		//({ExpressionMinimum.left =current}	"min"	right=ExpressionLevel6)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionMinimum.left =current}
		public Action getExpressionMinimumLeftAction_1_3_0() { return cExpressionMinimumLeftAction_1_3_0; }
		
		//"min"
		public Keyword getMinKeyword_1_3_1() { return cMinKeyword_1_3_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_3_2_0() { return cRightExpressionLevel6ParserRuleCall_1_3_2_0; }
		
		//({ExpressionModulo.left  =current}	"mod"	right=ExpressionLevel6)
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{ExpressionModulo.left  =current}
		public Action getExpressionModuloLeftAction_1_4_0() { return cExpressionModuloLeftAction_1_4_0; }
		
		//"mod"
		public Keyword getModKeyword_1_4_1() { return cModKeyword_1_4_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_4_2_0() { return cRightExpressionLevel6ParserRuleCall_1_4_2_0; }
	}
	public class ExpressionLevel6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLevel6 returns Expression:        // Right associativity
		//    ExpressionLevel7
		//    ( ({ExpressionPower.left=current}        "^"     right=ExpressionLevel6)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Right associativity
		//ExpressionLevel7
		//( ({ExpressionPower.left=current}        "^"     right=ExpressionLevel6)
		//)?
		public Group getGroup() { return cGroup; }
		
		//    // Right associativity
		//ExpressionLevel7
		public RuleCall getExpressionLevel7ParserRuleCall_0() { return cExpressionLevel7ParserRuleCall_0; }
		
		//( ({ExpressionPower.left=current}        "^"     right=ExpressionLevel6)
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionPower.left=current}
		public Action getExpressionPowerLeftAction_1_0() { return cExpressionPowerLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_2_0() { return cRightExpressionLevel6ParserRuleCall_1_2_0; }
	}
	public class ExpressionLevel7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel7");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionLevel8ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExpressionLevel7 returns Expression:
		//    ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionNot
		public RuleCall getExpressionNotParserRuleCall_0() { return cExpressionNotParserRuleCall_0; }
		
		//ExpressionMinus
		public RuleCall getExpressionMinusParserRuleCall_1() { return cExpressionMinusParserRuleCall_1; }
		
		//ExpressionPlus
		public RuleCall getExpressionPlusParserRuleCall_2() { return cExpressionPlusParserRuleCall_2; }
		
		//ExpressionLevel8
		public RuleCall getExpressionLevel8ParserRuleCall_3() { return cExpressionLevel8ParserRuleCall_3; }
	}
	public class ExpressionNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionNot:
		//    ("NOT" | "not") sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("NOT" | "not") sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//("NOT" | "not")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"NOT"
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionMinus:
		//    "-" sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"-" sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionPlus:
		//    "+" sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"+" sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionLevel8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionLevel8");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionConstantBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionConstantIntParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionConstantStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionQuantifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExpressionTypeAnnotatedParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		///*ExpressionLevel8 returns Expression:
		//    ExpressionLevel9 (({ExpressionRecordAccess.record = current} '.' field = [types::RecordField | ID]) |
		//                      ({ExpressionMapRW.map = current} '[' key = Expression ('->' value = Expression)? ']'))*
		//;*/
		////ExpressionLevel9 returns Expression:
		//ExpressionLevel8 returns Expression:
		//    ExpressionBracket |
		//    ExpressionConstantBool |
		//    ExpressionConstantInt |
		//    //ExpressionConstantReal |
		//    ExpressionConstantString |
		//    //ExpressionEnumLiteral |
		//    ExpressionVariable |
		//    //ExpressionRecord |
		//    //ExpressionAny |
		//    //ExpressionBulkData |
		//    //ExpressionFunctionCall |
		//    ExpressionQuantifier |
		//    ExpressionTypeAnnotated
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket |
		//ExpressionConstantBool |
		//ExpressionConstantInt |
		////ExpressionConstantReal |
		//ExpressionConstantString |
		////ExpressionEnumLiteral |
		//ExpressionVariable |
		////ExpressionRecord |
		////ExpressionAny |
		////ExpressionBulkData |
		////ExpressionFunctionCall |
		//ExpressionQuantifier |
		//ExpressionTypeAnnotated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//ExpressionConstantBool
		public RuleCall getExpressionConstantBoolParserRuleCall_1() { return cExpressionConstantBoolParserRuleCall_1; }
		
		//ExpressionConstantInt
		public RuleCall getExpressionConstantIntParserRuleCall_2() { return cExpressionConstantIntParserRuleCall_2; }
		
		////ExpressionConstantReal |
		//ExpressionConstantString
		public RuleCall getExpressionConstantStringParserRuleCall_3() { return cExpressionConstantStringParserRuleCall_3; }
		
		////ExpressionEnumLiteral |
		//ExpressionVariable
		public RuleCall getExpressionVariableParserRuleCall_4() { return cExpressionVariableParserRuleCall_4; }
		
		////ExpressionRecord |
		////ExpressionAny |
		////ExpressionBulkData |
		////ExpressionFunctionCall |
		//ExpressionQuantifier
		public RuleCall getExpressionQuantifierParserRuleCall_5() { return cExpressionQuantifierParserRuleCall_5; }
		
		//ExpressionTypeAnnotated
		public RuleCall getExpressionTypeAnnotatedParserRuleCall_6() { return cExpressionTypeAnnotatedParserRuleCall_6; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//    "(" sub=Expression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=Expression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//Expression
		public RuleCall getSubExpressionParserRuleCall_1_0() { return cSubExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionConstantBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionConstantBool");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOL_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantBool:
		//    value=BOOL_LITERAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL_LITERAL
		public RuleCall getValueBOOL_LITERALTerminalRuleCall_0() { return cValueBOOL_LITERALTerminalRuleCall_0; }
	}
	public class ExpressionConstantIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionConstantInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantInt:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ExpressionConstantStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionConstantString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///*ExpressionConstantReal:
		//    value=ID
		//;*/
		//ExpressionConstantString:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ExpressionEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralIDTerminalRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		
		//ExpressionEnumLiteral:
		//    //(interface = [signature::Signature|ID] '::')? type = [types::EnumTypeDecl] "::" literal = [types::EnumElement]
		//    type = ID "::" literal = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////(interface = [signature::Signature|ID] '::')? type = [types::EnumTypeDecl] "::" literal = [types::EnumElement]
		//type = ID "::" literal = ID
		public Group getGroup() { return cGroup; }
		
		////(interface = [signature::Signature|ID] '::')? type = [types::EnumTypeDecl] "::" literal = [types::EnumElement]
		//type = ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//literal = ID
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//ID
		public RuleCall getLiteralIDTerminalRuleCall_2_0() { return cLiteralIDTerminalRuleCall_2_0; }
	}
	public class ExpressionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExpressionVariable:
		//    //variable=[Variable | ID]
		//    name= ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////variable=[Variable | ID]
		//name= ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExpressionAnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionAny");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///*ExpressionRecord:
		//    (interface = [signature::Signature|ID] '::')? type = [types::RecordTypeDecl] '{' fields+=Field (',' fields+=Field)* '}'
		//;
		//Field:
		//    recordField = [types::RecordField | ID] '=' exp = Expression
		//;
		//ExpressionBulkData : {ExpressionBulkData}
		//    'Bulkdata' '<' (size = Int)? '>'
		//;*/
		//ExpressionAny :
		//    {ExpressionAny} "*"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionAny} "*"
		public Group getGroup() { return cGroup; }
		
		//{ExpressionAny}
		public Action getExpressionAnyAction_0() { return cExpressionAnyAction_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ExpressionFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameIDTerminalRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// We assume a library of functions. They can be provided in a separate model.
		//// At the moment we have just a check of the function name and then a dedicated check for the types of the arguments
		//// TODO: consider an expression (or function) Expression in Interval
		//ExpressionFunctionCall:
		//    functionName = ID '(' (args += Expression (',' args += Expression)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//functionName = ID '(' (args += Expression (',' args += Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//functionName = ID
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }
		
		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_0_0() { return cFunctionNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args += Expression (',' args += Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args += Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }
		
		//(',' args += Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args += Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionQuantifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierQUANTIFIEREnumRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIteratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIteratorVariableParserRuleCall_2_0 = (RuleCall)cIteratorAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCollectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollectionExpressionParserRuleCall_4_0 = (RuleCall)cCollectionAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionExpressionParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////TODO rename to iterator? after adding 'delete' the expression is not a pure quantifier any more
		//ExpressionQuantifier:
		//    quantifier = QUANTIFIER '(' iterator = Variable 'in' collection = Expression ':' condition = Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//quantifier = QUANTIFIER '(' iterator = Variable 'in' collection = Expression ':' condition = Expression ')'
		public Group getGroup() { return cGroup; }
		
		//quantifier = QUANTIFIER
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }
		
		//QUANTIFIER
		public RuleCall getQuantifierQUANTIFIEREnumRuleCall_0_0() { return cQuantifierQUANTIFIEREnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//iterator = Variable
		public Assignment getIteratorAssignment_2() { return cIteratorAssignment_2; }
		
		//Variable
		public RuleCall getIteratorVariableParserRuleCall_2_0() { return cIteratorVariableParserRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//collection = Expression
		public Assignment getCollectionAssignment_4() { return cCollectionAssignment_4; }
		
		//Expression
		public RuleCall getCollectionExpressionParserRuleCall_4_0() { return cCollectionExpressionParserRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//condition = Expression
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_0() { return cConditionExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExpressionTypeAnnotatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionTypeAnnotated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeAnnotationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionVectorTypeAnnotationAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cElementsAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_1_0_2_0_0 = (RuleCall)cElementsAssignment_1_0_2_0.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cGroup_1_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_1_0 = (Keyword)cGroup_1_0_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_0_2_1_1 = (Assignment)cGroup_1_0_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_0_2_1_1_0 = (RuleCall)cElementsAssignment_1_0_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionMapTypeAnnotationAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cPairsAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cPairsPairParserRuleCall_1_1_2_0_0 = (RuleCall)cPairsAssignment_1_1_2_0.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cGroup_1_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_0 = (Keyword)cGroup_1_1_2_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1_2_1_1 = (Assignment)cGroup_1_1_2_1.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_1_1_2_1_1_0 = (RuleCall)cPairsAssignment_1_1_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//ExpressionTypeAnnotated returns Expression:
		//    TypeAnnotation( ({ExpressionVector.typeAnnotation = current} '[' (elements += Expression (',' elements += Expression)*)? ']') |
		//                    ({ExpressionMap.typeAnnotation = current} '{' (pairs += Pair (',' pairs += Pair)*)? '}'))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeAnnotation( ({ExpressionVector.typeAnnotation = current} '[' (elements += Expression (',' elements += Expression)*)? ']') |
		//                ({ExpressionMap.typeAnnotation = current} '{' (pairs += Pair (',' pairs += Pair)*)? '}'))
		public Group getGroup() { return cGroup; }
		
		//TypeAnnotation
		public RuleCall getTypeAnnotationParserRuleCall_0() { return cTypeAnnotationParserRuleCall_0; }
		
		//( ({ExpressionVector.typeAnnotation = current} '[' (elements += Expression (',' elements += Expression)*)? ']') |
		//                    ({ExpressionMap.typeAnnotation = current} '{' (pairs += Pair (',' pairs += Pair)*)? '}'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionVector.typeAnnotation = current} '[' (elements += Expression (',' elements += Expression)*)? ']')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionVector.typeAnnotation = current}
		public Action getExpressionVectorTypeAnnotationAction_1_0_0() { return cExpressionVectorTypeAnnotationAction_1_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }
		
		//(elements += Expression (',' elements += Expression)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//elements += Expression
		public Assignment getElementsAssignment_1_0_2_0() { return cElementsAssignment_1_0_2_0; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0_2_0_0() { return cElementsExpressionParserRuleCall_1_0_2_0_0; }
		
		//(',' elements += Expression)*
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_2_1_0() { return cCommaKeyword_1_0_2_1_0; }
		
		//elements += Expression
		public Assignment getElementsAssignment_1_0_2_1_1() { return cElementsAssignment_1_0_2_1_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0_2_1_1_0() { return cElementsExpressionParserRuleCall_1_0_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }
		
		//({ExpressionMap.typeAnnotation = current} '{' (pairs += Pair (',' pairs += Pair)*)? '}')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionMap.typeAnnotation = current}
		public Action getExpressionMapTypeAnnotationAction_1_1_0() { return cExpressionMapTypeAnnotationAction_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_1() { return cLeftCurlyBracketKeyword_1_1_1; }
		
		//(pairs += Pair (',' pairs += Pair)*)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//pairs += Pair
		public Assignment getPairsAssignment_1_1_2_0() { return cPairsAssignment_1_1_2_0; }
		
		//Pair
		public RuleCall getPairsPairParserRuleCall_1_1_2_0_0() { return cPairsPairParserRuleCall_1_1_2_0_0; }
		
		//(',' pairs += Pair)*
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_2_1_0() { return cCommaKeyword_1_1_2_1_0; }
		
		//pairs += Pair
		public Assignment getPairsAssignment_1_1_2_1_1() { return cPairsAssignment_1_1_2_1_1; }
		
		//Pair
		public RuleCall getPairsPairParserRuleCall_1_1_2_1_1_0() { return cPairsPairParserRuleCall_1_1_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_3() { return cRightCurlyBracketKeyword_1_1_3; }
	}
	public class TypeAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.TypeAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeAnnotation :
		//    '<'type = ID '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<'type = ID '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//type = ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyExpressionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Pair:
		//    key = Expression '->' value = Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key = Expression '->' value = Expression
		public Group getGroup() { return cGroup; }
		
		//key = Expression
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//Expression
		public RuleCall getKeyExpressionParserRuleCall_0_0() { return cKeyExpressionParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//value = Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionBinary");
		private final Action cExpressionBinaryAction = (Action)rule.eContents().get(1);
		
		//// --- add extra superclasses in metamodel -------
		//ExpressionBinary returns Expression:
		//    {ExpressionBinary}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionBinary}
		public Action getExpressionBinaryAction() { return cExpressionBinaryAction; }
	}
	public class ConcreteExpressionBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ConcreteExpressionBinary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cExpressionAndAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Action cExpressionOrAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Action cExpressionEqualAction_2 = (Action)cAlternatives.eContents().get(2);
		private final Action cExpressionNEqualAction_3 = (Action)cAlternatives.eContents().get(3);
		private final Action cExpressionGeqAction_4 = (Action)cAlternatives.eContents().get(4);
		private final Action cExpressionGreaterAction_5 = (Action)cAlternatives.eContents().get(5);
		private final Action cExpressionLeqAction_6 = (Action)cAlternatives.eContents().get(6);
		private final Action cExpressionLessAction_7 = (Action)cAlternatives.eContents().get(7);
		private final Action cExpressionAdditionAction_8 = (Action)cAlternatives.eContents().get(8);
		private final Action cExpressionSubtractionAction_9 = (Action)cAlternatives.eContents().get(9);
		private final Action cExpressionMultiplyAction_10 = (Action)cAlternatives.eContents().get(10);
		private final Action cExpressionDivisionAction_11 = (Action)cAlternatives.eContents().get(11);
		private final Action cExpressionMaximumAction_12 = (Action)cAlternatives.eContents().get(12);
		private final Action cExpressionMinimumAction_13 = (Action)cAlternatives.eContents().get(13);
		private final Action cExpressionModuloAction_14 = (Action)cAlternatives.eContents().get(14);
		private final Action cExpressionPowerAction_15 = (Action)cAlternatives.eContents().get(15);
		
		//ConcreteExpressionBinary returns ExpressionBinary:
		//      {ExpressionAnd}
		//    | {ExpressionOr}
		//    | {ExpressionEqual}
		//    | {ExpressionNEqual}
		//    | {ExpressionGeq}
		//    | {ExpressionGreater}
		//    | {ExpressionLeq}
		//    | {ExpressionLess}
		//    | {ExpressionAddition}
		//    | {ExpressionSubtraction}
		//    | {ExpressionMultiply}
		//    | {ExpressionDivision}
		//    | {ExpressionMaximum}
		//    | {ExpressionMinimum}
		//    | {ExpressionModulo}
		//    | {ExpressionPower}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {ExpressionAnd}
		//| {ExpressionOr}
		//| {ExpressionEqual}
		//| {ExpressionNEqual}
		//| {ExpressionGeq}
		//| {ExpressionGreater}
		//| {ExpressionLeq}
		//| {ExpressionLess}
		//| {ExpressionAddition}
		//| {ExpressionSubtraction}
		//| {ExpressionMultiply}
		//| {ExpressionDivision}
		//| {ExpressionMaximum}
		//| {ExpressionMinimum}
		//| {ExpressionModulo}
		//| {ExpressionPower}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExpressionAnd}
		public Action getExpressionAndAction_0() { return cExpressionAndAction_0; }
		
		//{ExpressionOr}
		public Action getExpressionOrAction_1() { return cExpressionOrAction_1; }
		
		//{ExpressionEqual}
		public Action getExpressionEqualAction_2() { return cExpressionEqualAction_2; }
		
		//{ExpressionNEqual}
		public Action getExpressionNEqualAction_3() { return cExpressionNEqualAction_3; }
		
		//{ExpressionGeq}
		public Action getExpressionGeqAction_4() { return cExpressionGeqAction_4; }
		
		//{ExpressionGreater}
		public Action getExpressionGreaterAction_5() { return cExpressionGreaterAction_5; }
		
		//{ExpressionLeq}
		public Action getExpressionLeqAction_6() { return cExpressionLeqAction_6; }
		
		//{ExpressionLess}
		public Action getExpressionLessAction_7() { return cExpressionLessAction_7; }
		
		//{ExpressionAddition}
		public Action getExpressionAdditionAction_8() { return cExpressionAdditionAction_8; }
		
		//{ExpressionSubtraction}
		public Action getExpressionSubtractionAction_9() { return cExpressionSubtractionAction_9; }
		
		//{ExpressionMultiply}
		public Action getExpressionMultiplyAction_10() { return cExpressionMultiplyAction_10; }
		
		//{ExpressionDivision}
		public Action getExpressionDivisionAction_11() { return cExpressionDivisionAction_11; }
		
		//{ExpressionMaximum}
		public Action getExpressionMaximumAction_12() { return cExpressionMaximumAction_12; }
		
		//{ExpressionMinimum}
		public Action getExpressionMinimumAction_13() { return cExpressionMinimumAction_13; }
		
		//{ExpressionModulo}
		public Action getExpressionModuloAction_14() { return cExpressionModuloAction_14; }
		
		//{ExpressionPower}
		public Action getExpressionPowerAction_15() { return cExpressionPowerAction_15; }
	}
	public class ExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ExpressionUnary");
		private final Action cExpressionUnaryAction = (Action)rule.eContents().get(1);
		
		//ExpressionUnary returns Expression:
		//    {ExpressionUnary}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionUnary}
		public Action getExpressionUnaryAction() { return cExpressionUnaryAction; }
	}
	public class ConcreteExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.ConcreteExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cExpressionNotAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Action cExpressionMinusAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Action cExpressionPlusAction_2 = (Action)cAlternatives.eContents().get(2);
		private final Action cExpressionBracketAction_3 = (Action)cAlternatives.eContents().get(3);
		
		//ConcreteExpressionUnary returns ExpressionUnary:
		//      {ExpressionNot}
		//    | {ExpressionMinus}
		//    | {ExpressionPlus}
		//    | {ExpressionBracket}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {ExpressionNot}
		//| {ExpressionMinus}
		//| {ExpressionPlus}
		//| {ExpressionBracket}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExpressionNot}
		public Action getExpressionNotAction_0() { return cExpressionNotAction_0; }
		
		//{ExpressionMinus}
		public Action getExpressionMinusAction_1() { return cExpressionMinusAction_1; }
		
		//{ExpressionPlus}
		public Action getExpressionPlusAction_2() { return cExpressionPlusAction_2; }
		
		//{ExpressionBracket}
		public Action getExpressionBracketAction_3() { return cExpressionBracketAction_3; }
	}
	
	public class QUANTIFIERElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.QUANTIFIER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXISTSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXISTSExistsKeyword_0_0 = (Keyword)cEXISTSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFORALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFORALLForAllKeyword_1_0 = (Keyword)cFORALLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDELETEDeleteKeyword_2_0 = (Keyword)cDELETEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum QUANTIFIER :
		//    EXISTS = 'exists' |
		//    FORALL = 'forAll' |
		//    DELETE = 'delete'
		//;
		public EnumRule getRule() { return rule; }
		
		//EXISTS = 'exists' |
		//FORALL = 'forAll' |
		//DELETE = 'delete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EXISTS = 'exists'
		public EnumLiteralDeclaration getEXISTSEnumLiteralDeclaration_0() { return cEXISTSEnumLiteralDeclaration_0; }
		
		//'exists'
		public Keyword getEXISTSExistsKeyword_0_0() { return cEXISTSExistsKeyword_0_0; }
		
		//FORALL = 'forAll'
		public EnumLiteralDeclaration getFORALLEnumLiteralDeclaration_1() { return cFORALLEnumLiteralDeclaration_1; }
		
		//'forAll'
		public Keyword getFORALLForAllKeyword_1_0() { return cFORALLForAllKeyword_1_0; }
		
		//DELETE = 'delete'
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_2() { return cDELETEEnumLiteralDeclaration_2; }
		
		//'delete'
		public Keyword getDELETEDeleteKeyword_2_0() { return cDELETEDeleteKeyword_2_0; }
	}
	
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final ExpressionLevel1Elements pExpressionLevel1;
	private final ExpressionLevel2Elements pExpressionLevel2;
	private final ExpressionLevel3Elements pExpressionLevel3;
	private final ExpressionLevel4Elements pExpressionLevel4;
	private final ExpressionLevel5Elements pExpressionLevel5;
	private final ExpressionLevel6Elements pExpressionLevel6;
	private final ExpressionLevel7Elements pExpressionLevel7;
	private final ExpressionNotElements pExpressionNot;
	private final ExpressionMinusElements pExpressionMinus;
	private final ExpressionPlusElements pExpressionPlus;
	private final ExpressionLevel8Elements pExpressionLevel8;
	private final ExpressionBracketElements pExpressionBracket;
	private final ExpressionConstantBoolElements pExpressionConstantBool;
	private final ExpressionConstantIntElements pExpressionConstantInt;
	private final ExpressionConstantStringElements pExpressionConstantString;
	private final ExpressionEnumLiteralElements pExpressionEnumLiteral;
	private final ExpressionVariableElements pExpressionVariable;
	private final ExpressionAnyElements pExpressionAny;
	private final ExpressionFunctionCallElements pExpressionFunctionCall;
	private final ExpressionQuantifierElements pExpressionQuantifier;
	private final ExpressionTypeAnnotatedElements pExpressionTypeAnnotated;
	private final TypeAnnotationElements pTypeAnnotation;
	private final PairElements pPair;
	private final QUANTIFIERElements eQUANTIFIER;
	private final ExpressionBinaryElements pExpressionBinary;
	private final ConcreteExpressionBinaryElements pConcreteExpressionBinary;
	private final ExpressionUnaryElements pExpressionUnary;
	private final ConcreteExpressionUnaryElements pConcreteExpressionUnary;
	private final TerminalRule tBOOL_LITERAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionLevel1 = new ExpressionLevel1Elements();
		this.pExpressionLevel2 = new ExpressionLevel2Elements();
		this.pExpressionLevel3 = new ExpressionLevel3Elements();
		this.pExpressionLevel4 = new ExpressionLevel4Elements();
		this.pExpressionLevel5 = new ExpressionLevel5Elements();
		this.pExpressionLevel6 = new ExpressionLevel6Elements();
		this.pExpressionLevel7 = new ExpressionLevel7Elements();
		this.pExpressionNot = new ExpressionNotElements();
		this.pExpressionMinus = new ExpressionMinusElements();
		this.pExpressionPlus = new ExpressionPlusElements();
		this.pExpressionLevel8 = new ExpressionLevel8Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pExpressionConstantBool = new ExpressionConstantBoolElements();
		this.pExpressionConstantInt = new ExpressionConstantIntElements();
		this.pExpressionConstantString = new ExpressionConstantStringElements();
		this.pExpressionEnumLiteral = new ExpressionEnumLiteralElements();
		this.pExpressionVariable = new ExpressionVariableElements();
		this.pExpressionAny = new ExpressionAnyElements();
		this.pExpressionFunctionCall = new ExpressionFunctionCallElements();
		this.pExpressionQuantifier = new ExpressionQuantifierElements();
		this.pExpressionTypeAnnotated = new ExpressionTypeAnnotatedElements();
		this.pTypeAnnotation = new TypeAnnotationElements();
		this.pPair = new PairElements();
		this.eQUANTIFIER = new QUANTIFIERElements();
		this.pExpressionBinary = new ExpressionBinaryElements();
		this.pConcreteExpressionBinary = new ConcreteExpressionBinaryElements();
		this.pExpressionUnary = new ExpressionUnaryElements();
		this.pConcreteExpressionUnary = new ConcreteExpressionUnaryElements();
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.esi.comma.expressions.Expressions.BOOL_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.esi.comma.expressions.Expressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.esi.nl/comma/types/Types" as types
	////import "http://www.esi.nl/comma/signature/InterfaceSignature" as signature
	//Variable: name= ID ;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Expression: ExpressionLevel1;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionLevel1 returns Expression:        // Left associativity
	//    ExpressionLevel2
	//    ( ({ExpressionAnd.left=current}            ("AND" | "and")    right=ExpressionLevel2)
	//    | ({ExpressionOr.left=current}            ("OR" | "or")    right=ExpressionLevel2)
	//    )*
	//;
	public ExpressionLevel1Elements getExpressionLevel1Access() {
		return pExpressionLevel1;
	}
	
	public ParserRule getExpressionLevel1Rule() {
		return getExpressionLevel1Access().getRule();
	}
	
	//ExpressionLevel2 returns Expression:        // Left associativity
	//    ExpressionLevel3
	//    ( ({ExpressionEqual.left=current}        "=="    right=ExpressionLevel3)
	//    | ({ExpressionNEqual.left=current}        "!="    right=ExpressionLevel3)
	//    )*
	//;
	public ExpressionLevel2Elements getExpressionLevel2Access() {
		return pExpressionLevel2;
	}
	
	public ParserRule getExpressionLevel2Rule() {
		return getExpressionLevel2Access().getRule();
	}
	
	//ExpressionLevel3 returns Expression:        // Left associativity
	//    ExpressionLevel4
	//    ( ({ExpressionGeq.left    =current}        ">="    right=ExpressionLevel4)
	//    | ({ExpressionGreater.left=current}        ">"        right=ExpressionLevel4)
	//    | ({ExpressionLeq.left    =current}        "<="    right=ExpressionLevel4)
	//    | ({ExpressionLess.left   =current}        "<"        right=ExpressionLevel4)
	//    )*
	//;
	public ExpressionLevel3Elements getExpressionLevel3Access() {
		return pExpressionLevel3;
	}
	
	public ParserRule getExpressionLevel3Rule() {
		return getExpressionLevel3Access().getRule();
	}
	
	//ExpressionLevel4 returns Expression:        // Left associativity
	//    ExpressionLevel5
	//    ( ({ExpressionAddition.left   =current}    "+"        right=ExpressionLevel5)
	//    | ({ExpressionSubtraction.left=current}    "-"        right=ExpressionLevel5)
	//    )*
	//;
	public ExpressionLevel4Elements getExpressionLevel4Access() {
		return pExpressionLevel4;
	}
	
	public ParserRule getExpressionLevel4Rule() {
		return getExpressionLevel4Access().getRule();
	}
	
	//ExpressionLevel5 returns Expression:        // Left associativity
	//    ExpressionLevel6
	//    ( ({ExpressionMultiply.left=current}    "*"        right=ExpressionLevel6)
	//    | ({ExpressionDivision.left=current}    "/"        right=ExpressionLevel6)
	//    | ({ExpressionMaximum.left =current}    "max"    right=ExpressionLevel6)
	//    | ({ExpressionMinimum.left =current}    "min"    right=ExpressionLevel6)
	//    | ({ExpressionModulo.left  =current}    "mod"    right=ExpressionLevel6)
	//    )*
	//;
	public ExpressionLevel5Elements getExpressionLevel5Access() {
		return pExpressionLevel5;
	}
	
	public ParserRule getExpressionLevel5Rule() {
		return getExpressionLevel5Access().getRule();
	}
	
	//ExpressionLevel6 returns Expression:        // Right associativity
	//    ExpressionLevel7
	//    ( ({ExpressionPower.left=current}        "^"     right=ExpressionLevel6)
	//    )?
	//;
	public ExpressionLevel6Elements getExpressionLevel6Access() {
		return pExpressionLevel6;
	}
	
	public ParserRule getExpressionLevel6Rule() {
		return getExpressionLevel6Access().getRule();
	}
	
	//ExpressionLevel7 returns Expression:
	//    ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
	//;
	public ExpressionLevel7Elements getExpressionLevel7Access() {
		return pExpressionLevel7;
	}
	
	public ParserRule getExpressionLevel7Rule() {
		return getExpressionLevel7Access().getRule();
	}
	
	//ExpressionNot:
	//    ("NOT" | "not") sub=ExpressionLevel8
	//;
	public ExpressionNotElements getExpressionNotAccess() {
		return pExpressionNot;
	}
	
	public ParserRule getExpressionNotRule() {
		return getExpressionNotAccess().getRule();
	}
	
	//ExpressionMinus:
	//    "-" sub=ExpressionLevel8
	//;
	public ExpressionMinusElements getExpressionMinusAccess() {
		return pExpressionMinus;
	}
	
	public ParserRule getExpressionMinusRule() {
		return getExpressionMinusAccess().getRule();
	}
	
	//ExpressionPlus:
	//    "+" sub=ExpressionLevel8
	//;
	public ExpressionPlusElements getExpressionPlusAccess() {
		return pExpressionPlus;
	}
	
	public ParserRule getExpressionPlusRule() {
		return getExpressionPlusAccess().getRule();
	}
	
	///*ExpressionLevel8 returns Expression:
	//    ExpressionLevel9 (({ExpressionRecordAccess.record = current} '.' field = [types::RecordField | ID]) |
	//                      ({ExpressionMapRW.map = current} '[' key = Expression ('->' value = Expression)? ']'))*
	//;*/
	////ExpressionLevel9 returns Expression:
	//ExpressionLevel8 returns Expression:
	//    ExpressionBracket |
	//    ExpressionConstantBool |
	//    ExpressionConstantInt |
	//    //ExpressionConstantReal |
	//    ExpressionConstantString |
	//    //ExpressionEnumLiteral |
	//    ExpressionVariable |
	//    //ExpressionRecord |
	//    //ExpressionAny |
	//    //ExpressionBulkData |
	//    //ExpressionFunctionCall |
	//    ExpressionQuantifier |
	//    ExpressionTypeAnnotated
	//;
	public ExpressionLevel8Elements getExpressionLevel8Access() {
		return pExpressionLevel8;
	}
	
	public ParserRule getExpressionLevel8Rule() {
		return getExpressionLevel8Access().getRule();
	}
	
	//ExpressionBracket:
	//    "(" sub=Expression ")"
	//;
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//ExpressionConstantBool:
	//    value=BOOL_LITERAL
	//;
	public ExpressionConstantBoolElements getExpressionConstantBoolAccess() {
		return pExpressionConstantBool;
	}
	
	public ParserRule getExpressionConstantBoolRule() {
		return getExpressionConstantBoolAccess().getRule();
	}
	
	//ExpressionConstantInt:
	//    value=INT
	//;
	public ExpressionConstantIntElements getExpressionConstantIntAccess() {
		return pExpressionConstantInt;
	}
	
	public ParserRule getExpressionConstantIntRule() {
		return getExpressionConstantIntAccess().getRule();
	}
	
	///*ExpressionConstantReal:
	//    value=ID
	//;*/
	//ExpressionConstantString:
	//    value = STRING
	//;
	public ExpressionConstantStringElements getExpressionConstantStringAccess() {
		return pExpressionConstantString;
	}
	
	public ParserRule getExpressionConstantStringRule() {
		return getExpressionConstantStringAccess().getRule();
	}
	
	//ExpressionEnumLiteral:
	//    //(interface = [signature::Signature|ID] '::')? type = [types::EnumTypeDecl] "::" literal = [types::EnumElement]
	//    type = ID "::" literal = ID
	//;
	public ExpressionEnumLiteralElements getExpressionEnumLiteralAccess() {
		return pExpressionEnumLiteral;
	}
	
	public ParserRule getExpressionEnumLiteralRule() {
		return getExpressionEnumLiteralAccess().getRule();
	}
	
	//ExpressionVariable:
	//    //variable=[Variable | ID]
	//    name= ID
	//;
	public ExpressionVariableElements getExpressionVariableAccess() {
		return pExpressionVariable;
	}
	
	public ParserRule getExpressionVariableRule() {
		return getExpressionVariableAccess().getRule();
	}
	
	///*ExpressionRecord:
	//    (interface = [signature::Signature|ID] '::')? type = [types::RecordTypeDecl] '{' fields+=Field (',' fields+=Field)* '}'
	//;
	//Field:
	//    recordField = [types::RecordField | ID] '=' exp = Expression
	//;
	//ExpressionBulkData : {ExpressionBulkData}
	//    'Bulkdata' '<' (size = Int)? '>'
	//;*/
	//ExpressionAny :
	//    {ExpressionAny} "*"
	//;
	public ExpressionAnyElements getExpressionAnyAccess() {
		return pExpressionAny;
	}
	
	public ParserRule getExpressionAnyRule() {
		return getExpressionAnyAccess().getRule();
	}
	
	//// We assume a library of functions. They can be provided in a separate model.
	//// At the moment we have just a check of the function name and then a dedicated check for the types of the arguments
	//// TODO: consider an expression (or function) Expression in Interval
	//ExpressionFunctionCall:
	//    functionName = ID '(' (args += Expression (',' args += Expression)*)? ')'
	//;
	public ExpressionFunctionCallElements getExpressionFunctionCallAccess() {
		return pExpressionFunctionCall;
	}
	
	public ParserRule getExpressionFunctionCallRule() {
		return getExpressionFunctionCallAccess().getRule();
	}
	
	////TODO rename to iterator? after adding 'delete' the expression is not a pure quantifier any more
	//ExpressionQuantifier:
	//    quantifier = QUANTIFIER '(' iterator = Variable 'in' collection = Expression ':' condition = Expression ')'
	//;
	public ExpressionQuantifierElements getExpressionQuantifierAccess() {
		return pExpressionQuantifier;
	}
	
	public ParserRule getExpressionQuantifierRule() {
		return getExpressionQuantifierAccess().getRule();
	}
	
	//ExpressionTypeAnnotated returns Expression:
	//    TypeAnnotation( ({ExpressionVector.typeAnnotation = current} '[' (elements += Expression (',' elements += Expression)*)? ']') |
	//                    ({ExpressionMap.typeAnnotation = current} '{' (pairs += Pair (',' pairs += Pair)*)? '}'))
	//;
	public ExpressionTypeAnnotatedElements getExpressionTypeAnnotatedAccess() {
		return pExpressionTypeAnnotated;
	}
	
	public ParserRule getExpressionTypeAnnotatedRule() {
		return getExpressionTypeAnnotatedAccess().getRule();
	}
	
	//TypeAnnotation :
	//    '<'type = ID '>'
	//;
	public TypeAnnotationElements getTypeAnnotationAccess() {
		return pTypeAnnotation;
	}
	
	public ParserRule getTypeAnnotationRule() {
		return getTypeAnnotationAccess().getRule();
	}
	
	//Pair:
	//    key = Expression '->' value = Expression
	//;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//enum QUANTIFIER :
	//    EXISTS = 'exists' |
	//    FORALL = 'forAll' |
	//    DELETE = 'delete'
	//;
	public QUANTIFIERElements getQUANTIFIERAccess() {
		return eQUANTIFIER;
	}
	
	public EnumRule getQUANTIFIERRule() {
		return getQUANTIFIERAccess().getRule();
	}
	
	//// --- add extra superclasses in metamodel -------
	//ExpressionBinary returns Expression:
	//    {ExpressionBinary}
	//;
	public ExpressionBinaryElements getExpressionBinaryAccess() {
		return pExpressionBinary;
	}
	
	public ParserRule getExpressionBinaryRule() {
		return getExpressionBinaryAccess().getRule();
	}
	
	//ConcreteExpressionBinary returns ExpressionBinary:
	//      {ExpressionAnd}
	//    | {ExpressionOr}
	//    | {ExpressionEqual}
	//    | {ExpressionNEqual}
	//    | {ExpressionGeq}
	//    | {ExpressionGreater}
	//    | {ExpressionLeq}
	//    | {ExpressionLess}
	//    | {ExpressionAddition}
	//    | {ExpressionSubtraction}
	//    | {ExpressionMultiply}
	//    | {ExpressionDivision}
	//    | {ExpressionMaximum}
	//    | {ExpressionMinimum}
	//    | {ExpressionModulo}
	//    | {ExpressionPower}
	//;
	public ConcreteExpressionBinaryElements getConcreteExpressionBinaryAccess() {
		return pConcreteExpressionBinary;
	}
	
	public ParserRule getConcreteExpressionBinaryRule() {
		return getConcreteExpressionBinaryAccess().getRule();
	}
	
	//ExpressionUnary returns Expression:
	//    {ExpressionUnary}
	//;
	public ExpressionUnaryElements getExpressionUnaryAccess() {
		return pExpressionUnary;
	}
	
	public ParserRule getExpressionUnaryRule() {
		return getExpressionUnaryAccess().getRule();
	}
	
	//ConcreteExpressionUnary returns ExpressionUnary:
	//      {ExpressionNot}
	//    | {ExpressionMinus}
	//    | {ExpressionPlus}
	//    | {ExpressionBracket}
	//;
	public ConcreteExpressionUnaryElements getConcreteExpressionUnaryAccess() {
		return pConcreteExpressionUnary;
	}
	
	public ParserRule getConcreteExpressionUnaryRule() {
		return getConcreteExpressionUnaryAccess().getRule();
	}
	
	////Extensions to the Types language
	///*
	//@Override
	//TypeReference: InterfaceAwareType type = [types::TypeDecl] ;
	//@Override
	//VectorTypeConstructor:
	//    InterfaceAwareType type = [types::TypeDecl] (dimensions += Dimension)+
	//;
	//@Override
	//MapTypeConstructor:
	//    'map' '<' InterfaceAwareType type = [types::TypeDecl] ',' valueType = Type '>'
	//;
	//fragment InterfaceAwareType:
	//    (interface = [signature::Signature|ID] '::')?
	//;
	//*/
	//// === Terminals =======
	//terminal BOOL_LITERAL returns ecore::EBoolean:
	//    'true' | 'false' | 'TRUE' | 'FALSE' | 'True' | 'False'
	//;
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
